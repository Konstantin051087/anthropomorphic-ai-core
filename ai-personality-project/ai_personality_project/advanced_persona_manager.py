"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

import logging
from typing import Dict, List, Any, Optional
from ai_personality_project.persona_manager import PersonaManager

logger = logging.getLogger(__name__)

class AdvancedPersonaManager(PersonaManager):
    def __init__(self):
        super().__init__()
        self.db_session = None
        
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î"""
        try:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AdvancedPersonaManager...")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            self._setup_database_connection()
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self._load_personas_from_db()
            
            self._initialized = True
            logger.info(f"‚úÖ AdvancedPersonaManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.personas)} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: {e}")
            super().initialize()
    
    def _setup_database_connection(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
            logger.info("üîó –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            self.db_session = "database_session_placeholder"
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–∑–∞–≥–ª—É—à–∫–∞)")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise
    
    def _load_personas_from_db(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if self.db_session:
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î
                logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
                
                # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
                super()._load_default_personas()
                
                logger.info("‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î (–∑–∞–≥–ª—É—à–∫–∞)")
            else:
                super()._load_default_personas()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –ë–î: {e}")
            super()._load_default_personas()
    
    def create_persona(self, name: str, personality_traits: Dict, 
                      description: str = "", communication_style: Dict = None) -> Optional[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –≤ –±–∞–∑–æ–≤–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
            new_persona = super().create_persona(name, personality_traits, description, communication_style)
            
            if new_persona and self.db_session:
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                self._save_persona_to_db(new_persona)
                logger.info(f"üíæ –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {name}")
            
            return new_persona
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ë–î: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            return super().create_persona(name, personality_traits, description, communication_style)
    
    def _save_persona_to_db(self, persona: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if self.db_session:
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω—É—é –ë–î
                logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ë–î: {persona['name']}")
                # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
                pass
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ë–î: {e}")
            raise
    
    def update_persona_emotion(self, persona_id: int, emotional_state: Dict) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î"""
        try:
            success = super().update_persona_emotion(persona_id, emotional_state)
            
            if success and self.db_session:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                self._update_persona_emotion_in_db(persona_id, emotional_state)
                logger.debug(f"üíæ –≠–º–æ—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ë–î: {persona_id}")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–π –≤ –ë–î: {e}")
            return super().update_persona_emotion(persona_id, emotional_state)
    
    def _update_persona_emotion_in_db(self, persona_id: int, emotional_state: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if self.db_session:
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î
                logger.debug(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π –≤ –ë–î –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {persona_id}")
                # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
                pass
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–π –≤ –ë–î: {e}")
            raise
    
    def get_persona_interaction_history(self, persona_id: int, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        try:
            if self.db_session:
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –ë–î
                logger.debug(f"üìú –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {persona_id}")
                
                # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
                return [
                    {
                        'timestamp': '2024-01-01 10:00:00',
                        'user_input': '–ü—Ä–∏–≤–µ—Ç',
                        'ai_response': '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!',
                        'emotion_detected': 'neutral'
                    }
                ]
            else:
                logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏")
                return []
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {e}")
            return []
    
    def get_detailed_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î"""
        base_stats = super().get_persona_stats()
        
        try:
            if self.db_session:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
                db_stats = self._get_db_stats()
                base_stats.update(db_stats)
                base_stats['data_source'] = 'database'
            else:
                base_stats['data_source'] = 'memory'
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î: {e}")
            base_stats['data_source'] = 'memory_fallback'
        
        return base_stats
    
    def _get_db_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î
            return {
                'db_connected': True,
                'total_interactions': 0,  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                'active_sessions': 0
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î: {e}")
            return {'db_connected': False}