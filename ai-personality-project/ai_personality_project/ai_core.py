"""
–û—Å–Ω–æ–≤–Ω–æ–µ —è–¥—Ä–æ AI —Å–∏—Å—Ç–µ–º—ã
"""

import logging
from typing import Dict, Any, Optional
import random

logger = logging.getLogger(__name__)

class AICore:
    def __init__(self):
        self.emotional_model = None
        self.persona_manager = None
        self._initialized = False
        
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ AI"""
        try:
            # –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            from ai_personality_project.emotional_model import EmotionalModel
            from ai_personality_project.advanced_persona_manager import AdvancedPersonaManager
            
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI Core...")
            
            self.emotional_model = EmotionalModel()
            self.persona_manager = AdvancedPersonaManager()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.emotional_model.initialize()
            self.persona_manager.initialize()
            
            self._initialized = True
            logger.info("‚úÖ AI Core —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except ImportError as e:
            logger.warning(f"–ú–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: {e}")
            self._setup_fallback_mode()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI Core: {e}")
            self._setup_fallback_mode()
    
    def _setup_fallback_mode(self):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        logger.info("üîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...")
        
        class FallbackEmotionalModel:
            def initialize(self): pass
            def analyze_emotion(self, text):
                emotions = ['happy', 'sad', 'angry', 'neutral', 'excited']
                return {
                    'dominant_emotion': random.choice(emotions),
                    'confidence': random.uniform(0.5, 0.9),
                    'emotion_scores': {e: random.random() for e in emotions}
                }
        
        class FallbackPersonaManager:
            def initialize(self): pass
            def get_persona(self, persona_id):
                personas = {
                    1: {'name': '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫', 'personality_traits': {'friendly': True}},
                    2: {'name': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫', 'personality_traits': {'professional': True}}
                }
                return personas.get(persona_id, personas[1])
            def list_personas(self):
                return [
                    {'id': 1, 'name': '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫'},
                    {'id': 2, 'name': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫'}
                ]
        
        self.emotional_model = FallbackEmotionalModel()
        self.persona_manager = FallbackPersonaManager()
        self._initialized = True
        logger.info("‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    def process_interaction(self, text: str, persona_id: int) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        if not self._initialized:
            self.initialize()
            
        try:
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: '{text}' –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {persona_id}")
            
            # –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
            emotion_analysis = self.emotional_model.analyze_emotion(text)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            persona = self.persona_manager.get_persona(persona_id)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            response = self._generate_response(text, emotion_analysis, persona)
            
            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {response[:50]}...")
            
            return {
                'success': True,
                'response': response,
                'emotion_analysis': emotion_analysis,
                'persona_id': persona_id,
                'persona_name': persona.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {e}")
            return {
                'success': False,
                'error': str(e),
                'response': '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.'
            }
    
    def _generate_response(self, text: str, emotion_analysis: Dict, persona: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        emotion = emotion_analysis.get('dominant_emotion', 'neutral')
        persona_traits = persona.get('personality_traits', {})
        
        # –ë–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç–º–æ—Ü–∏–∏
        emotion_responses = {
            'happy': [
                "–†–∞–¥ —Å–ª—ã—à–∞—Ç—å! ",
                "–≠—Ç–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! ",
                "–ö–∞–∫ –∑–¥–æ—Ä–æ–≤–æ! ",
                "–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! "
            ],
            'sad': [
                "–ú–Ω–µ –∂–∞–ª—å —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å. ",
                "–ü–æ–Ω–∏–º–∞—é –≤–∞—à–∏ —á—É–≤—Å—Ç–≤–∞. ",
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥—Ä—É—Å—Ç–Ω–æ. ",
                "–°–æ—á—É–≤—Å—Ç–≤—É—é –≤–∞–º. "
            ],
            'angry': [
                "–ü–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ. ",
                "–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è —Å —ç—Ç–∏–º —Å–ø–æ–∫–æ–π–Ω–æ. ",
                "–í–∏–∂—É, —á—Ç–æ —Å–∏—Ç—É–∞—Ü–∏—è –≤–∞—Å —Ä–∞—Å—Å—Ç—Ä–æ–∏–ª–∞. ",
                "–ü–æ–Ω–∏–º–∞—é –≤–∞—à–µ –Ω–µ–≥–æ–¥–æ–≤–∞–Ω–∏–µ. "
            ],
            'excited': [
                "–≠—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! ",
                "–ö–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! ",
                "–í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ! ",
                "–ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ! "
            ],
            'neutral': [
                "–ü–æ–Ω—è—Ç–Ω–æ. ",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ. ",
                "–Ø –≤–∞—Å —Å–ª—É—à–∞—é. ",
                "–ü–æ–Ω–∏–º–∞—é. "
            ]
        }
        
        # –í—ã–±–æ—Ä –±–∞–∑–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        base_responses = emotion_responses.get(emotion, emotion_responses['neutral'])
        base_response = random.choice(base_responses)
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–µ—Ä—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
        if persona_traits.get('friendly'):
            friendly_phrases = [
                "–•–æ—á—É –ø–æ–º–æ—á—å –≤–∞–º –≤ —ç—Ç–æ–º –≤–æ–ø—Ä–æ—Å–µ. ",
                "–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–∞—Å! ",
                "–î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è. "
            ]
            base_response += random.choice(friendly_phrases)
        elif persona_traits.get('professional'):
            professional_phrases = [
                "–° –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è, —ç—Ç–æ –≤–∞–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å. ",
                "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—è —Å–∏—Ç—É–∞—Ü–∏—é, –º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å. ",
                "–ò—Å—Ö–æ–¥—è –∏–∑ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫. "
            ]
            base_response += random.choice(professional_phrases)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        context_phrases = [
            f"–í—ã —Å–∫–∞–∑–∞–ª–∏: '{text}'",
            f"–ü–æ –ø–æ–≤–æ–¥—É '{text}' - —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ.",
            f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '{text}' –ø–æ–ª—É—á–∏–ª–æ –æ—Ç–≤–µ—Ç."
        ]
        base_response += random.choice(context_phrases)
        
        return base_response
    
    def get_system_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        return {
            'initialized': self._initialized,
            'components': {
                'emotional_model': self.emotional_model is not None,
                'persona_manager': self.persona_manager is not None
            },
            'personas_count': len(self.persona_manager.list_personas()) if self.persona_manager else 0
        }