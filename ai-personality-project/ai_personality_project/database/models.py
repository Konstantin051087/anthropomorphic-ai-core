"""
–ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI Personality Project
"""

from ai_personality_project.database.db_config import Base
from sqlalchemy import Column, Integer, String, Text, DateTime, JSON, Boolean, Float
from sqlalchemy.sql import func
from datetime import datetime

class Persona(Base):
    """–ú–æ–¥–µ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    __tablename__ = 'personas'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String(100), nullable=False, unique=True)
    description = Column(Text)
    
    # –ß–µ—Ä—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏
    personality_traits = Column(JSON, nullable=False)
    communication_style = Column(JSON, default=dict)
    
    # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    emotional_state = Column(JSON, default=dict)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    def to_dict(self):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'id': self.id,
            'name': self.name,
            'description': self.description,
            'personality_traits': self.personality_traits or {},
            'communication_style': self.communication_style or {},
            'emotional_state': self.emotional_state or {},
            'is_active': self.is_active,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None
        }
    
    def __repr__(self):
        return f"<Persona(id={self.id}, name='{self.name}')>"

class Interaction(Base):
    """–ú–æ–¥–µ–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    __tablename__ = 'interactions'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    
    # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    persona_id = Column(Integer, nullable=False)
    
    # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_input = Column(Text, nullable=False)
    input_emotion = Column(JSON)  # –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –≤–æ –≤—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    
    # –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    ai_response = Column(Text, nullable=False)
    response_emotion = Column(JSON)  # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–∫—Ä–∞—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç
    conversation_id = Column(String(100))  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏/–¥–∏–∞–ª–æ–≥–∞
    user_id = Column(String(100))  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    created_at = Column(DateTime, default=datetime.utcnow)
    processing_time = Column(Float)  # –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    def to_dict(self):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'id': self.id,
            'persona_id': self.persona_id,
            'user_input': self.user_input,
            'input_emotion': self.input_emotion or {},
            'ai_response': self.ai_response,
            'response_emotion': self.response_emotion or {},
            'conversation_id': self.conversation_id,
            'user_id': self.user_id,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'processing_time': self.processing_time
        }
    
    def __repr__(self):
        return f"<Interaction(id={self.id}, persona_id={self.persona_id})>"

class SystemLog(Base):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤"""
    __tablename__ = 'system_logs'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    level = Column(String(20), nullable=False)  # DEBUG, INFO, WARNING, ERROR
    module = Column(String(100), nullable=False)  # –ú–æ–¥—É–ª—å/–∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    message = Column(Text, nullable=False)
    details = Column(JSON)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
    created_at = Column(DateTime, default=datetime.utcnow)
    
    def to_dict(self):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'id': self.id,
            'level': self.level,
            'module': self.module,
            'message': self.message,
            'details': self.details or {},
            'created_at': self.created_at.isoformat() if self.created_at else None
        }

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def init_default_data(session):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    from ai_personality_project.persona_manager import PersonaManager
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
    existing_personas = session.query(Persona).count()
    
    if existing_personas == 0:
        logger.info("üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...")
        
        default_personas = [
            Persona(
                name='–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫',
                description='–¢–µ–ø–ª—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫',
                personality_traits={
                    'friendly': True,
                    'helpful': True,
                    'patient': True,
                    'empathetic': True,
                    'optimistic': True
                },
                communication_style={
                    'formal': False,
                    'warm': True,
                    'supportive': True,
                    'encouraging': True
                },
                emotional_state={
                    'current_mood': 'neutral',
                    'emotional_history': [],
                    'mood_stability': 0.7
                }
            ),
            Persona(
                name='–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫',
                description='–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫',
                personality_traits={
                    'professional': True,
                    'analytical': True,
                    'precise': True,
                    'formal': True,
                    'knowledgeable': True
                },
                communication_style={
                    'formal': True,
                    'structured': True,
                    'detailed': True,
                    'objective': True
                },
                emotional_state={
                    'current_mood': 'calm',
                    'emotional_history': [],
                    'mood_stability': 0.9
                }
            )
        ]
        
        for persona in default_personas:
            session.add(persona)
        
        session.commit()
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(default_personas)} –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")