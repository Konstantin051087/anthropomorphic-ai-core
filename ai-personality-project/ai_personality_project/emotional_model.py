"""
–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
"""

import logging
from typing import Dict, Any
import re

logger = logging.getLogger(__name__)

class EmotionalModel:
    def __init__(self):
        self._initialized = False
        self.emotion_keywords = {
            'happy': {
                'words': ['—Ä–∞–¥', '—Å—á–∞—Å—Ç–ª–∏–≤', '—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '—É—Ä–∞', '–≤–æ—Å—Ç–æ—Ä–≥', '–ª—é–±–æ–≤—å', '–Ω—Ä–∞–≤–∏—Ç—Å—è'],
                'emojis': ['üòä', 'üòÑ', 'ü•∞', 'üëç', 'üéâ'],
                'weight': 1.0
            },
            'sad': {
                'words': ['–≥—Ä—É—Å—Ç–Ω–æ', '–ø–µ—á–∞–ª—å–Ω–æ', '–ø–ª–æ—Ö–æ', '–∂–∞–ª—å', '–Ω–µ—Å—á–∞—Å—Ç–Ω—ã–π', '–ø–ª–∞—á', '—Å–ª–µ–∑—ã', '—Ç–æ—Å–∫–∞'],
                'emojis': ['üò¢', 'üò≠', 'üòû', 'üíî'],
                'weight': 1.0
            },
            'angry': {
                'words': ['–∑–ª–æ–π', '—Å–µ—Ä–¥–∏—Ç', '—Ä–∞–∑–æ–∑–ª–∏–ª—Å—è', '–±–µ—Å–∏—Ç', '—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç', '–Ω–µ–Ω–∞–≤–∏–∂—É', '—è—Ä–æ—Å—Ç—å', '–≥–Ω–µ–≤'],
                'emojis': ['üò†', 'üò°', 'üí¢'],
                'weight': 1.2
            },
            'excited': {
                'words': ['–≤–æ—Å—Ç–æ—Ä–≥', '–≤–æ–ª–Ω—É—é—Å—å', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ', '–ø–æ—Ç—Ä—è—Å–∞—é—â–µ', '—Å—É–ø–µ—Ä', '–∫—Ä—É—Ç–æ'],
                'emojis': ['ü§©', 'üéä', 'üöÄ'],
                'weight': 0.9
            },
            'calm': {
                'words': ['—Å–ø–æ–∫–æ–π–Ω–æ', '—É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–Ω–æ', '–º–∏—Ä–Ω–æ', '—Ç–∏—Ö–æ', '—Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ', '–±–µ–∑–º—è—Ç–µ–∂–Ω–æ'],
                'emojis': ['üòå', 'üåÖ', 'üçÉ'],
                'weight': 0.8
            }
        }
        
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        try:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EmotionalModel...")
            self._initialized = True
            logger.info("‚úÖ EmotionalModel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ EmotionalModel: {e}")
            raise
    
    def analyze_emotion(self, text: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
        if not self._initialized:
            self.initialize()
            
        try:
            text_lower = text.lower().strip()
            
            # –ü–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —ç–º–æ—Ü–∏–∏
            emotion_scores = {emotion: 0.0 for emotion in self.emotion_keywords}
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            for emotion, data in self.emotion_keywords.items():
                for word in data['words']:
                    if word in text_lower:
                        emotion_scores[emotion] += 1.0 * data['weight']
                
                # –ê–Ω–∞–ª–∏–∑ —ç–º–æ–¥–∑–∏
                for emoji in data['emojis']:
                    if emoji in text:
                        emotion_scores[emotion] += 2.0 * data['weight']
            
            # –ê–Ω–∞–ª–∏–∑ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å)
            exclamation_count = text.count('!')
            if exclamation_count > 0:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
                for emotion in ['excited', 'angry', 'happy']:
                    if emotion in emotion_scores:
                        emotion_scores[emotion] += exclamation_count * 0.5
            
            # –ê–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
            question_count = text.count('?')
            if question_count > 0:
                emotion_scores['calm'] += question_count * 0.3
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π - neutral
            if sum(emotion_scores.values()) == 0:
                emotion_scores['neutral'] = 1.0
            else:
                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ü–µ–Ω–æ–∫
                total_score = sum(emotion_scores.values())
                for emotion in emotion_scores:
                    emotion_scores[emotion] = emotion_scores[emotion] / total_score
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–π —ç–º–æ—Ü–∏–∏
            dominant_emotion = max(emotion_scores.items(), key=lambda x: x[1])
            
            result = {
                'dominant_emotion': dominant_emotion[0],
                'emotion_scores': emotion_scores,
                'confidence': dominant_emotion[1],
                'text_length': len(text),
                'word_count': len(text.split())
            }
            
            logger.debug(f"üìä –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π: '{text}' -> {dominant_emotion[0]} ({dominant_emotion[1]:.2f})")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π: {e}")
            return {
                'dominant_emotion': 'neutral',
                'emotion_scores': {'neutral': 1.0},
                'confidence': 0.0,
                'error': str(e)
            }
    
    def update_emotional_state(self, current_state: Dict, new_analysis: Dict) -> Dict:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        if not current_state:
            current_state = {
                'emotional_history': [],
                'current_mood': 'neutral',
                'mood_stability': 0.5
            }
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        current_state.setdefault('emotional_history', []).append({
            'emotion': new_analysis['dominant_emotion'],
            'confidence': new_analysis['confidence'],
            'timestamp': 'current'  # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç timestamp
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∞–Ω–∞–ª–∏–∑–æ–≤)
        if len(current_state['emotional_history']) > 10:
            current_state['emotional_history'] = current_state['emotional_history'][-10:]
        
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        recent_emotions = [item['emotion'] for item in current_state['emotional_history'][-5:]]
        
        if recent_emotions:
            from collections import Counter
            emotion_counts = Counter(recent_emotions)
            current_state['current_mood'] = emotion_counts.most_common(1)[0][0]
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            if len(recent_emotions) > 1:
                unique_emotions = len(set(recent_emotions))
                current_state['mood_stability'] = 1.0 - (unique_emotions / len(recent_emotions))
        
        return current_state
    
    def get_emotion_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        return {
            'initialized': self._initialized,
            'emotions_tracked': list(self.emotion_keywords.keys()),
            'keywords_per_emotion': {k: len(v['words']) for k, v in self.emotion_keywords.items()}
        }