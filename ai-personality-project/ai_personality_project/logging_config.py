"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
"""

import logging
import os
import sys
from logging.handlers import RotatingFileHandler
from datetime import datetime

class ColoredFormatter(logging.Formatter):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å —Ü–≤–µ—Ç–∞–º–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏"""
    
    COLORS = {
        'DEBUG': '\033[94m',     # –°–∏–Ω–∏–π
        'INFO': '\033[92m',      # –ó–µ–ª–µ–Ω—ã–π
        'WARNING': '\033[93m',   # –ñ–µ–ª—Ç—ã–π
        'ERROR': '\033[91m',     # –ö—Ä–∞—Å–Ω—ã–π
        'CRITICAL': '\033[95m',  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        'RESET': '\033[0m'       # –°–±—Ä–æ—Å
    }
    
    def format(self, record):
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
        emoji_map = {
            'DEBUG': 'üîç',
            'INFO': '‚ÑπÔ∏è',
            'WARNING': '‚ö†Ô∏è',
            'ERROR': '‚ùå',
            'CRITICAL': 'üí•'
        }
        
        record.emoji = emoji_map.get(record.levelname, 'üìù')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        log_message = super().format(record)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        if sys.stdout.isatty():  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ—Ä–º–∏–Ω–∞–ª
            color = self.COLORS.get(record.levelname, self.COLORS['RESET'])
            log_message = f"{color}{log_message}{self.COLORS['RESET']}"
        
        return log_message

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
    log_dir = 'logs'
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # –¶–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    colored_formatter = ColoredFormatter(
        '%(asctime)s %(emoji)s [%(levelname)s] %(name)s: %(message)s',
        datefmt='%H:%M:%S'
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ (—Ä–æ—Ç–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É)
    file_handler = RotatingFileHandler(
        filename=os.path.join(log_dir, 'ai_personality.log'),
        maxBytes=10 * 1024 * 1024,  # 10MB
        backupCount=5,
        encoding='utf-8'
    )
    file_handler.setFormatter(formatter)
    file_handler.setLevel(logging.INFO)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(colored_formatter)
    console_handler.setLevel(logging.DEBUG)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—à–∏–±–æ–∫ (–æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª)
    error_handler = RotatingFileHandler(
        filename=os.path.join(log_dir, 'errors.log'),
        maxBytes=5 * 1024 * 1024,  # 5MB
        backupCount=3,
        encoding='utf-8'
    )
    error_handler.setFormatter(formatter)
    error_handler.setLevel(logging.ERROR)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    for handler in root_logger.handlers[:]:
        root_logger.removeHandler(handler)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    root_logger.addHandler(file_handler)
    root_logger.addHandler(console_handler)
    root_logger.addHandler(error_handler)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('werkzeug').setLevel(logging.WARNING)
    logging.getLogger('sqlalchemy').setLevel(logging.WARNING)
    logging.getLogger('urllib3').setLevel(logging.WARNING)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    startup_logger = logging.getLogger('startup')
    startup_logger.info("üöÄ AI Personality Project - –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    startup_logger.info(f"üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {os.path.abspath(log_dir)}")
    
    return root_logger

def get_logger(name: str) -> logging.Logger:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º"""
    return logging.getLogger(name)

def log_system_info():
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    logger = get_logger('system')
    
    logger.info("=== –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===")
    logger.info(f"Python: {sys.version}")
    logger.info(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {sys.platform}")
    logger.info(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    logger.info(f"–ü—É—Ç—å –∫ Python: {sys.executable}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏
    try:
        import psutil
        memory = psutil.virtual_memory()
        logger.info(f"–ü–∞–º—è—Ç—å: {memory.percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ({memory.used // (1024**3)}GB/{memory.total // (1024**3)}GB)")
    except ImportError:
        logger.warning("psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    logger.info("=== –ö–û–ù–ï–¶ –°–ò–°–¢–ï–ú–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò ===")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
setup_logging()
system_logger = get_logger('system')
log_system_info()