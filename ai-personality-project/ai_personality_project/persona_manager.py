"""
–ë–∞–∑–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
"""

import logging
from typing import Dict, List, Any, Optional

logger = logging.getLogger(__name__)

class PersonaManager:
    def __init__(self):
        self._initialized = False
        self.personas = {}
        
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        try:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PersonaManager...")
            
            self._load_default_personas()
            self._initialized = True
            
            logger.info(f"‚úÖ PersonaManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.personas)} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PersonaManager: {e}")
            raise
    
    def _load_default_personas(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.personas = {
            1: {
                'id': 1,
                'name': '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫',
                'description': '–¢–µ–ø–ª—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫',
                'personality_traits': {
                    'friendly': True,
                    'helpful': True,
                    'patient': True,
                    'empathetic': True,
                    'optimistic': True
                },
                'communication_style': {
                    'formal': False,
                    'warm': True,
                    'supportive': True,
                    'encouraging': True
                },
                'emotional_state': {
                    'current_mood': 'neutral',
                    'emotional_history': [],
                    'mood_stability': 0.7
                },
                'created_at': '2024-01-01',
                'is_active': True
            },
            2: {
                'id': 2,
                'name': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫',
                'description': '–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫',
                'personality_traits': {
                    'professional': True,
                    'analytical': True,
                    'precise': True,
                    'formal': True,
                    'knowledgeable': True
                },
                'communication_style': {
                    'formal': True,
                    'structured': True,
                    'detailed': True,
                    'objective': True
                },
                'emotional_state': {
                    'current_mood': 'calm',
                    'emotional_history': [],
                    'mood_stability': 0.9
                },
                'created_at': '2024-01-01',
                'is_active': True
            }
        }
    
    def get_persona(self, persona_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ ID"""
        if not self._initialized:
            self.initialize()
            
        persona = self.personas.get(persona_id)
        
        if not persona:
            logger.warning(f"‚ö†Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å ID {persona_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
            
        logger.debug(f"üìã –ü–æ–ª—É—á–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂: {persona['name']} (ID: {persona_id})")
        return persona
    
    def list_personas(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        if not self._initialized:
            self.initialize()
            
        personas_list = list(self.personas.values())
        logger.debug(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(personas_list)} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
        return personas_list
    
    def create_persona(self, name: str, personality_traits: Dict, 
                      description: str = "", communication_style: Dict = None) -> Optional[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        try:
            if not self._initialized:
                self.initialize()
            
            new_id = max(self.personas.keys()) + 1 if self.personas else 1
            
            new_persona = {
                'id': new_id,
                'name': name,
                'description': description or f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {name}",
                'personality_traits': personality_traits,
                'communication_style': communication_style or {},
                'emotional_state': {
                    'current_mood': 'neutral',
                    'emotional_history': [],
                    'mood_stability': 0.5
                },
                'created_at': '2024-01-01',  # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
                'is_active': True
            }
            
            self.personas[new_id] = new_persona
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂: {name} (ID: {new_id})")
            
            return new_persona
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
            return None
    
    def update_persona_emotion(self, persona_id: int, emotional_state: Dict) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        try:
            persona = self.get_persona(persona_id)
            if persona:
                persona['emotional_state'] = emotional_state
                logger.debug(f"üé≠ –û–±–Ω–æ–≤–ª–µ–Ω–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {persona_id}")
                return True
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
            return False
    
    def get_persona_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º"""
        if not self._initialized:
            self.initialize()
            
        active_personas = [p for p in self.personas.values() if p.get('is_active', True)]
        
        return {
            'total_personas': len(self.personas),
            'active_personas': len(active_personas),
            'persona_names': [p['name'] for p in active_personas],
            'average_traits_per_persona': sum(len(p['personality_traits']) for p in active_personas) / len(active_personas)
        }