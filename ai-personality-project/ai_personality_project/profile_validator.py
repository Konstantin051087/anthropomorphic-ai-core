"""
–í–∞–ª–∏–¥–∞—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
"""

import logging
import re
from typing import Dict, List, Tuple, Any

logger = logging.getLogger(__name__)

class ProfileValidator:
    def __init__(self):
        self.allowed_emotions = ['happy', 'sad', 'angry', 'neutral', 'excited', 'calm']
        self.required_persona_fields = ['name', 'personality_traits']
        self.max_name_length = 50
        self.max_description_length = 200
        
    def validate_persona_data(self, persona_data: Dict) -> Tuple[bool, List[str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        errors = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        for field in self.required_persona_fields:
            if field not in persona_data:
                errors.append(f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {field}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
        if 'name' in persona_data:
            name_errors = self._validate_name(persona_data['name'])
            errors.extend(name_errors)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä—Ç –ª–∏—á–Ω–æ—Å—Ç–∏
        if 'personality_traits' in persona_data:
            trait_errors = self._validate_personality_traits(persona_data['personality_traits'])
            errors.extend(trait_errors)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if 'emotional_state' in persona_data:
            emotion_errors = self._validate_emotional_state(persona_data['emotional_state'])
            errors.extend(emotion_errors)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è
        if 'communication_style' in persona_data:
            style_errors = self._validate_communication_style(persona_data['communication_style'])
            errors.extend(style_errors)
        
        is_valid = len(errors) == 0
        logger.debug(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {is_valid}, –æ—à–∏–±–∫–∏: {errors}")
        
        return is_valid, errors
    
    def _validate_name(self, name: str) -> List[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        errors = []
        
        if not isinstance(name, str):
            errors.append("–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
            return errors
        
        name = name.strip()
        
        if not name:
            errors.append("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        if len(name) > self.max_name_length:
            errors.append(f"–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º {self.max_name_length} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        if re.search(r'[<>{}[\]$]', name):
            errors.append("–ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
        
        return errors
    
    def _validate_personality_traits(self, traits: Dict) -> List[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä—Ç –ª–∏—á–Ω–æ—Å—Ç–∏"""
        errors = []
        
        if not isinstance(traits, dict):
            errors.append("–ß–µ—Ä—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
            return errors
        
        if not traits:
            errors.append("–°–ª–æ–≤–∞—Ä—å —á–µ—Ä—Ç –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        for trait, value in traits.items():
            if not isinstance(trait, str):
                errors.append(f"–ö–ª—é—á —á–µ—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π: {trait}")
            
            if not isinstance(value, bool):
                errors.append(f"–ó–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä—Ç—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å boolean: {trait}")
        
        return errors
    
    def _validate_emotional_state(self, emotional_state: Dict) -> List[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        errors = []
        
        if not isinstance(emotional_state, dict):
            errors.append("–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
            return errors
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        if 'current_mood' in emotional_state:
            mood = emotional_state['current_mood']
            if mood not in self.allowed_emotions:
                errors.append(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: {', '.join(self.allowed_emotions)}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π
        if 'emotional_history' in emotional_state:
            history = emotional_state['emotional_history']
            if not isinstance(history, list):
                errors.append("–ò—Å—Ç–æ—Ä–∏—è —ç–º–æ—Ü–∏–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
            else:
                for item in history:
                    if not isinstance(item, dict):
                        errors.append("–≠–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        if 'mood_stability' in emotional_state:
            stability = emotional_state['mood_stability']
            if not isinstance(stability, (int, float)):
                errors.append("–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            elif not 0 <= stability <= 1:
                errors.append("–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 1")
        
        return errors
    
    def _validate_communication_style(self, style: Dict) -> List[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è"""
        errors = []
        
        if not isinstance(style, dict):
            errors.append("–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
            return errors
        
        allowed_style_keys = ['formal', 'warm', 'supportive', 'encouraging', 'structured', 'detailed', 'objective']
        
        for key, value in style.items():
            if key not in allowed_style_keys:
                errors.append(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–ª—é—á —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è: {key}")
            
            if not isinstance(value, bool):
                errors.append(f"–ó–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å boolean: {key}")
        
        return errors
    
    def validate_interaction_data(self, interaction_data: Dict) -> Tuple[bool, List[str]]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
        errors = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if 'text' not in interaction_data:
            errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
        else:
            text = interaction_data['text']
            if not isinstance(text, str):
                errors.append("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
            elif not text.strip():
                errors.append("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            elif len(text) > 1000:
                errors.append("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if 'persona_id' not in interaction_data:
            errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
        else:
            persona_id = interaction_data['persona_id']
            if not isinstance(persona_id, int):
                errors.append("ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
            elif persona_id < 1:
                errors.append("ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        is_valid = len(errors) == 0
        logger.debug(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {is_valid}, –æ—à–∏–±–∫–∏: {errors}")
        
        return is_valid, errors
    
    def sanitize_text(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        if not isinstance(text, str):
            return ""
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö HTML/JS —Ç–µ–≥–æ–≤
        sanitized = re.sub(r'<script.*?</script>', '', text, flags=re.IGNORECASE | re.DOTALL)
        sanitized = re.sub(r'<[^>]*>', '', sanitized)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        sanitized = re.sub(r'[{}<>]', '', sanitized)
        
        # –û–±—Ä–µ–∑–∫–∞ –¥–ª–∏–Ω—ã
        sanitized = sanitized[:1000]
        
        return sanitized.strip()
    
    def get_validation_rules(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        return {
            'allowed_emotions': self.allowed_emotions,
            'required_persona_fields': self.required_persona_fields,
            'max_name_length': self.max_name_length,
            'max_description_length': self.max_description_length,
            'max_text_length': 1000
        }