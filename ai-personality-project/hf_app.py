import gradio as gr
from ai_personality_project.ai_core import AICore
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI
ai_core = AICore()

def initialize_ai():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    try:
        ai_core.initialize()
        logger.info("‚úÖ AI Core initialized successfully for HF Spaces")
        return True
    except Exception as e:
        logger.error(f"‚ùå AI Core initialization failed: {e}")
        return False

def chat_interface(message, history, persona_id):
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ –¥–ª—è Gradio"""
    try:
        if not ai_core._initialized:
            if not initialize_ai():
                return "–°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        result = ai_core.process_interaction(message, int(persona_id))
        
        if result['success']:
            response = result['response']
            emotion = result.get('emotion_analysis', {}).get('dominant_emotion', 'neutral')
            return f"{response} [–≠–º–æ—Ü–∏—è: {emotion}]"
        else:
            return f"–û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            
    except Exception as e:
        logger.error(f"Error in chat interface: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"

def create_hf_interface():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è Hugging Face"""
    with gr.Blocks(title="üé≠ AI Personality Project", theme=gr.themes.Soft()) as demo:
        gr.Markdown("""
        # üé≠ AI Personality Project
        **–ò–ò —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é, —ç–º–æ—Ü–∏—è–º–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º**
        
        –í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å –∏ –Ω–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ!
        """)
        
        with gr.Row():
            with gr.Column(scale=1):
                persona_id = gr.Dropdown(
                    choices=[
                        ("1 - –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üéØ", "1"),
                        ("2 - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫ üíº", "2")
                    ],
                    label="üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å",
                    value="1",
                    interactive=True
                )
                
                gr.Markdown("""
                ### üìã –û–ø–∏—Å–∞–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–µ–π:
                - **–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫**: –¢–µ–ø–ª—ã–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π
                - **–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫**: –°–¥–µ—Ä–∂–∞–Ω–Ω—ã–π, –∞–Ω–∞–ª–∏—Ç–∏—á–Ω—ã–π, —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π
                """)
            
            with gr.Column(scale=2):
                chatbot = gr.Chatbot(
                    label="üí¨ –î–∏–∞–ª–æ–≥ —Å –ò–ò",
                    height=400,
                    show_copy_button=True
                )
                
                msg = gr.Textbox(
                    label="‚úçÔ∏è –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å...",
                    lines=2,
                    max_lines=5
                )
                
                with gr.Row():
                    submit_btn = gr.Button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", variant="primary")
                    clear_btn = gr.Button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", variant="secondary")
        
        def respond(message, chat_history, persona):
            if not message.strip():
                return "", chat_history
                
            bot_message = chat_interface(message, chat_history, persona)
            chat_history.append((message, bot_message))
            return "", chat_history
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        msg.submit(respond, [msg, chatbot, persona_id], [msg, chatbot])
        submit_btn.click(respond, [msg, chatbot, persona_id], [msg, chatbot])
        clear_btn.click(lambda: None, None, chatbot, queue=False)
    
    return demo

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
initialize_ai()

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = create_hf_interface()

if __name__ == "__main__":
    app.launch(
        server_name="0.0.0.0",
        server_port=int(os.getenv("PORT", 7860)),
        share=False
    )