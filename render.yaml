version: 1
services:
  # Основной веб-сервис
  - type: web
    name: emotional-ai-web
    env: python
    region: frankfurt
    plan: free
    root: web-service
    buildCommand: |
      pip install -r requirements.txt
      python -c "from database.models import db; from app import create_app; app = create_app(); db.create_all(app=app)"
    startCommand: gunicorn app:create_app() --bind 0.0.0.0:$PORT --workers 2 --threads 4 --timeout 120
    envVars:
      - key: DATABASE_URL
        fromDatabase:
          name: emotional-ai-db
          property: connectionString
      - key: SECRET_KEY
        generateValue: true
      - key: AI_SERVICE_URL
        fromService:
          type: web
          name: emotional-ai-service
          envVarKey: RENDER_EXTERNAL_URL
      - key: LOG_LEVEL
        value: INFO

  # AI микросервис
  - type: web
    name: emotional-ai-service
    env: python
    region: frankfurt
    plan: free
    root: ai-service
    buildCommand: |
      pip install -r requirements.txt
      python -c "from emotional_analysis.analyzer import EmotionAnalyzer; analyzer = EmotionAnalyzer()"
    startCommand: gunicorn app:app --bind 0.0.0.0:$PORT --workers 1 --threads 2 --timeout 180
    envVars:
      - key: PORT
        value: 10000
      - key: LOG_LEVEL
        value: INFO
      - key: HF_HOME
        value: /tmp/huggingface
      - key: TRANSFORMERS_CACHE
        value: /tmp/huggingface

  # База данных PostgreSQL
  - type: postgres
    name: emotional-ai-db
    region: frankfurt
    plan: free
    ipAllowList: []
    databaseName: emotional_ai
    user: emotional_ai_user

# Настройки сборки
buildFilters:
  - paths:
      - "web-service/**"
    service: emotional-ai-web
  - paths:
      - "ai-service/**"
    service: emotional-ai-service
  - paths:
      - "shared/**"
    service: emotional-ai-web
  - paths:
      - "shared/**"
    service: emotional-ai-service

# Переменные окружения для всех сервисов
envVars:
  - key: PYTHON_VERSION
    value: 3.12.3
  - key: ENVIRONMENT
    value: production