#!/usr/bin/env python3
"""
–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –í–°–ï–ì–û –ü–†–û–ï–ö–¢–ê ANTHROPOMORPHIC AI - –í–ï–†–°–ò–Ø 9.0 –° –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ú–ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø–ú–ò
"""

import os
import sys
import json
import logging
import importlib.metadata
import subprocess
from pathlib import Path
from typing import Dict, List, Tuple, Any, Set
import urllib.request
import urllib.error
import time
import socket
import re
import ast
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(levelname)s: %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

class ComprehensiveProjectTest:
    def __init__(self):
        self.base_dir = Path(__file__).parent.parent
        self.project_structure = {}
        self.test_results = {
            "project": "Anthropomorphic AI Core",
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "python_version": sys.version,
            "overall_status": "IN_PROGRESS",
            "current_stage": "1.3 - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
            "stage_progress": {},
            "project_structure": {},
            "detailed_analysis": {},
            "recommendations": [],
            "score": {
                "total_tests": 0,
                "passed_tests": 0,
                "success_rate": 0
            }
        }
        self.server_thread = None

    def print_header(self, message: str):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞–∑–¥–µ–ª–∞"""
        print(f"\n{'='*80}")
        print(f"üîç {message}")
        print(f"{'='*80}")

    def print_section(self, message: str):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞"""
        print(f"\n{'‚îÄ'*60}")
        print(f"üìÅ {message}")
        print(f"{'‚îÄ'*60}")

    def print_result(self, test_name: str, status: bool, details: str = "", points: int = 1):
        """–ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        icon = "‚úÖ" if status else "‚ùå"
        status_text = "–í–´–ü–û–õ–ù–ï–ù–û" if status else "–ù–ï –í–´–ü–û–õ–ù–ï–ù–û"
        print(f"{icon} {test_name}: {status_text}")
        if details:
            print(f"   üìù {details}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤
        self.test_results["score"]["total_tests"] += 1
        if status:
            self.test_results["score"]["passed_tests"] += points
        
        return status

    def scan_project_structure(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        self.print_header("üìÅ –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê")
        
        structure = {}
        excluded_dirs = {'.git', '__pycache__', '.pytest_cache', 'venv', 'env', '.env'}
        excluded_files = {'.DS_Store', '*.pyc', '*.pyo'}
        
        def scan_directory(path: Path, level=0):
            """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
            rel_path = path.relative_to(self.base_dir)
            dir_structure = {
                "type": "directory",
                "path": str(rel_path),
                "files": [],
                "subdirs": {}
            }
            
            try:
                for item in path.iterdir():
                    if item.name in excluded_dirs:
                        continue
                    if any(item.name.endswith(ext) for ext in ['.pyc', '.pyo']):
                        continue
                    
                    if item.is_dir():
                        dir_structure["subdirs"][item.name] = scan_directory(item, level + 1)
                    else:
                        file_info = {
                            "name": item.name,
                            "size": item.stat().st_size,
                            "modified": time.ctime(item.stat().st_mtime)
                        }
                        dir_structure["files"].append(file_info)
            except PermissionError:
                dir_structure["error"] = "Permission denied"
            
            return dir_structure
        
        structure = scan_directory(self.base_dir)
        self.project_structure = structure
        self.test_results["project_structure"] = structure
        
        # –í—ã–≤–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –∫–æ–Ω—Å–æ–ª—å
        self.print_section("–°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê")
        self._print_tree(structure)
        
        return True

    def _print_tree(self, structure: Dict, prefix: str = ""):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–≤–æ–¥ –¥–µ—Ä–µ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        if "path" in structure:
            print(f"{prefix}üìÅ {structure['path']}/")
        
        # –í—ã–≤–æ–¥ —Ñ–∞–π–ª–æ–≤
        for file_info in structure.get("files", []):
            print(f"{prefix}   üìÑ {file_info['name']} ({file_info['size']} bytes)")
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–≤–æ–¥ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        for dir_name, dir_structure in structure.get("subdirs", {}).items():
            self._print_tree(dir_structure, prefix + "   ")

    def test_stage_1_preparatory(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≠–¢–ê–ü–ê 1: –ü–û–î–ì–û–¢–û–í–ò–¢–ï–õ–¨–ù–´–ô"""
        self.print_header("üéØ –≠–¢–ê–ü 1: –ü–û–î–ì–û–¢–û–í–ò–¢–ï–õ–¨–ù–´–ô (–ù–ï–î–ï–õ–ò 1-2)")
        
        stage_results = {
            "status": "IN_PROGRESS",
            "tasks": {},
            "completion_percentage": 0
        }
        
        # –ó–∞–¥–∞—á–∞ 1.1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        task_1_1_results = self._test_task_1_1()
        stage_results["tasks"]["1.1"] = task_1_1_results
        
        # –ó–∞–¥–∞—á–∞ 1.2: –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        task_1_2_results = self._test_task_1_2()
        stage_results["tasks"]["1.2"] = task_1_2_results
        
        # –ó–∞–¥–∞—á–∞ 1.3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        task_1_3_results = self._test_task_1_3()
        stage_results["tasks"]["1.3"] = task_1_3_results
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —ç—Ç–∞–ø–∞
        completed_tasks = sum(1 for task in stage_results["tasks"].values() if task["status"] == "COMPLETED")
        total_tasks = len(stage_results["tasks"])
        stage_results["completion_percentage"] = (completed_tasks / total_tasks) * 100
        
        if stage_results["completion_percentage"] == 100:
            stage_results["status"] = "COMPLETED"
        elif stage_results["completion_percentage"] > 0:
            stage_results["status"] = "IN_PROGRESS"
        else:
            stage_results["status"] = "NOT_STARTED"
        
        self.test_results["stage_progress"]["stage_1"] = stage_results
        return stage_results

    def _test_task_1_1(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ó–∞–¥–∞—á–∏ 1.1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
        self.print_section("–ó–ê–î–ê–ß–ê 1.1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
        
        task_results = {
            "name": "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞",
            "status": "IN_PROGRESS",
            "subtasks": {},
            "completion_percentage": 0
        }
        
        # –ü–æ–¥–∑–∞–¥–∞—á–∞ 1.1.1: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è GitHub —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∫–∞—Ç–∞–ª–æ–≥–æ–≤
        subtask_1_1_1 = self._test_subtask_1_1_1()
        task_results["subtasks"]["1.1.1"] = subtask_1_1_1
        
        # –ü–æ–¥–∑–∞–¥–∞—á–∞ 1.1.2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ requirements.txt
        subtask_1_1_2 = self._test_subtask_1_1_2()
        task_results["subtasks"]["1.1.2"] = subtask_1_1_2
        
        # –ü–æ–¥–∑–∞–¥–∞—á–∞ 1.1.3: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏, README.md, .gitignore
        subtask_1_1_3 = self._test_subtask_1_1_3()
        task_results["subtasks"]["1.1.3"] = subtask_1_1_3
        
        # –ü–æ–¥–∑–∞–¥–∞—á–∞ 1.1.4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ –≤ .github/workflows/
        subtask_1_1_4 = self._test_subtask_1_1_4()
        task_results["subtasks"]["1.1.4"] = subtask_1_1_4
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞—á–∏
        completed_subtasks = sum(1 for subtask in task_results["subtasks"].values() if subtask["status"] == "COMPLETED")
        total_subtasks = len(task_results["subtasks"])
        task_results["completion_percentage"] = (completed_subtasks / total_subtasks) * 100
        
        if task_results["completion_percentage"] == 100:
            task_results["status"] = "COMPLETED"
        elif task_results["completion_percentage"] > 0:
            task_results["status"] = "IN_PROGRESS"
        else:
            task_results["status"] = "NOT_STARTED"
        
        return task_results

    def _test_subtask_1_1_1(self):
        """–ü–æ–¥–∑–∞–¥–∞—á–∞ 1.1.1: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è GitHub —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∫–∞—Ç–∞–ª–æ–≥–æ–≤"""
        subtask_results = {
            "name": "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–æ–≤",
            "status": "IN_PROGRESS",
            "checks": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        required_dirs = [
            "api", "core", "modules", "database", "scripts", "tests", 
            "data/configs", "utils", "docs", ".github/workflows"
        ]
        
        dir_checks = []
        for dir_path in required_dirs:
            full_path = self.base_dir / dir_path
            exists = full_path.exists()
            check_result = self.print_result(
                f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}",
                exists,
                "–ù–∞–π–¥–µ–Ω–∞" if exists else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            )
            dir_checks.append({
                "directory": dir_path,
                "exists": exists,
                "status": "PASS" if exists else "FAIL"
            })
        
        subtask_results["checks"].extend(dir_checks)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        critical_files = [
            "api/__init__.py", "api/app.py", "api/routes.py",
            "core/__init__.py", "core/config.py", "core/main.py",
            "requirements.txt", "README.md", ".gitignore"
        ]
        
        file_checks = []
        for file_path in critical_files:
            full_path = self.base_dir / file_path
            exists = full_path.exists()
            check_result = self.print_result(
                f"–§–∞–π–ª: {file_path}",
                exists,
                "–ù–∞–π–¥–µ–Ω" if exists else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            )
            file_checks.append({
                "file": file_path,
                "exists": exists,
                "status": "PASS" if exists else "FAIL"
            })
        
        subtask_results["checks"].extend(file_checks)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
        all_passed = all(check["status"] == "PASS" for check in subtask_results["checks"])
        subtask_results["status"] = "COMPLETED" if all_passed else "IN_PROGRESS"
        
        return subtask_results

    def _test_subtask_1_1_2(self):
        """–ü–æ–¥–∑–∞–¥–∞—á–∞ 1.1.2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ requirements.txt"""
        subtask_results = {
            "name": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
            "status": "IN_PROGRESS",
            "checks": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt
        requirements_file = self.base_dir / "requirements.txt"
        if requirements_file.exists():
            try:
                with open(requirements_file, 'r') as f:
                    requirements = f.readlines()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
                critical_packages = ["fastapi", "uvicorn", "sqlalchemy", "pydantic", "pydantic-settings"]
                packages_found = []
                
                for package in critical_packages:
                    found = any(package in line.lower() for line in requirements)
                    check_result = self.print_result(
                        f"–ü–∞–∫–µ—Ç –≤ requirements.txt: {package}",
                        found,
                        "–ù–∞–π–¥–µ–Ω" if found else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    )
                    packages_found.append({
                        "package": package,
                        "found": found,
                        "status": "PASS" if found else "FAIL"
                    })
                
                subtask_results["checks"].extend(packages_found)
                
                # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–π Python
                python_version_check = self._check_python_compatibility()
                subtask_results["checks"].append({
                    "check": "python_compatibility",
                    "status": "PASS" if python_version_check else "WARNING",
                    "details": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–π Python"
                })
                
            except Exception as e:
                self.print_result("–ß—Ç–µ–Ω–∏–µ requirements.txt", False, f"–û—à–∏–±–∫–∞: {e}")
                subtask_results["checks"].append({
                    "check": "read_requirements",
                    "status": "FAIL",
                    "error": str(e)
                })
        else:
            self.print_result("–§–∞–π–ª requirements.txt", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            subtask_results["checks"].append({
                "check": "requirements_exists",
                "status": "FAIL",
                "error": "–§–∞–π–ª requirements.txt –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
        installed_checks = []
        for package in ["fastapi", "uvicorn", "sqlalchemy", "pydantic"]:
            try:
                version = importlib.metadata.version(package)
                check_result = self.print_result(
                    f"–ü–∞–∫–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {package}",
                    True,
                    f"–í–µ—Ä—Å–∏—è: {version}"
                )
                installed_checks.append({
                    "package": package,
                    "installed": True,
                    "version": version,
                    "status": "PASS"
                })
            except importlib.metadata.PackageNotFoundError:
                check_result = self.print_result(
                    f"–ü–∞–∫–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {package}",
                    False,
                    "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                )
                installed_checks.append({
                    "package": package,
                    "installed": False,
                    "status": "FAIL"
                })
        
        subtask_results["checks"].extend(installed_checks)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
        all_passed = all(check.get("status") == "PASS" for check in subtask_results["checks"])
        subtask_results["status"] = "COMPLETED" if all_passed else "IN_PROGRESS"
        
        return subtask_results

    def _check_python_compatibility(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–π Python"""
        local_version = sys.version_info
        render_version = (3, 13, 4)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ª–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ —Å—Ç–∞—Ä—à–µ –≤–µ—Ä—Å–∏–∏ –Ω–∞ Render
        compatible = local_version >= (3, 9)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è
        
        if not compatible:
            self.print_result(
                "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–µ—Ä—Å–∏–π Python", 
                False, 
                f"–õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è {local_version[0]}.{local_version[1]} –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å Render 3.13.4"
            )
        else:
            self.print_result(
                "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–µ—Ä—Å–∏–π Python", 
                True, 
                f"–õ–æ–∫–∞–ª—å–Ω–∞—è {local_version[0]}.{local_version[1]}.{local_version[2]} ‚Üí Render 3.13.4"
            )
        
        return compatible

    def _test_subtask_1_1_3(self):
        """–ü–æ–¥–∑–∞–¥–∞—á–∞ 1.1.3: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏, README.md, .gitignore"""
        subtask_results = {
            "name": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
            "status": "IN_PROGRESS",
            "checks": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ README.md
        readme_file = self.base_dir / "README.md"
        if readme_file.exists():
            readme_size = readme_file.stat().st_size
            check_result = self.print_result(
                "–§–∞–π–ª README.md",
                readme_size > 100,  # –ú–∏–Ω–∏–º—É–º 100 –±–∞–π—Ç
                f"–†–∞–∑–º–µ—Ä: {readme_size} –±–∞–π—Ç"
            )
            subtask_results["checks"].append({
                "file": "README.md",
                "exists": True,
                "size": readme_size,
                "status": "PASS" if readme_size > 100 else "FAIL"
            })
        else:
            self.print_result("–§–∞–π–ª README.md", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            subtask_results["checks"].append({
                "file": "README.md",
                "exists": False,
                "status": "FAIL"
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore
        gitignore_file = self.base_dir / ".gitignore"
        if gitignore_file.exists():
            try:
                content = gitignore_file.read_text()
                lines = [line.strip() for line in content.split('\n') 
                        if line.strip() and not line.strip().startswith('#')]
                
                critical_patterns = [".env", "__pycache__", "*.pyc", "instance/", ".pytest_cache"]
                missing_patterns = [pattern for pattern in critical_patterns 
                                  if not any(pattern in line for line in lines)]
                
                check_result = self.print_result(
                    "–§–∞–π–ª .gitignore",
                    len(missing_patterns) == 0,
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {missing_patterns}" if missing_patterns else "–í—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
                )
                subtask_results["checks"].append({
                    "file": ".gitignore",
                    "exists": True,
                    "complete": len(missing_patterns) == 0,
                    "missing_patterns": missing_patterns,
                    "status": "PASS" if len(missing_patterns) == 0 else "FAIL"
                })
            except Exception as e:
                self.print_result("–ß—Ç–µ–Ω–∏–µ .gitignore", False, f"–û—à–∏–±–∫–∞: {e}")
                subtask_results["checks"].append({
                    "file": ".gitignore",
                    "exists": True,
                    "status": "FAIL",
                    "error": str(e)
                })
        else:
            self.print_result("–§–∞–π–ª .gitignore", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            subtask_results["checks"].append({
                "file": ".gitignore",
                "exists": False,
                "status": "FAIL"
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ LICENSE
        license_files = ["LICENSE", "LICENSE.md", "LICENSE.txt"]
        license_found = False
        for license_file in license_files:
            if (self.base_dir / license_file).exists():
                license_found = True
                break
        
        check_result = self.print_result(
            "–§–∞–π–ª –ª–∏—Ü–µ–Ω–∑–∏–∏",
            license_found,
            "–ù–∞–π–¥–µ–Ω" if license_found else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        )
        subtask_results["checks"].append({
            "check": "license",
            "exists": license_found,
            "status": "PASS" if license_found else "FAIL"
        })
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
        all_passed = all(check.get("status") == "PASS" for check in subtask_results["checks"])
        subtask_results["status"] = "COMPLETED" if all_passed else "IN_PROGRESS"
        
        return subtask_results

    def _test_subtask_1_1_4(self):
        """–ü–æ–¥–∑–∞–¥–∞—á–∞ 1.1.4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ –≤ .github/workflows/"""
        subtask_results = {
            "name": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD",
            "status": "IN_PROGRESS",
            "checks": []
        }
        
        workflows_dir = self.base_dir / ".github" / "workflows"
        
        if workflows_dir.exists():
            workflow_files = list(workflows_dir.glob("*.yml")) + list(workflows_dir.glob("*.yaml"))
            
            if workflow_files:
                for workflow_file in workflow_files:
                    check_result = self.print_result(
                        f"Workflow —Ñ–∞–π–ª: {workflow_file.name}",
                        True,
                        f"–ù–∞–π–¥–µ–Ω"
                    )
                    subtask_results["checks"].append({
                        "workflow": workflow_file.name,
                        "exists": True,
                        "status": "PASS"
                    })
            else:
                self.print_result("Workflow —Ñ–∞–π–ª—ã", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ .github/workflows/")
                subtask_results["checks"].append({
                    "check": "workflow_files",
                    "exists": False,
                    "status": "FAIL"
                })
        else:
            self.print_result("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è .github/workflows", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            subtask_results["checks"].append({
                "check": "workflows_dir",
                "exists": False,
                "status": "FAIL"
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö workflow
        expected_workflows = ["ci-cd.yml", "deploy.yml"]
        for workflow in expected_workflows:
            workflow_path = workflows_dir / workflow
            exists = workflow_path.exists()
            check_result = self.print_result(
                f"–û–∂–∏–¥–∞–µ–º—ã–π workflow: {workflow}",
                exists,
                "–ù–∞–π–¥–µ–Ω" if exists else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            )
            subtask_results["checks"].append({
                "expected_workflow": workflow,
                "exists": exists,
                "status": "PASS" if exists else "FAIL"
            })
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
        all_passed = all(check.get("status") == "PASS" for check in subtask_results["checks"])
        subtask_results["status"] = "COMPLETED" if all_passed else "IN_PROGRESS"
        
        return subtask_results

    def _test_task_1_2(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ó–∞–¥–∞—á–∏ 1.2: –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
        self.print_section("–ó–ê–î–ê–ß–ê 1.2: –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
        
        task_results = {
            "name": "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
            "status": "IN_PROGRESS",
            "subtasks": {},
            "completion_percentage": 0
        }
        
        # –ü–æ–¥–∑–∞–¥–∞—á–∞ 1.2.1: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints
        subtask_1_2_1 = self._test_subtask_1_2_1()
        task_results["subtasks"]["1.2.1"] = subtask_1_2_1
        
        # –ü–æ–¥–∑–∞–¥–∞—á–∞ 1.2.2: –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        subtask_1_2_2 = self._test_subtask_1_2_2()
        task_results["subtasks"]["1.2.2"] = subtask_1_2_2
        
        # –ü–æ–¥–∑–∞–¥–∞—á–∞ 1.2.3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        subtask_1_2_3 = self._test_subtask_1_2_3()
        task_results["subtasks"]["1.2.3"] = subtask_1_2_3
        
        # –ü–æ–¥–∑–∞–¥–∞—á–∞ 1.2.4: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –¥–ª—è –º–æ–¥—É–ª–µ–π
        subtask_1_2_4 = self._test_subtask_1_2_4()
        task_results["subtasks"]["1.2.4"] = subtask_1_2_4
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞—á–∏
        completed_subtasks = sum(1 for subtask in task_results["subtasks"].values() if subtask["status"] == "COMPLETED")
        total_subtasks = len(task_results["subtasks"])
        task_results["completion_percentage"] = (completed_subtasks / total_subtasks) * 100
        
        if task_results["completion_percentage"] == 100:
            task_results["status"] = "COMPLETED"
        elif task_results["completion_percentage"] > 0:
            task_results["status"] = "IN_PROGRESS"
        else:
            task_results["status"] = "NOT_STARTED"
        
        return task_results

    def _test_subtask_1_2_1(self):
        """–ü–æ–¥–∑–∞–¥–∞—á–∞ 1.2.1: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        subtask_results = {
            "name": "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints",
            "status": "IN_PROGRESS",
            "checks": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ API
        api_files = [
            "api/__init__.py", "api/app.py", "api/routes.py", 
            "api/models.py", "api/dependencies.py", "api/middleware.py"
        ]
        
        for api_file in api_files:
            file_path = self.base_dir / api_file
            exists = file_path.exists()
            check_result = self.print_result(
                f"API —Ñ–∞–π–ª: {api_file}",
                exists,
                "–ù–∞–π–¥–µ–Ω" if exists else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            )
            subtask_results["checks"].append({
                "file": api_file,
                "exists": exists,
                "status": "PASS" if exists else "FAIL"
            })
        
        # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ù–∞–¥–µ–∂–Ω—ã–π regex-–∞–Ω–∞–ª–∏–∑ routes.py
        routes_file = self.base_dir / "api" / "routes.py"
        if routes_file.exists():
            try:
                content = routes_file.read_text()
                
                expected_endpoints = [
                    "/chat", "/state", "/health", "/mood/update",
                    "/memory/store", "/memory/recall", "/personality/update", 
                    "/modules", "/", "/system/info"
                ]
                
                endpoints_found = self._analyze_routes_with_regex(content, expected_endpoints)
                subtask_results["checks"].extend(endpoints_found)
                
            except Exception as e:
                self.print_result("–ê–Ω–∞–ª–∏–∑ routes.py", False, f"–û—à–∏–±–∫–∞: {e}")
                subtask_results["checks"].append({
                    "check": "routes_analysis",
                    "status": "FAIL",
                    "error": str(e)
                })
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
        endpoint_checks = [check for check in subtask_results["checks"] if "endpoint" in check]
        if endpoint_checks:
            implemented_count = sum(1 for check in endpoint_checks if check["implemented"])
            total_endpoints = len(endpoint_checks)
            
            self.print_result(
                "–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤",
                implemented_count == total_endpoints,
                f"–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: {implemented_count}/{total_endpoints}"
            )
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞
        if self._test_api_endpoints_functionality():
            check_result = self.print_result(
                "API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç",
                True,
                "–û—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –æ—Ç–≤–µ—á–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
            )
            subtask_results["checks"].append({
                "check": "api_functionality",
                "status": "PASS"
            })
        else:
            check_result = self.print_result(
                "API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç",
                False,
                "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞"
            )
            subtask_results["checks"].append({
                "check": "api_functionality", 
                "status": "FAIL"
            })
        
        all_passed = all(check.get("status") == "PASS" for check in subtask_results["checks"])
        subtask_results["status"] = "COMPLETED" if all_passed else "IN_PROGRESS"
        
        return subtask_results

    def _analyze_routes_with_regex(self, content: str, expected_endpoints: List[str]) -> List[Dict]:
        """–ù–∞–¥–µ–∂–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ regex - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        endpoints_found = []
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞
        clean_content = '\n'.join([line.split('#')[0] for line in content.split('\n')])
        
        for endpoint in expected_endpoints:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è regex
            escaped_endpoint = re.escape(endpoint)
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
            patterns = [
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: @router.method("/endpoint")
                f'@router\\.(get|post|put|delete|patch)\\(["\\\']{escaped_endpoint}["\\\']',
                # –§–æ—Ä–º–∞—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏: @router.method( "/endpoint" )
                f'@router\\.(get|post|put|delete|patch)\\(\\s*["\\\']{escaped_endpoint}["\\\']',
                # –§–æ—Ä–º–∞—Ç —Å response_model –∏ –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                f'@router\\.(get|post|put|delete|patch)\\(["\\\']{escaped_endpoint}["\\\'][^)]*response_model',
                # –§–æ—Ä–º–∞—Ç —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫
                f'@router\\.(get|post|put|delete|patch)\\(["\\\']{escaped_endpoint}["\\\'][^)]*\\)',
                # –§–æ—Ä–º–∞—Ç —Å @app –≤–º–µ—Å—Ç–æ @router
                f'@app\\.(get|post|put|delete|patch)\\(["\\\']{escaped_endpoint}["\\\']',
            ]
            
            found = False
            method = "UNKNOWN"
            
            for pattern in patterns:
                match = re.search(pattern, clean_content, re.IGNORECASE | re.MULTILINE)
                if match:
                    found = True
                    method = match.group(1).upper()
                    break
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
            if not found and endpoint == "/":
                root_patterns = [
                    '@router\\.get\\(["\\\']/["\\\']\\)',
                    '@router\\.get\\(["\\\']/["\\\'][^)]*response_model',
                    '@app\\.get\\(["\\\']/["\\\']\\)',
                    '@app\\.get\\(["\\\']/["\\\'][^)]*response_model',
                ]
                for pattern in root_patterns:
                    if re.search(pattern, clean_content, re.IGNORECASE | re.MULTILINE):
                        found = True
                        method = "GET"
                        break
            
            status_icon = "‚úÖ" if found else "‚ùå"
            status_text = "–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω" if found else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            method_text = f" ({method})" if found else ""
            
            print(f"{status_icon} API —ç–Ω–¥–ø–æ–∏–Ω—Ç: {endpoint}{method_text} - {status_text}")
            
            endpoints_found.append({
                "endpoint": endpoint,
                "implemented": found,
                "method": method if found else "NONE",
                "status": "PASS" if found else "FAIL"
            })
        
        return endpoints_found

    def _start_test_server(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –≤ sys.path –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
            sys.path.insert(0, str(self.base_dir))
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from api.app import app
            import uvicorn
            
            def run_server():
                uvicorn.run(app, host="127.0.0.1", port=8001, log_level="error")
            
            self.server_thread = threading.Thread(target=run_server, daemon=True)
            self.server_thread.start()
            time.sleep(3)  # –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False

    def _test_api_endpoints_functionality(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å–µ—Ä–≤–µ—Ä—É
            if self._is_server_running():
                test_port = 8000
                base_url = "http://localhost:8000"
                self.print_result("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä", True, "–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 8000")
            else:
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–∞ –¥—Ä—É–≥–æ–º –ø–æ—Ä—Ç—É
                self.print_result("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞", True, "–ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8001")
                if not self._start_test_server():
                    self.print_result(
                        "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞",
                        False,
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                    )
                    return False
                test_port = 8001
                base_url = "http://localhost:8001"
            
            # –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            time.sleep(2)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å –±–æ–ª–µ–µ –≥–∏–±–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            test_cases = [
                ("/", "GET", [200]),  # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                ("/health", "GET", [200]),  # Health check
                ("/test-imports", "GET", [200]),  # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
                ("/docs", "GET", [200, 301, 302]),  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç)
                ("/state", "GET", [200, 404, 500]),  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é
                ("/system/info", "GET", [200, 404, 500]),  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é
                ("/modules", "GET", [200, 404, 500])  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é
            ]
            
            success_count = 0
            for endpoint, method, expected_codes in test_cases:
                if self._test_single_endpoint(endpoint, method, expected_codes, base_url):
                    success_count += 1
                else:
                    self.print_result(
                        f"–≠–Ω–¥–ø–æ–∏–Ω—Ç {endpoint} –æ—Ç–≤–µ—á–∞–µ—Ç",
                        False,
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç {endpoint} (–æ–∂–∏–¥–∞–ª–∏—Å—å –∫–æ–¥—ã: {expected_codes})"
                    )
            
            total_tests = len(test_cases)
            success_rate = (success_count / total_tests) * 100
            
            self.print_result(
                "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å API",
                success_count >= 4,  # –¢—Ä–µ–±—É–µ–º —Ö–æ—Ç—è –±—ã 4 –∏–∑ 7 —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
                f"–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {success_count}/{total_tests} ({success_rate:.1f}%)"
            )
            
            return success_count >= 4
            
        except Exception as e:
            self.print_result("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API", False, f"–û—à–∏–±–∫–∞: {e}")
            return False

    def _is_server_running(self, port=8000):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(2)
                return s.connect_ex(('localhost', port)) == 0
        except:
            return False

    def _test_single_endpoint(self, endpoint: str, method: str, expected_codes: list, base_url: str = "http://localhost:8000") -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Å –≥–∏–±–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–¥–æ–≤ –æ—Ç–≤–µ—Ç–∞"""
        try:
            url = f"{base_url}{endpoint}"
            req = urllib.request.Request(url, method=method)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
            with urllib.request.urlopen(req, timeout=15) as response:
                return response.getcode() in expected_codes
                
        except urllib.error.HTTPError as e:
            # HTTP –æ—à–∏–±–∫–∏ (404, 500 –∏ —Ç.–¥.) –º–æ–≥—É—Ç –±—ã—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–º–∏
            return e.code in expected_codes
        except urllib.error.URLError as e:
            # –û—à–∏–±–∫–∏ URL (—Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω)
            return False
        except Exception as e:
            # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            return False

    def _test_subtask_1_2_2(self):
        """–ü–æ–¥–∑–∞–¥–∞—á–∞ 1.2.2: –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        subtask_results = {
            "name": "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã –ë–î",
            "status": "IN_PROGRESS",
            "checks": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_files = [
            "database/__init__.py", "database/models.py", 
            "database/crud.py", "database/session.py"
        ]
        
        for db_file in db_files:
            file_path = self.base_dir / db_file
            exists = file_path.exists()
            check_result = self.print_result(
                f"–§–∞–π–ª –ë–î: {db_file}",
                exists,
                "–ù–∞–π–¥–µ–Ω" if exists else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            )
            subtask_results["checks"].append({
                "file": db_file,
                "exists": exists,
                "status": "PASS" if exists else "FAIL"
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π –≤ models.py
        models_file = self.base_dir / "database" / "models.py"
        if models_file.exists():
            try:
                content = models_file.read_text()
                expected_models = [
                    "SystemState", "Memory", "Interaction", "MoodHistory",
                    "PersonalityTrait", "CharacterHabit", "LearningExperience", "SystemLog"
                ]
                
                models_found = []
                for model in expected_models:
                    found = f"class {model}" in content
                    check_result = self.print_result(
                        f"–ú–æ–¥–µ–ª—å –ë–î: {model}",
                        found,
                        "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞" if found else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    )
                    models_found.append({
                        "model": model,
                        "implemented": found,
                        "status": "PASS" if found else "FAIL"
                    })
                
                subtask_results["checks"].extend(models_found)
                
            except Exception as e:
                self.print_result("–ê–Ω–∞–ª–∏–∑ models.py", False, f"–û—à–∏–±–∫–∞: {e}")
                subtask_results["checks"].append({
                    "check": "analyze_models",
                    "status": "FAIL",
                    "error": str(e)
                })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π
        migrations_dir = self.base_dir / "database" / "migrations"
        if migrations_dir.exists():
            check_result = self.print_result(
                "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–∏–≥—Ä–∞—Ü–∏–π",
                True,
                "–ù–∞–π–¥–µ–Ω–∞"
            )
            subtask_results["checks"].append({
                "check": "migrations_dir",
                "exists": True,
                "status": "PASS"
            })
        else:
            check_result = self.print_result(
                "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–∏–≥—Ä–∞—Ü–∏–π",
                False,
                "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            )
            subtask_results["checks"].append({
                "check": "migrations_dir",
                "exists": False,
                "status": "FAIL"
            })
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
        all_passed = all(check.get("status") == "PASS" for check in subtask_results["checks"])
        subtask_results["status"] = "COMPLETED" if all_passed else "IN_PROGRESS"
        
        return subtask_results

    def _test_subtask_1_2_3(self):
        """–ü–æ–¥–∑–∞–¥–∞—á–∞ 1.2.3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        subtask_results = {
            "name": "–§–æ—Ä–º–∞—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤",
            "status": "IN_PROGRESS",
            "checks": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        config_files = [
            "data/configs/system_config.json",
            "data/configs/psyche_config.json",
            "data/configs/memory_config.json", 
            "data/configs/mood_config.json"
        ]
        
        for config_file in config_files:
            file_path = self.base_dir / config_file
            exists = file_path.exists()
            
            if exists:
                try:
                    with open(file_path, 'r') as f:
                        json.load(f)
                    check_result = self.print_result(
                        f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: {config_file}",
                        True,
                        "–í–∞–ª–∏–¥–Ω—ã–π JSON"
                    )
                    subtask_results["checks"].append({
                        "file": config_file,
                        "exists": True,
                        "valid_json": True,
                        "status": "PASS"
                    })
                except json.JSONDecodeError as e:
                    check_result = self.print_result(
                        f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: {config_file}",
                        False,
                        f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {e}"
                    )
                    subtask_results["checks"].append({
                        "file": config_file,
                        "exists": True,
                        "valid_json": False,
                        "status": "FAIL",
                        "error": str(e)
                    })
            else:
                check_result = self.print_result(
                    f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: {config_file}",
                    False,
                    "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                )
                subtask_results["checks"].append({
                    "file": config_file,
                    "exists": False,
                    "status": "FAIL"
                })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ core/config.py
        config_py = self.base_dir / "core" / "config.py"
        if config_py.exists():
            try:
                content = config_py.read_text()
                has_settings = "class Settings" in content or "pydantic" in content.lower()
                has_config_manager = "class ConfigManager" in content or "config_manager" in content
                
                check_result = self.print_result(
                    "–§–∞–π–ª core/config.py",
                    has_settings and has_config_manager,
                    "–°–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π" if has_settings and has_config_manager else "–ù–µ–ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è"
                )
                subtask_results["checks"].append({
                    "file": "core/config.py",
                    "exists": True,
                    "has_settings": has_settings,
                    "has_config_manager": has_config_manager,
                    "status": "PASS" if has_settings and has_config_manager else "FAIL"
                })
            except Exception as e:
                self.print_result("–ê–Ω–∞–ª–∏–∑ core/config.py", False, f"–û—à–∏–±–∫–∞: {e}")
                subtask_results["checks"].append({
                    "file": "core/config.py",
                    "exists": True,
                    "status": "FAIL",
                    "error": str(e)
                })
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
        all_passed = all(check.get("status") == "PASS" for check in subtask_results["checks"])
        subtask_results["status"] = "COMPLETED" if all_passed else "IN_PROGRESS"
        
        return subtask_results

    def _test_subtask_1_2_4(self):
        """–ü–æ–¥–∑–∞–¥–∞—á–∞ 1.2.4: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –¥–ª—è –º–æ–¥—É–ª–µ–π"""
        subtask_results = {
            "name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π",
            "status": "IN_PROGRESS",
            "checks": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        docs_files = [
            "docs/architecture.md",
            "docs/api/endpoints.md",
            "docs/deployment/render.md"
        ]
        
        for doc_file in docs_files:
            file_path = self.base_dir / doc_file
            exists = file_path.exists()
            check_result = self.print_result(
                f"–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {doc_file}",
                exists,
                "–ù–∞–π–¥–µ–Ω–∞" if exists else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            )
            subtask_results["checks"].append({
                "file": doc_file,
                "exists": exists,
                "status": "PASS" if exists else "FAIL"
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        modules_dirs = [
            "modules/psyche", "modules/senses", "modules/mood", "modules/memory",
            "modules/reactions", "modules/personality", "modules/character"
        ]
        
        for module_dir in modules_dirs:
            dir_path = self.base_dir / module_dir
            exists = dir_path.exists()
            check_result = self.print_result(
                f"–ú–æ–¥—É–ª—å: {module_dir}",
                exists,
                "–°–æ–∑–¥–∞–Ω" if exists else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            )
            subtask_results["checks"].append({
                "module": module_dir,
                "exists": exists,
                "status": "PASS" if exists else "FAIL"
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ core –º–æ–¥—É–ª–µ–π
        core_files = [
            "core/orchestrator.py", "core/state_manager.py", "core/exceptions.py"
        ]
        
        for core_file in core_files:
            file_path = self.base_dir / core_file
            exists = file_path.exists()
            check_result = self.print_result(
                f"Core –º–æ–¥—É–ª—å: {core_file}",
                exists,
                "–ù–∞–π–¥–µ–Ω" if exists else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            )
            subtask_results["checks"].append({
                "file": core_file,
                "exists": exists,
                "status": "PASS" if exists else "FAIL"
            })
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
        all_passed = all(check.get("status") == "PASS" for check in subtask_results["checks"])
        subtask_results["status"] = "COMPLETED" if all_passed else "IN_PROGRESS"
        
        return subtask_results

    def _test_task_1_3(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ó–∞–¥–∞—á–∏ 1.3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        self.print_section("–ó–ê–î–ê–ß–ê 1.3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        
        task_results = {
            "name": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
            "status": "IN_PROGRESS",
            "subtasks": {},
            "completion_percentage": 0
        }
        
        # –ü–æ–¥–∑–∞–¥–∞—á–∞ 1.3.1: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Render
        subtask_1_3_1 = self._test_subtask_1_3_1()
        task_results["subtasks"]["1.3.1"] = subtask_1_3_1
        
        # –ü–æ–¥–∑–∞–¥–∞—á–∞ 1.3.2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        subtask_1_3_2 = self._test_subtask_1_3_2()
        task_results["subtasks"]["1.3.2"] = subtask_1_3_2
        
        # –ü–æ–¥–∑–∞–¥–∞—á–∞ 1.3.3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –¥–µ–ø–ª–æ—è
        subtask_1_3_3 = self._test_subtask_1_3_3()
        task_results["subtasks"]["1.3.3"] = subtask_1_3_3
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞—á–∏
        completed_subtasks = sum(1 for subtask in task_results["subtasks"].values() if subtask["status"] == "COMPLETED")
        total_subtasks = len(task_results["subtasks"])
        task_results["completion_percentage"] = (completed_subtasks / total_subtasks) * 100
        
        if task_results["completion_percentage"] == 100:
            task_results["status"] = "COMPLETED"
        elif task_results["completion_percentage"] > 0:
            task_results["status"] = "IN_PROGRESS"
        else:
            task_results["status"] = "NOT_STARTED"
        
        return task_results

    def _test_subtask_1_3_1(self):
        """–ü–æ–¥–∑–∞–¥–∞—á–∞ 1.3.1: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Render"""
        subtask_results = {
            "name": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Render",
            "status": "IN_PROGRESS",
            "checks": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ render.yaml
        render_file = self.base_dir / "render.yaml"
        if render_file.exists():
            try:
                content = render_file.read_text()
                has_postgresql = "postgresql" in content.lower()
                has_database_config = "database" in content.lower() or "DATABASE_URL" in content
                
                check_result = self.print_result(
                    "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î –≤ render.yaml",
                    has_postgresql and has_database_config,
                    "PostgreSQL –Ω–∞—Å—Ç—Ä–æ–µ–Ω" if has_postgresql and has_database_config else "–ù–µ–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î"
                )
                subtask_results["checks"].append({
                    "check": "render_db_config",
                    "has_postgresql": has_postgresql,
                    "has_database_config": has_database_config,
                    "status": "PASS" if has_postgresql and has_database_config else "FAIL"
                })
            except Exception as e:
                self.print_result("–ê–Ω–∞–ª–∏–∑ render.yaml", False, f"–û—à–∏–±–∫–∞: {e}")
                subtask_results["checks"].append({
                    "check": "analyze_render",
                    "status": "FAIL",
                    "error": str(e)
                })
        else:
            self.print_result("–§–∞–π–ª render.yaml", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            subtask_results["checks"].append({
                "check": "render_file",
                "exists": False,
                "status": "FAIL"
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ë–î
        env_example = self.base_dir / ".env.example"
        if env_example.exists():
            try:
                content = env_example.read_text()
                has_database_url = "DATABASE_URL" in content
                has_db_config = any(keyword in content for keyword in ["POSTGRES", "SQLITE", "DATABASE"])
                
                check_result = self.print_result(
                    "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î –≤ .env.example",
                    has_database_url and has_db_config,
                    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç" if has_database_url and has_db_config else "–ù–µ–ø–æ–ª–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î"
                )
                subtask_results["checks"].append({
                    "check": "env_db_config",
                    "has_database_url": has_database_url,
                    "has_db_config": has_db_config,
                    "status": "PASS" if has_database_url and has_db_config else "FAIL"
                })
            except Exception as e:
                self.print_result("–ê–Ω–∞–ª–∏–∑ .env.example", False, f"–û—à–∏–±–∫–∞: {e}")
                subtask_results["checks"].append({
                    "check": "analyze_env_example",
                    "status": "FAIL",
                    "error": str(e)
                })
        
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ë–î –Ω–∞ Render –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ
        self.print_result(
            "–°–æ–∑–¥–∞–Ω–∏–µ –ë–î –Ω–∞ Render",
            False,
            "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ –ø–∞–Ω–µ–ª–∏ Render",
            points=0
        )
        subtask_results["checks"].append({
            "check": "render_db_creation",
            "status": "MANUAL_REQUIRED",
            "details": "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ –ø–∞–Ω–µ–ª–∏ Render"
        })
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
        manual_checks = [check for check in subtask_results["checks"] if check.get("status") == "MANUAL_REQUIRED"]
        auto_checks = [check for check in subtask_results["checks"] if check.get("status") != "MANUAL_REQUIRED"]
        
        if manual_checks and all(check.get("status") == "PASS" for check in auto_checks):
            subtask_results["status"] = "MANUAL_ACTION_REQUIRED"
        elif all(check.get("status") == "PASS" for check in subtask_results["checks"]):
            subtask_results["status"] = "COMPLETED"
        else:
            subtask_results["status"] = "IN_PROGRESS"
        
        return subtask_results

    def _test_subtask_1_3_2(self):
        """–ü–æ–¥–∑–∞–¥–∞—á–∞ 1.3.2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        subtask_results = {
            "name": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è",
            "status": "IN_PROGRESS",
            "checks": []
        }
        
        # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: .env.example —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        env_example = self.base_dir / ".env.example"
        if env_example.exists():
            try:
                content = env_example.read_text()
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                lines = [line.strip() for line in content.split('\n') 
                        if line.strip() and not line.strip().startswith('#')]
                
                critical_vars = ["DATABASE_URL", "API_HOST", "API_PORT", "ENVIRONMENT", "DEBUG"]
                found_vars = [var for var in critical_vars if any(var in line for line in lines)]
                
                check_result = self.print_result(
                    "–§–∞–π–ª .env.example",
                    len(found_vars) == len(critical_vars),
                    f"–ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(found_vars)}/{len(critical_vars)}"
                )
                subtask_results["checks"].append({
                    "check": "env_example",
                    "exists": True,
                    "variables_found": len(found_vars),
                    "variables_total": len(critical_vars),
                    "status": "PASS" if len(found_vars) == len(critical_vars) else "FAIL"
                })
            except Exception as e:
                self.print_result("–ê–Ω–∞–ª–∏–∑ .env.example", False, f"–û—à–∏–±–∫–∞: {e}")
                subtask_results["checks"].append({
                    "check": "analyze_env_example",
                    "status": "FAIL",
                    "error": str(e)
                })
        else:
            self.print_result("–§–∞–π–ª .env.example", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            subtask_results["checks"].append({
                "check": "env_example",
                "exists": False,
                "status": "FAIL"
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env (–ª–æ–∫–∞–ª—å–Ω—ã–π)
        env_file = self.base_dir / ".env"
        if env_file.exists():
            check_result = self.print_result(
                "–õ–æ–∫–∞–ª—å–Ω—ã–π .env —Ñ–∞–π–ª",
                True,
                "–ù–∞–π–¥–µ–Ω (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –≤ .gitignore)"
            )
            subtask_results["checks"].append({
                "check": "local_env",
                "exists": True,
                "status": "PASS"
            })
        else:
            check_result = self.print_result(
                "–õ–æ–∫–∞–ª—å–Ω—ã–π .env —Ñ–∞–π–ª",
                False,
                "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (—Å–æ–∑–¥–∞–π—Ç–µ –∏–∑ .env.example)"
            )
            subtask_results["checks"].append({
                "check": "local_env",
                "exists": False,
                "status": "FAIL"
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ core/config.py –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        config_file = self.base_dir / "core" / "config.py"
        if config_file.exists():
            try:
                content = config_file.read_text()
                uses_env_vars = "BaseSettings" in content or "env_file" in content or "os.getenv" in content
                
                check_result = self.print_result(
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ config.py",
                    uses_env_vars,
                    "–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ" if uses_env_vars else "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
                )
                subtask_results["checks"].append({
                    "check": "config_env_usage",
                    "uses_env_vars": uses_env_vars,
                    "status": "PASS" if uses_env_vars else "FAIL"
                })
            except Exception as e:
                self.print_result("–ê–Ω–∞–ª–∏–∑ core/config.py", False, f"–û—à–∏–±–∫–∞: {e}")
                subtask_results["checks"].append({
                    "check": "analyze_config",
                    "status": "FAIL",
                    "error": str(e)
                })
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
        all_passed = all(check.get("status") == "PASS" for check in subtask_results["checks"])
        subtask_results["status"] = "COMPLETED" if all_passed else "IN_PROGRESS"
        
        return subtask_results

    def _test_subtask_1_3_3(self):
        """–ü–æ–¥–∑–∞–¥–∞—á–∞ 1.3.3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –¥–µ–ø–ª–æ—è"""
        subtask_results = {
            "name": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –¥–µ–ø–ª–æ—è",
            "status": "IN_PROGRESS",
            "checks": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ render.yaml
        render_file = self.base_dir / "render.yaml"
        if render_file.exists():
            try:
                content = render_file.read_text()
                has_services = "services:" in content
                has_build_command = "buildCommand" in content
                has_start_command = "startCommand" in content
                
                check_result = self.print_result(
                    "–§–∞–π–ª render.yaml",
                    has_services and has_build_command and has_start_command,
                    "–ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è" if has_services and has_build_command and has_start_command else "–ù–µ–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
                )
                subtask_results["checks"].append({
                    "check": "render_yaml",
                    "exists": True,
                    "has_services": has_services,
                    "has_build_command": has_build_command,
                    "has_start_command": has_start_command,
                    "status": "PASS" if has_services and has_build_command and has_start_command else "FAIL"
                })
            except Exception as e:
                self.print_result("–ê–Ω–∞–ª–∏–∑ render.yaml", False, f"–û—à–∏–±–∫–∞: {e}")
                subtask_results["checks"].append({
                    "check": "analyze_render",
                    "status": "FAIL",
                    "error": str(e)
                })
        else:
            self.print_result("–§–∞–π–ª render.yaml", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            subtask_results["checks"].append({
                "check": "render_yaml",
                "exists": False,
                "status": "FAIL"
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Dockerfile
        dockerfile = self.base_dir / "Dockerfile"
        if dockerfile.exists():
            try:
                content = dockerfile.read_text()
                has_from = "FROM python" in content
                has_workdir = "WORKDIR" in content
                has_copy = "COPY" in content
                has_requirements = "requirements.txt" in content
                
                check_result = self.print_result(
                    "–§–∞–π–ª Dockerfile",
                    has_from and has_workdir and has_copy and has_requirements,
                    "–ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è" if all([has_from, has_workdir, has_copy, has_requirements]) else "–ù–µ–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
                )
                subtask_results["checks"].append({
                    "check": "dockerfile",
                    "exists": True,
                    "has_from": has_from,
                    "has_workdir": has_workdir,
                    "has_copy": has_copy,
                    "has_requirements": has_requirements,
                    "status": "PASS" if all([has_from, has_workdir, has_copy, has_requirements]) else "FAIL"
                })
            except Exception as e:
                self.print_result("–ê–Ω–∞–ª–∏–∑ Dockerfile", False, f"–û—à–∏–±–∫–∞: {e}")
                subtask_results["checks"].append({
                    "check": "analyze_dockerfile",
                    "status": "FAIL",
                    "error": str(e)
                })
        else:
            self.print_result("–§–∞–π–ª Dockerfile", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            subtask_results["checks"].append({
                "check": "dockerfile",
                "exists": False,
                "status": "FAIL"
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–µ–ø–ª–æ—è
        deploy_scripts = [
            "scripts/deploy_render.sh",
            "scripts/setup_render.py", 
            "scripts/validate_infrastructure.py"
        ]
        
        for script in deploy_scripts:
            script_path = self.base_dir / script
            exists = script_path.exists()
            check_result = self.print_result(
                f"–°–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è: {script}",
                exists,
                "–ù–∞–π–¥–µ–Ω" if exists else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            )
            subtask_results["checks"].append({
                "script": script,
                "exists": exists,
                "status": "PASS" if exists else "FAIL"
            })
        
        # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: runtime.txt - –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
        runtime_file = self.base_dir / "runtime.txt"
        if runtime_file.exists():
            try:
                content = runtime_file.read_text().strip()
                # –ì–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
                is_correct = "python-3" in content
                check_result = self.print_result(
                    "–§–∞–π–ª runtime.txt",
                    is_correct,
                    f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {content}" if is_correct else f"–û–∂–∏–¥–∞–µ—Ç—Å—è python-3.x.x, –Ω–∞–π–¥–µ–Ω–æ: {content}"
                )
                subtask_results["checks"].append({
                    "check": "runtime_txt",
                    "exists": True,
                    "content": content,
                    "status": "PASS" if is_correct else "FAIL"
                })
            except Exception as e:
                self.print_result("–ê–Ω–∞–ª–∏–∑ runtime.txt", False, f"–û—à–∏–±–∫–∞: {e}")
                subtask_results["checks"].append({
                    "check": "analyze_runtime",
                    "status": "FAIL",
                    "error": str(e)
                })
        else:
            self.print_result("–§–∞–π–ª runtime.txt", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            subtask_results["checks"].append({
                "check": "runtime_txt",
                "exists": False,
                "status": "FAIL"
            })
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
        all_passed = all(check.get("status") == "PASS" for check in subtask_results["checks"])
        subtask_results["status"] = "COMPLETED" if all_passed else "IN_PROGRESS"
        
        return subtask_results

    def generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.print_header("üéØ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ü–†–û–ï–ö–¢–£")
        
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ Stage 1
        stage_1 = self.test_results["stage_progress"].get("stage_1", {})
        tasks = stage_1.get("tasks", {})
        
        # –ê–Ω–∞–ª–∏–∑ API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        api_success_rate = self.test_results["score"]["success_rate"]
        
        # 1. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û API
        if api_success_rate < 100:
            recommendations.extend([
                "üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API:",
                "‚úÖ –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω",
                "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö –∫–æ–¥–æ–≤ –æ—Ç–≤–µ—Ç–∞ (200, 301, 404, 500)",
                "‚úÖ –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç 8001 –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤",
                "üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:",
                "   ‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π: http://localhost:8000/",
                "   ‚Ä¢ Health: http://localhost:8000/health", 
                "   ‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs",
                "   ‚Ä¢ –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤: http://localhost:8000/test-imports"
            ])
        else:
            recommendations.extend([
                "‚úÖ API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!",
                "üåê –í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
            ])
        
        # 2. –ê–ù–ê–õ–ò–ó –ó–ê–î–ê–ß–ò 1.3 - –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê
        task_1_3 = tasks.get("1.3", {})
        if task_1_3.get("status") != "COMPLETED":
            recommendations.extend(self._analyze_infrastructure_issues(task_1_3))
        
        # 3. –ê–ù–ê–õ–ò–ó –ó–ê–î–ê–ß–ò 1.2 - –ê–†–•–ò–¢–ï–ö–¢–£–†–ê  
        task_1_2 = tasks.get("1.2", {})
        if task_1_2.get("status") != "COMPLETED":
            recommendations.extend(self._analyze_architecture_issues(task_1_2))
        
        # 4. –ê–ù–ê–õ–ò–ó –ó–ê–î–ê–ß–ò 1.1 - –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
        task_1_1 = tasks.get("1.1", {})
        if task_1_1.get("status") != "COMPLETED":
            recommendations.extend(self._analyze_initialization_issues(task_1_1))
        
        # 5. –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
        recommendations.extend(self._generate_general_recommendations())
        
        # 6. –°–¢–ê–¢–£–° –ü–†–û–ì–†–ï–°–°–ê
        recommendations.extend(self._generate_progress_recommendations(stage_1))
        
        self.test_results["recommendations"] = recommendations
        
        # –í—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å
        for i, recommendation in enumerate(recommendations, 1):
            print(f"{i}. {recommendation}")
        
        return recommendations

    def _analyze_infrastructure_issues(self, task_1_3):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        issues = ["‚öôÔ∏è –ó–ê–î–ê–ß–ê 1.3 - –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê:"]
        
        subtasks = task_1_3.get("subtasks", {})
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–∑–∞–¥–∞—á–∏ 1.3.1 - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        subtask_1_3_1 = subtasks.get("1.3.1", {})
        if subtask_1_3_1.get("status") == "MANUAL_ACTION_REQUIRED":
            issues.extend([
                "üóÑÔ∏è –°–†–û–ß–ù–û: –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL –≤ –ø–∞–Ω–µ–ª–∏ Render",
                "   üîß –î–µ–π—Å—Ç–≤–∏–µ: –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Render ‚Üí New ‚Üí PostgreSQL",
                "   üîß –ù–∞–∑–æ–≤–∏—Ç–µ –ë–î: anthropomorphic-ai-db", 
                "   üîß –°–∫–æ–ø–∏—Ä—É–π—Ç–µ DATABASE_URL –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ë–î",
                "   üîß –î–æ–±–∞–≤—å—Ç–µ DATABASE_URL –≤ Environment Variables –Ω–∞ Render"
            ])
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–∑–∞–¥–∞—á–∏ 1.3.2 - –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        subtask_1_3_2 = subtasks.get("1.3.2", {})
        if subtask_1_3_2.get("status") != "COMPLETED":
            issues.append("üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–∑–∞–¥–∞—á–∏ 1.3.3 - –®–∞–±–ª–æ–Ω—ã –¥–µ–ø–ª–æ—è
        subtask_1_3_3 = subtasks.get("1.3.3", {})
        if subtask_1_3_3.get("status") != "COMPLETED":
            issues.append("üöÄ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —à–∞–±–ª–æ–Ω—ã –¥–µ–ø–ª–æ—è (render.yaml, Dockerfile)")
        
        return issues

    def _analyze_architecture_issues(self, task_1_2):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
        issues = ["üèóÔ∏è –ó–ê–î–ê–ß–ê 1.2 - –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:"]
        
        subtasks = task_1_2.get("subtasks", {})
        
        # –ê–Ω–∞–ª–∏–∑ API endpoints
        subtask_1_2_1 = subtasks.get("1.2.1", {})
        if subtask_1_2_1.get("status") != "COMPLETED":
            checks = subtask_1_2_1.get("checks", [])
            missing_endpoints = []
            for check in checks:
                if check.get("endpoint") and not check.get("implemented"):
                    missing_endpoints.append(check["endpoint"])
            
            if missing_endpoints:
                issues.append(f"üîó –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: {', '.join(missing_endpoints)}")
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ö–µ–º—ã –ë–î
        subtask_1_2_2 = subtasks.get("1.2.2", {})
        if subtask_1_2_2.get("status") != "COMPLETED":
            issues.append("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ database/models.py")
        
        return issues

    def _analyze_initialization_issues(self, task_1_1):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        issues = ["üìÅ –ó–ê–î–ê–ß–ê 1.1 - –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø:"]
        
        subtasks = task_1_1.get("subtasks", {})
        
        # –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        subtask_1_1_2 = subtasks.get("1.1.2", {})
        if subtask_1_1_2.get("status") != "COMPLETED":
            issues.extend(self._analyze_dependencies_issues(subtask_1_1_2))
        
        # –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        subtask_1_1_3 = subtasks.get("1.1.3", {})
        if subtask_1_1_3.get("status") != "COMPLETED":
            issues.append("üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é (README.md, .gitignore, LICENSE)")
        
        # –ê–Ω–∞–ª–∏–∑ CI/CD
        subtask_1_1_4 = subtasks.get("1.1.4", {})
        if subtask_1_1_4.get("status") != "COMPLETED":
            issues.append("‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É CI/CD –≤ .github/workflows/")
        
        return issues

    def _analyze_dependencies_issues(self, subtask_1_1_2):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"""
        issues = []
        
        checks = subtask_1_1_2.get("checks", [])
        missing_packages = []
        compatibility_issues = False
        
        for check in checks:
            if check.get("package") and not check.get("found"):
                missing_packages.append(check["package"])
            if check.get("check") == "python_compatibility" and check.get("status") != "PASS":
                compatibility_issues = True
        
        if missing_packages:
            issues.append(f"üì¶ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        
        if compatibility_issues:
            issues.extend([
                "üêç –ü–†–û–ë–õ–ï–ú–´ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò PYTHON:",
                "   1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª requirements-compatible.txt —Å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏:",
                "      fastapi==0.104.1",
                "      uvicorn==0.24.0", 
                "      sqlalchemy==2.0.23",
                "      pydantic==2.5.0",
                "      pydantic-settings==2.1.0",
                "   2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É: pip install -r requirements-compatible.txt",
                "   3. –û–±–Ω–æ–≤–∏—Ç–µ runtime.txt: python-3.13.4",
                "   4. –í render.yaml —É–∫–∞–∂–∏—Ç–µ: python -m pip install -r requirements-compatible.txt"
            ])
        
        return issues

    def _generate_general_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        general = ["üîß –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:"]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ requirements-compatible.txt
        compatible_req_file = self.base_dir / "requirements-compatible.txt"
        if not compatible_req_file.exists():
            general.append("üìã –°–æ–∑–¥–∞–π—Ç–µ requirements-compatible.txt –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –≤–µ—Ä—Å–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ runtime.txt
        runtime_file = self.base_dir / "runtime.txt"
        if runtime_file.exists():
            try:
                content = runtime_file.read_text().strip()
                if "python-3.13.4" not in content:
                    general.append("üêç –û–±–Ω–æ–≤–∏—Ç–µ runtime.txt –¥–æ python-3.13.4")
            except:
                general.append("üêç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ runtime.txt")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–æ–¥—É–ª—è–º
        general.extend([
            "üîÑ –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å core/orchestrator.py",
            "üõ°Ô∏è –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π", 
            "üíæ –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è /memory/store –∏ /memory/recall",
            "üóÑÔ∏è –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ —Å database/models.py –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è"
        ])
        
        return general

    def _generate_progress_recommendations(self, stage_1):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É"""
        progress = ["üìä –°–¢–ê–¢–£–° –ü–†–û–ì–†–ï–°–°–ê:"]
        
        stage_status = stage_1.get("status", "UNKNOWN")
        completion = stage_1.get("completion_percentage", 0)
        
        if stage_status == "COMPLETED":
            progress.extend([
                "üéâ –≠–¢–ê–ü 1 –ó–ê–í–ï–†–®–ï–ù!",
                "üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –≠–¢–ê–ü–£ 2: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
                "   üìÖ –ü–ª–∞–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 2-3 –Ω–µ–¥–µ–ª–∏:",
                "   ‚Ä¢ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è core –º–æ–¥—É–ª–µ–π", 
                "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API —Å–ª–æ—è",
                "   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π"
            ])
        elif completion >= 80:
            progress.extend([
                "üîú –≠–¢–ê–ü 1 –ü–û–ß–¢–ò –ó–ê–í–ï–†–®–ï–ù!",
                f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {completion}%",
                "üéØ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á"
            ])
        elif completion >= 50:
            progress.extend([
                "üîÑ –≠–¢–ê–ü 1 –í –ê–ö–¢–ò–í–ù–û–ô –†–ê–ó–†–ê–ë–û–¢–ö–ï",
                f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {completion}%", 
                "‚ö° –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É –ø–æ –∑–∞–¥–∞—á–∞–º"
            ])
        else:
            progress.extend([
                "üõ†Ô∏è –≠–¢–ê–ü 1 –í –ù–ê–ß–ê–õ–¨–ù–û–ô –°–¢–ê–î–ò–ò",
                f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {completion}%",
                "üéØ –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö"
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É
        if stage_status != "COMPLETED":
            if completion >= 90:
                progress.append("‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: 1-2 —á–∞—Å–∞")
            elif completion >= 70:
                progress.append("‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: 2-4 —á–∞—Å–∞") 
            elif completion >= 50:
                progress.append("‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: 4-8 —á–∞—Å–æ–≤")
            else:
                progress.append("‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: 1-2 –¥–Ω—è")
        
        return progress

    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        self.print_header("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ü–†–û–ï–ö–¢–ê ANTHROPOMORPHIC AI - –í–ï–†–°–ò–Ø 9.0 –° –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ú–ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø–ú–ò")
        print(f"üìÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {self.test_results['timestamp']}")
        print(f"üêç –í–µ—Ä—Å–∏—è Python: {sys.version.split()[0]}")
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {self.base_dir}")
        
        # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
        self.scan_project_structure()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Stage 1
        stage_1_results = self.test_stage_1_preparatory()
        
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        total_tests = self.test_results["score"]["total_tests"]
        passed_tests = self.test_results["score"]["passed_tests"]
        
        if total_tests > 0:
            success_rate = (passed_tests / total_tests) * 100
        else:
            success_rate = 0
        
        self.test_results["score"]["success_rate"] = round(success_rate, 2)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        self.generate_recommendations()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.print_header("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
        
        print(f"üèÅ –û–ë–©–ò–ô –°–¢–ê–¢–£–°: {self.test_results['overall_status']}")
        print(f"üéØ –¢–ï–ö–£–©–ò–ô –≠–¢–ê–ü: {self.test_results['current_stage']}")
        print(f"üìà –ü–†–û–ì–†–ï–°–°: {self.test_results['score']['success_rate']}%")
        print(f"‚úÖ –í–´–ü–û–õ–ù–ï–ù–û –¢–ï–°–¢–û–í: {self.test_results['score']['passed_tests']}/{self.test_results['score']['total_tests']}")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ Stage 1
        stage_1 = self.test_results["stage_progress"]["stage_1"]
        print(f"\nüéØ –≠–¢–ê–ü 1 - –ü–û–î–ì–û–¢–û–í–ò–¢–ï–õ–¨–ù–´–ô: {stage_1['status']}")
        print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {stage_1['completion_percentage']}%")
        
        for task_name, task in stage_1["tasks"].items():
            print(f"   üìã {task_name}: {task['name']} - {task['status']} ({task['completion_percentage']}%)")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        report_file = self.base_dir / "comprehensive_project_report_fixed.json"
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(self.test_results, f, indent=2, ensure_ascii=False, default=str)
            print(f"\nüíæ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        if stage_1["status"] == "COMPLETED":
            self.test_results["overall_status"] = "STAGE_1_COMPLETED"
            print("\nüéâ –ü–û–ó–î–†–ê–í–õ–Ø–Æ! –≠–¢–ê–ü 1 –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        else:
            self.test_results["overall_status"] = "IN_PROGRESS"
            print("\nüîß –ü–†–û–ï–ö–¢ –í –†–ê–ó–†–ê–ë–û–¢–ö–ï. –í–´–ü–û–õ–ù–Ø–ô–¢–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ó–ê–í–ï–†–®–ï–ù–ò–Ø –≠–¢–ê–ü–ê 1.")
        
        return self.test_results["overall_status"] == "STAGE_1_COMPLETED"

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –í–ï–†–°–ò–ò 9.0 –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê –° –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ú–ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø–ú–ò")
    
    try:
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    except KeyboardInterrupt:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    
    tester = ComprehensiveProjectTest()
    success = tester.run_comprehensive_test()
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()