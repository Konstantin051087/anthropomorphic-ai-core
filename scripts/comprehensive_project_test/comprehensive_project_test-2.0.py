#!/usr/bin/env python3
"""
–†–ê–°–®–ò–†–ï–ù–ù–´–ô –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ü–†–û–ï–ö–¢–ê ANTHROPOMORPHIC AI
–° –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import os
import sys
import json
import logging
import importlib
import inspect
import ast
import traceback
import asyncio
from pathlib import Path
from typing import Dict, List, Tuple, Any, Set
import urllib.request
import urllib.error
import time
import socket
import subprocess
import tempfile
import contextlib

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

class AdvancedComprehensiveProjectTest:
    def __init__(self):
        self.base_dir = Path(__file__).parent.parent
        self.test_results = {
            "project": "Anthropomorphic AI Core",
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "python_version": sys.version,
            "overall_status": "IN_PROGRESS",
            "current_stage": "1.3 - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
            "stage_progress": {},
            "code_quality_analysis": {},
            "performance_metrics": {},
            "security_checks": {},
            "dependency_analysis": {},
            "project_structure": {},
            "detailed_analysis": {},
            "recommendations": [],
            "score": {
                "total_tests": 0,
                "passed_tests": 0,
                "success_rate": 0
            }
        }
        self.import_errors = []
        self.runtime_errors = []
        self.code_issues = []

    # ========== –†–ê–°–®–ò–†–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ==========

    def test_code_execution(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        self.print_header("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ö–û–î–ê")

        execution_tests = {
            "config_initialization": self._test_config_initialization,
            "database_models": self._test_database_models,
            "api_structure": self._test_api_structure,
            "core_modules": self._test_core_modules,
            "import_integrity": self._test_import_integrity
        }

        for test_name, test_func in execution_tests.items():
            try:
                success, details = test_func()
                self.print_result(
                    f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞: {test_name}",
                    success,
                    details
                )
            except Exception as e:
                self.print_result(
                    f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞: {test_name}",
                    False,
                    f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
                )
                self.runtime_errors.append(f"{test_name}: {str(e)}")

    def _test_config_initialization(self) -> Tuple[bool, str]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            sys.path.insert(0, str(self.base_dir))
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ core/config.py
            config_spec = importlib.util.spec_from_file_location(
                "config", 
                self.base_dir / "core" / "config.py"
            )
            config_module = importlib.util.module_from_spec(config_spec)
            config_spec.loader.exec_module(config_module)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª–∞—Å—Å–æ–≤
            required_classes = ['Settings', 'ConfigManager', 'get_settings']
            available_classes = [name for name in dir(config_module) 
                               if not name.startswith('_')]
            
            missing_classes = [cls for cls in required_classes 
                             if cls not in available_classes]
            
            if missing_classes:
                return False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª–∞—Å—Å—ã: {missing_classes}"
                
            return True, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
            
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}"

    def _test_database_models(self) -> Tuple[bool, str]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π –ë–î
            models_spec = importlib.util.spec_from_file_location(
                "models",
                self.base_dir / "database" / "models.py"
            )
            models_module = importlib.util.module_from_spec(models_spec)
            models_spec.loader.exec_module(models_module)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            expected_models = [
                'SystemState', 'Memory', 'Interaction', 'MoodHistory',
                'PersonalityTrait', 'CharacterHabit', 'LearningExperience', 'SystemLog'
            ]
            
            available_models = [name for name in dir(models_module) 
                              if not name.startswith('_') and 
                              inspect.isclass(getattr(models_module, name))]
            
            missing_models = [model for model in expected_models 
                            if model not in available_models]
            
            if missing_models:
                return False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥–µ–ª–∏: {missing_models}"
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            model_checks = []
            for model_name in expected_models:
                if model_name in available_models:
                    model_class = getattr(models_module, model_name)
                    if hasattr(model_class, '__tablename__'):
                        model_checks.append(f"{model_name}: OK")
                    else:
                        model_checks.append(f"{model_name}: No tablename")
            
            return True, f"–ú–æ–¥–µ–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã: {', '.join(model_checks)}"
            
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–µ–π –ë–î: {str(e)}"

    def _test_api_structure(self) -> Tuple[bool, str]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è API
            app_spec = importlib.util.spec_from_file_location(
                "app",
                self.base_dir / "api" / "app.py"
            )
            app_module = importlib.util.module_from_spec(app_spec)
            app_spec.loader.exec_module(app_module)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
            if hasattr(app_module, 'app'):
                app = getattr(app_module, 'app')
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ FastAPI
                if hasattr(app, 'routes') and hasattr(app, 'openapi'):
                    return True, "FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"
                else:
                    return False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
            else:
                return False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—ä–µ–∫—Ç app –≤ api/app.py"
                
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ API —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {str(e)}"

    def _test_core_modules(self) -> Tuple[bool, str]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π core"""
        try:
            core_modules = ['orchestrator', 'main', 'config']
            results = []
            
            for module_name in core_modules:
                module_path = self.base_dir / "core" / f"{module_name}.py"
                if module_path.exists():
                    try:
                        spec = importlib.util.spec_from_file_location(
                            module_name, module_path
                        )
                        module = importlib.util.module_from_spec(spec)
                        spec.loader.exec_module(module)
                        results.append(f"{module_name}: OK")
                    except Exception as e:
                        results.append(f"{module_name}: ERROR - {str(e)}")
                else:
                    results.append(f"{module_name}: MISSING")
            
            success = all("OK" in result for result in results)
            return success, f"–ú–æ–¥—É–ª–∏ core: {', '.join(results)}"
            
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è core –º–æ–¥—É–ª–µ–π: {str(e)}"

    def _test_import_integrity(self) -> Tuple[bool, str]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–µ"""
        try:
            python_files = list(self.base_dir.rglob("*.py"))
            import_issues = []
            
            for py_file in python_files:
                if "test" in str(py_file).lower() or "venv" in str(py_file):
                    continue
                    
                try:
                    with open(py_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –ë–∞–∑–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
                    tree = ast.parse(content)
                    
                    # –ü–æ–∏—Å–∫ –∏–º–ø–æ—Ä—Ç–æ–≤
                    imports = []
                    for node in ast.walk(tree):
                        if isinstance(node, (ast.Import, ast.ImportFrom)):
                            imports.append(ast.unparse(node))
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö –º–æ–¥—É–ª–µ–π
                    for import_stmt in imports:
                        try:
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
                            if import_stmt.startswith('from .') or import_stmt.startswith('import .'):
                                continue
                                
                            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏–º–ø–æ—Ä—Ç
                            exec(import_stmt, {})
                            
                        except ImportError as e:
                            import_issues.append(f"{py_file.name}: {import_stmt} - {str(e)}")
                            
                except SyntaxError as e:
                    import_issues.append(f"{py_file.name}: SyntaxError - {str(e)}")
            
            if import_issues:
                return False, f"–ü—Ä–æ–±–ª–µ–º—ã –∏–º–ø–æ—Ä—Ç–∞: {import_issues[:5]}"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
            else:
                return True, "–í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"
                
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤: {str(e)}"

    def test_code_quality(self):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
        self.print_header("üìä –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –ö–û–î–ê")

        quality_checks = {
            "python_syntax": self._check_python_syntax,
            "code_complexity": self._check_code_complexity,
            "docstring_coverage": self._check_docstring_coverage,
            "function_validation": self._check_function_validation,
            "error_handling": self._check_error_handling
        }

        for check_name, check_func in quality_checks.items():
            try:
                success, details, metrics = check_func()
                self.print_result(
                    f"–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞: {check_name}",
                    success,
                    details
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                self.test_results["code_quality_analysis"][check_name] = {
                    "status": "PASS" if success else "FAIL",
                    "details": details,
                    "metrics": metrics
                }
            except Exception as e:
                self.print_result(
                    f"–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞: {check_name}",
                    False,
                    f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
                )

    def _check_python_syntax(self) -> Tuple[bool, str, Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python"""
        python_files = list(self.base_dir.rglob("*.py"))
        syntax_errors = []
        files_checked = 0
        
        for py_file in python_files:
            if "test" in str(py_file).lower() or "venv" in str(py_file):
                continue
                
            try:
                with open(py_file, 'r', encoding='utf-8') as f:
                    source_code = f.read()
                
                # –ö–æ–º–ø–∏–ª—è—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
                compile(source_code, str(py_file), 'exec')
                files_checked += 1
                
            except SyntaxError as e:
                syntax_errors.append(f"{py_file}: {str(e)}")
        
        metrics = {
            "files_checked": files_checked,
            "syntax_errors": len(syntax_errors),
            "error_details": syntax_errors
        }
        
        if syntax_errors:
            return False, f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ {len(syntax_errors)} —Ñ–∞–π–ª–∞—Ö", metrics
        else:
            return True, f"–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –≤ {files_checked} —Ñ–∞–π–ª–∞—Ö", metrics

    def _check_code_complexity(self) -> Tuple[bool, str, Dict]:
        """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞"""
        python_files = list(self.base_dir.rglob("*.py"))
        complexity_issues = []
        total_functions = 0
        total_lines = 0
        
        for py_file in python_files:
            if "test" in str(py_file).lower() or "venv" in str(py_file):
                continue
                
            try:
                with open(py_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                tree = ast.parse(content)
                
                # –ü–æ–¥—Å—á–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏ –º–µ—Ç–æ–¥–æ–≤
                functions = [node for node in ast.walk(tree) 
                           if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef))]
                total_functions += len(functions)
                
                # –ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫
                lines = content.split('\n')
                total_lines += len([line for line in lines if line.strip()])
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                for func in functions:
                    func_lines = func.end_lineno - func.lineno if func.end_lineno else 0
                    if func_lines > 100:  # –§—É–Ω–∫—Ü–∏–∏ –±–æ–ª—å—à–µ 100 —Å—Ç—Ä–æ–∫
                        complexity_issues.append(f"{py_file.name}:{func.name} - {func_lines} —Å—Ç—Ä–æ–∫")
                        
            except Exception as e:
                complexity_issues.append(f"{py_file.name}: –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ - {str(e)}")
        
        avg_lines_per_function = total_lines / max(total_functions, 1)
        
        metrics = {
            "total_files": len(python_files),
            "total_functions": total_functions,
            "total_lines": total_lines,
            "avg_lines_per_function": round(avg_lines_per_function, 2),
            "complexity_issues": complexity_issues
        }
        
        if complexity_issues:
            return False, f"–ù–∞–π–¥–µ–Ω—ã —Å–ª–æ–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {len(complexity_issues)}", metrics
        else:
            return True, f"–°–ª–æ–∂–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –≤ –Ω–æ—Ä–º–µ", metrics

    def _check_docstring_coverage(self) -> Tuple[bool, str, Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è docstring"""
        python_files = list(self.base_dir.rglob("*.py"))
        docstring_stats = {
            "files_with_docstrings": 0,
            "functions_with_docstrings": 0,
            "total_functions": 0,
            "classes_with_docstrings": 0,
            "total_classes": 0
        }
        
        for py_file in python_files:
            if "test" in str(py_file).lower() or "venv" in str(py_file):
                continue
                
            try:
                with open(py_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                tree = ast.parse(content)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ docstring –º–æ–¥—É–ª—è
                if ast.get_docstring(tree):
                    docstring_stats["files_with_docstrings"] += 1
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Å–æ–≤
                classes = [node for node in ast.walk(tree) 
                         if isinstance(node, ast.ClassDef)]
                docstring_stats["total_classes"] += len(classes)
                
                for class_node in classes:
                    if ast.get_docstring(class_node):
                        docstring_stats["classes_with_docstrings"] += 1
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
                functions = [node for node in ast.walk(tree) 
                           if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef))]
                docstring_stats["total_functions"] += len(functions)
                
                for func_node in functions:
                    if ast.get_docstring(func_node):
                        docstring_stats["functions_with_docstrings"] += 1
                        
            except Exception as e:
                continue
        
        # –†–∞—Å—á–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è
        file_coverage = (docstring_stats["files_with_docstrings"] / len(python_files)) * 100
        class_coverage = (docstring_stats["classes_with_docstrings"] / max(docstring_stats["total_classes"], 1)) * 100
        function_coverage = (docstring_stats["functions_with_docstrings"] / max(docstring_stats["total_functions"], 1)) * 100
        
        metrics = {
            **docstring_stats,
            "file_coverage_percent": round(file_coverage, 2),
            "class_coverage_percent": round(class_coverage, 2),
            "function_coverage_percent": round(function_coverage, 2)
        }
        
        if file_coverage < 50 or class_coverage < 50 or function_coverage < 50:
            return False, f"–ù–∏–∑–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ docstring: —Ñ–∞–π–ª—ã={file_coverage}%, –∫–ª–∞—Å—Å—ã={class_coverage}%, —Ñ—É–Ω–∫—Ü–∏–∏={function_coverage}%", metrics
        else:
            return True, f"–ü–æ–∫—Ä—ã—Ç–∏–µ docstring –∞–¥–µ–∫–≤–∞—Ç–Ω–æ–µ", metrics

    def _check_function_validation(self) -> Tuple[bool, str, Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö"""
        python_files = list(self.base_dir.rglob("*.py"))
        validation_issues = []
        functions_checked = 0
        
        critical_modules = ['api', 'core', 'database']
        
        for py_file in python_files:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥—É–ª–∏
            if not any(module in str(py_file) for module in critical_modules):
                continue
                
            try:
                with open(py_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                tree = ast.parse(content)
                
                # –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π
                functions = [node for node in ast.walk(tree) 
                           if isinstance(node, (ast.FunctionDef, ast.AsyncFunctionDef))]
                
                for func in functions:
                    functions_checked += 1
                    func_name = func.name
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∞–∑–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
                    has_try_except = any(isinstance(node, ast.Try) for node in ast.walk(func))
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (–±–∞–∑–æ–≤–∞—è)
                    args = func.args
                    has_type_hints = any(arg.annotation for arg in args.args)
                    
                    if not has_try_except and func_name not in ['__init__', 'setup']:
                        validation_issues.append(f"{py_file.name}:{func_name} - –Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
                    
            except Exception as e:
                validation_issues.append(f"{py_file.name}: –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ - {str(e)}")
        
        metrics = {
            "functions_checked": functions_checked,
            "validation_issues": len(validation_issues),
            "issue_details": validation_issues
        }
        
        if validation_issues:
            return False, f"–ü—Ä–æ–±–ª–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ {len(validation_issues)} —Ñ—É–Ω–∫—Ü–∏—è—Ö", metrics
        else:
            return True, f"–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞", metrics

    def _check_error_handling(self) -> Tuple[bool, str, Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        python_files = list(self.base_dir.rglob("*.py"))
        error_handling_stats = {
            "files_with_error_handling": 0,
            "total_try_blocks": 0,
            "specific_exceptions": 0,
            "bare_excepts": 0
        }
        
        for py_file in python_files:
            if "test" in str(py_file).lower() or "venv" in str(py_file):
                continue
                
            try:
                with open(py_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                tree = ast.parse(content)
                
                # –ü–æ–∏—Å–∫ –±–ª–æ–∫–æ–≤ try
                try_blocks = [node for node in ast.walk(tree) 
                            if isinstance(node, ast.Try)]
                
                if try_blocks:
                    error_handling_stats["files_with_error_handling"] += 1
                    error_handling_stats["total_try_blocks"] += len(try_blocks)
                
                for try_block in try_blocks:
                    for handler in try_block.handlers:
                        if handler.type is None:  # Bare except
                            error_handling_stats["bare_excepts"] += 1
                        else:
                            error_handling_stats["specific_exceptions"] += 1
                            
            except Exception as e:
                continue
        
        metrics = error_handling_stats
        
        if error_handling_stats["bare_excepts"] > 0:
            return False, f"–ù–∞–π–¥–µ–Ω—ã bare excepts: {error_handling_stats['bare_excepts']}", metrics
        else:
            return True, f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞", metrics

    def test_performance_metrics(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–µ—Ç—Ä–∏–∫"""
        self.print_header("‚ö° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")

        performance_tests = {
            "import_performance": self._test_import_performance,
            "startup_time": self._test_startup_time,
            "memory_usage": self._test_memory_usage
        }

        for test_name, test_func in performance_tests.items():
            try:
                success, details, metrics = test_func()
                self.print_result(
                    f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {test_name}",
                    success,
                    details
                )
                self.test_results["performance_metrics"][test_name] = {
                    "status": "PASS" if success else "FAIL",
                    "details": details,
                    "metrics": metrics
                }
            except Exception as e:
                self.print_result(
                    f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {test_name}",
                    False,
                    f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"
                )

    def _test_import_performance(self) -> Tuple[bool, str, Dict]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–º–ø–æ—Ä—Ç–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π"""
        import time
        
        critical_modules = [
            "core.config",
            "database.models", 
            "api.app"
        ]
        
        import_times = {}
        
        for module_name in critical_modules:
            try:
                start_time = time.time()
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
                module_path = self.base_dir / module_name.replace('.', '/') + ".py"
                if module_path.exists():
                    spec = importlib.util.spec_from_file_location(
                        module_name, module_path
                    )
                    module = importlib.util.module_from_spec(spec)
                    spec.loader.exec_module(module)
                    
                    end_time = time.time()
                    import_times[module_name] = round((end_time - start_time) * 1000, 2)  # –º—Å
                else:
                    import_times[module_name] = "MISSING"
                    
            except Exception as e:
                import_times[module_name] = f"ERROR: {str(e)}"
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        successful_imports = {k: v for k, v in import_times.items() 
                            if isinstance(v, (int, float))}
        
        if successful_imports:
            avg_import_time = sum(successful_imports.values()) / len(successful_imports)
            max_import_time = max(successful_imports.values())
            
            metrics = {
                "import_times": import_times,
                "average_import_time_ms": round(avg_import_time, 2),
                "max_import_time_ms": max_import_time,
                "successful_imports": len(successful_imports)
            }
            
            if max_import_time > 1000:  # –ë–æ–ª—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã
                return False, f"–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã: –¥–æ {max_import_time}–º—Å", metrics
            else:
                return True, f"–ò–º–ø–æ—Ä—Ç—ã –±—ã—Å—Ç—Ä—ã–µ: –º–∞–∫—Å {max_import_time}–º—Å", metrics
        else:
            metrics = {"import_times": import_times}
            return False, "–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤", metrics

    def _test_startup_time(self) -> Tuple[bool, str, Dict]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            app_path = self.base_dir / "api" / "app.py"
            
            if app_path.exists():
                start_time = time.time()
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                spec = importlib.util.spec_from_file_location("app", app_path)
                app_module = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(app_module)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ
                if hasattr(app_module, 'app'):
                    app = getattr(app_module, 'app')
                    startup_time = (time.time() - start_time) * 1000  # –º—Å
                    
                    metrics = {
                        "startup_time_ms": round(startup_time, 2),
                        "app_initialized": True
                    }
                    
                    if startup_time > 5000:  # –ë–æ–ª—å—à–µ 5 —Å–µ–∫—É–Ω–¥
                        return False, f"–ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫: {startup_time}–º—Å", metrics
                    else:
                        return True, f"–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫: {startup_time}–º—Å", metrics
                else:
                    metrics = {"app_initialized": False}
                    return False, "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ", metrics
            else:
                metrics = {"app_exists": False}
                return False, "–§–∞–π–ª app.py –Ω–µ –Ω–∞–π–¥–µ–Ω", metrics
                
        except Exception as e:
            metrics = {"error": str(e)}
            return False, f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}", metrics

    def _test_memory_usage(self) -> Tuple[bool, str, Dict]:
        """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        import psutil
        import os
        
        process = psutil.Process(os.getpid())
        initial_memory = process.memory_info().rss / 1024 / 1024  # MB
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ - –∏–º–ø–æ—Ä—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–¥—É–ª–µ–π
        modules_to_load = ['core.config', 'database.models']
        loaded_modules = []
        
        for module_name in modules_to_load:
            try:
                module_path = self.base_dir / module_name.replace('.', '/') + ".py"
                if module_path.exists():
                    spec = importlib.util.spec_from_file_location(
                        module_name, module_path
                    )
                    module = importlib.util.module_from_spec(spec)
                    spec.loader.exec_module(module)
                    loaded_modules.append(module)
            except:
                pass
        
        final_memory = process.memory_info().rss / 1024 / 1024  # MB
        memory_increase = final_memory - initial_memory
        
        metrics = {
            "initial_memory_mb": round(initial_memory, 2),
            "final_memory_mb": round(final_memory, 2),
            "memory_increase_mb": round(memory_increase, 2),
            "modules_loaded": len(loaded_modules)
        }
        
        if memory_increase > 100:  # –ë–æ–ª—å—à–µ 100MB
            return False, f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: +{memory_increase}MB", metrics
        else:
            return True, f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ: +{memory_increase}MB", metrics

    def test_security_checks(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞"""
        self.print_header("üîí –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")

        security_checks = {
            "environment_variables": self._check_environment_security,
            "dependencies_vulnerabilities": self._check_dependencies_security,
            "code_security_patterns": self._check_code_security_patterns
        }

        for check_name, check_func in security_checks.items():
            try:
                success, details, metrics = check_func()
                self.print_result(
                    f"–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {check_name}",
                    success,
                    details
                )
                self.test_results["security_checks"][check_name] = {
                    "status": "PASS" if success else "FAIL",
                    "details": details,
                    "metrics": metrics
                }
            except Exception as e:
                self.print_result(
                    f"–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {check_name}",
                    False,
                    f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}"
                )

    def _check_environment_security(self) -> Tuple[bool, str, Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        env_example = self.base_dir / ".env.example"
        security_issues = []
        
        if env_example.exists():
            try:
                with open(env_example, 'r') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–∏–º–µ—Ä–µ
                sensitive_patterns = [
                    "SECRET_KEY=", "PASSWORD=", "TOKEN=", 
                    "API_KEY=", "PRIVATE_KEY="
                ]
                
                for pattern in sensitive_patterns:
                    if pattern in content:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è
                        lines = content.split('\n')
                        for line in lines:
                            if pattern in line and not line.strip().startswith('#'):
                                if "example" not in line.lower() and "changeme" not in line.lower():
                                    security_issues.append(f"–í–æ–∑–º–æ–∂–Ω–∞—è —É—Ç–µ—á–∫–∞ –≤: {line.strip()}")
                
            except Exception as e:
                security_issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env.example: {str(e)}")
        
        metrics = {
            "security_issues_found": len(security_issues),
            "issues_details": security_issues
        }
        
        if security_issues:
            return False, f"–ü—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {len(security_issues)}", metrics
        else:
            return True, "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã", metrics

    def _check_dependencies_security(self) -> Tuple[bool, str, Dict]:
        """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        requirements_file = self.base_dir / "requirements.txt"
        security_issues = []
        
        if requirements_file.exists():
            try:
                with open(requirements_file, 'r') as f:
                    requirements = f.readlines()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
                problematic_packages = {
                    "pickle": "–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è",
                    "marshal": "–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è", 
                    "yaml": "–í–æ–∑–º–æ–∂–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ load()",
                    "eval": "–û–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞"
                }
                
                for req in requirements:
                    req_lower = req.lower()
                    for pkg, issue in problematic_packages.items():
                        if pkg in req_lower and not req_lower.startswith('#'):
                            security_issues.append(f"{req.strip()}: {issue}")
                
            except Exception as e:
                security_issues.append(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ requirements: {str(e)}")
        
        metrics = {
            "security_issues": len(security_issues),
            "issues_details": security_issues
        }
        
        if security_issues:
            return False, f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {len(security_issues)}", metrics
        else:
            return True, "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã", metrics

    def _check_code_security_patterns(self) -> Tuple[bool, str, Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –∫–æ–¥–µ"""
        python_files = list(self.base_dir.rglob("*.py"))
        security_issues = []
        
        dangerous_patterns = {
            "exec(": "–û–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞",
            "eval(": "–û–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞", 
            "pickle.loads": "–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è",
            "yaml.load": "–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ YAML",
            "subprocess.run": "–í–æ–∑–º–æ–∂–Ω–∞—è –∏–Ω—ä–µ–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥",
            "os.system": "–û–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
        }
        
        for py_file in python_files:
            try:
                with open(py_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                for pattern, description in dangerous_patterns.items():
                    if pattern in content:
                        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Ç–µ—Å—Ç—ã
                        lines = content.split('\n')
                        for i, line in enumerate(lines, 1):
                            if pattern in line and not line.strip().startswith('#'):
                                if "test" not in str(py_file).lower():
                                    security_issues.append(
                                        f"{py_file.name}:{i} - {description}"
                                    )
                
            except Exception as e:
                security_issues.append(f"{py_file.name}: –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ - {str(e)}")
        
        metrics = {
            "files_checked": len(python_files),
            "security_issues": len(security_issues),
            "issues_details": security_issues[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
        }
        
        if security_issues:
            return False, f"–û–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {len(security_issues)}", metrics
        else:
            return True, "–ö–æ–¥ –±–µ–∑–æ–ø–∞—Å–µ–Ω", metrics

    # ========== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò (–°–û–•–†–ê–ù–Ø–ï–ú) ==========

    def print_header(self, message: str):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞–∑–¥–µ–ª–∞"""
        print(f"\n{'='*80}")
        print(f"üîç {message}")
        print(f"{'='*80}")

    def print_section(self, message: str):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞"""
        print(f"\n{'‚îÄ'*60}")
        print(f"üìÅ {message}")
        print(f"{'‚îÄ'*60}")

    def print_result(self, test_name: str, status: bool, details: str = "", points: int = 1):
        """–ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        icon = "‚úÖ" if status else "‚ùå"
        status_text = "–í–´–ü–û–õ–ù–ï–ù–û" if status else "–ù–ï –í–´–ü–û–õ–ù–ï–ù–û"
        print(f"{icon} {test_name}: {status_text}")
        if details:
            print(f"   üìù {details}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤
        self.test_results["score"]["total_tests"] += 1
        if status:
            self.test_results["score"]["passed_tests"] += points
        
        return status

    def scan_project_structure(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
        # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...

    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.print_header("üöÄ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ü–†–û–ï–ö–¢–ê")
        
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç—ã
        self.scan_project_structure()
        
        # –ù–æ–≤—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        self.test_code_execution()
        self.test_code_quality() 
        self.test_performance_metrics()
        self.test_security_checks()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        self.generate_detailed_analysis()
        
        return self.generate_final_report()

    def generate_detailed_analysis(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        analysis = {
            "import_errors": self.import_errors,
            "runtime_errors": self.runtime_errors,
            "code_issues": self.code_issues,
            "overall_health_score": self.calculate_health_score(),
            "recommendations_priority": self.prioritize_recommendations()
        }
        
        self.test_results["detailed_analysis"] = analysis

    def calculate_health_score(self) -> float:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–µ–∫—Ç–∞"""
        total_checks = self.test_results["score"]["total_tests"]
        passed_checks = self.test_results["score"]["passed_tests"]
        
        if total_checks == 0:
            return 0.0
        
        base_score = (passed_checks / total_checks) * 100
        
        # –®—Ç—Ä–∞—Ñ—ã –∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        penalty = len(self.import_errors) * 5 + len(self.runtime_errors) * 10
        final_score = max(0, base_score - penalty)
        
        return round(final_score, 2)

    def prioritize_recommendations(self) -> List[Dict]:
        """–ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏"""
        recommendations = []
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        if self.import_errors:
            recommendations.append({
                "priority": "CRITICAL",
                "message": "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞",
                "details": self.import_errors[:3]
            })
        
        if self.runtime_errors:
            recommendations.append({
                "priority": "HIGH", 
                "message": "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                "details": self.runtime_errors[:3]
            })
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        security_issues = self.test_results["security_checks"].get("issues", [])
        if security_issues:
            recommendations.append({
                "priority": "HIGH",
                "message": "–£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                "details": security_issues[:3]
            })
        
        return recommendations

    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.print_header("üìä –î–ï–¢–ê–õ–¨–ù–´–ô –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
        
        health_score = self.calculate_health_score()
        
        print(f"üèÅ –û–ë–©–ò–ô –°–¢–ê–¢–£–°: {self.test_results['overall_status']}")
        print(f"‚ù§Ô∏è  –ó–î–û–†–û–í–¨–ï –ü–†–û–ï–ö–¢–ê: {health_score}%")
        print(f"‚úÖ –í–´–ü–û–õ–ù–ï–ù–û –¢–ï–°–¢–û–í: {self.test_results['score']['passed_tests']}/{self.test_results['score']['total_tests']}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        print(f"\nüìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞: {len(self.import_errors)}")
        print(f"   ‚Ä¢ –û—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {len(self.runtime_errors)}")
        print(f"   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã –∫–æ–¥–∞: {len(self.code_issues)}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüéØ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for rec in self.prioritize_recommendations():
            print(f"   ‚Ä¢ [{rec['priority']}] {rec['message']}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        self.save_comprehensive_report()
        
        return health_score > 70  # –ü—Ä–æ–µ–∫—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω—ã–º –ø—Ä–∏ –∑–¥–æ—Ä–æ–≤—å–µ >70%

    def save_comprehensive_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report_file = self.base_dir / "advanced_comprehensive_project_report.json"
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(self.test_results, f, indent=2, ensure_ascii=False, default=str)
            print(f"\nüíæ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê")
    print("–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –Ω–æ –∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–æ–¥–∞")
    
    try:
        tester = AdvancedComprehensiveProjectTest()
        success = tester.run_comprehensive_test()
        
        if success:
            print("\nüéâ –ü–†–û–ï–ö–¢ –ü–†–û–®–ï–õ –†–ê–°–®–ò–†–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï!")
        else:
            print("\nüîß –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ò - —Å–º. —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –æ—Ç—á–µ—Ç–µ")
            
        sys.exit(0 if success else 1)
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()