# scripts/comprehensive_project_test_final.py
#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–†–û–ï–ö–¢–ê –° –£–ß–ï–¢–û–ú –ü–†–ï–§–ò–ö–°–ê API
"""

import os
import sys
import json
import logging
from pathlib import Path
from typing import Dict, List
import urllib.request
import urllib.error
import time
import re

logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

class FinalProjectTest:
    def __init__(self):
        self.base_dir = Path(__file__).parent.parent
        self.api_prefix = "/api/v1"  # ‚úÖ –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
        self.test_results = {
            "project": "Anthropomorphic AI Core",
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "api_prefix": self.api_prefix,
            "overall_status": "IN_PROGRESS",
            "score": {"total_tests": 0, "passed_tests": 0, "success_rate": 0}
        }

    def print_header(self, message: str):
        print(f"\n{'='*80}")
        print(f"üîç {message}")
        print(f"{'='*80}")

    def print_result(self, test_name: str, status: bool, details: str = ""):
        icon = "‚úÖ" if status else "‚ùå"
        status_text = "–í–´–ü–û–õ–ù–ï–ù–û" if status else "–ù–ï –í–´–ü–û–õ–ù–ï–ù–û"
        print(f"{icon} {test_name}: {status_text}")
        if details:
            print(f"   üìù {details}")
        
        self.test_results["score"]["total_tests"] += 1
        if status:
            self.test_results["score"]["passed_tests"] += 1

    def test_api_endpoints_with_prefix(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –ø—Ä–µ—Ñ–∏–∫—Å–∞"""
        self.print_header("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –≠–ù–î–ü–û–ò–ù–¢–û–í (–° –ü–†–ï–§–ò–ö–°–û–ú)")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        test_cases = [
            ("GET", "/", "–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞)"),
            ("GET", "/health", "Health check (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞)"),
            ("GET", f"{self.api_prefix}/state", "System state"),
            ("GET", f"{self.api_prefix}/modules", "Active modules"),
            ("GET", f"{self.api_prefix}/system/info", "System info"),
            ("POST", f"{self.api_prefix}/chat", "Chat endpoint"),
        ]
        
        working_count = 0
        for method, endpoint, description in test_cases:
            if self.test_single_endpoint(method, endpoint):
                self.print_result(f"{method} {endpoint}", True, description)
                working_count += 1
            else:
                self.print_result(f"{method} {endpoint}", False, f"{description} - –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
        
        self.print_result("–†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å API", working_count > 0, 
                         f"{working_count}/{len(test_cases)} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        return working_count == len(test_cases)

    def test_single_endpoint(self, method: str, endpoint: str) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
        try:
            url = f"http://localhost:8000{endpoint}"
            req = urllib.request.Request(url, method=method)
            req.add_header('User-Agent', 'Project-Test')
            req.add_header('Content-Type', 'application/json')
            
            # –î–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if method == "POST":
                import json
                test_data = json.dumps({"message": "test"}).encode('utf-8')
                req.data = test_data
            
            with urllib.request.urlopen(req, timeout=10) as response:
                return response.status == 200
        except urllib.error.HTTPError as e:
            # 404 –∏ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –Ω–µ—É–¥–∞—á–µ–π
            return False
        except Exception as e:
            return False

    def check_routes_integration(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ routes –≤ app.py"""
        self.print_header("üîó –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò APP.PY")
        
        app_file = self.base_dir / "api" / "app.py"
        if not app_file.exists():
            self.print_result("–§–∞–π–ª app.py", False, "–ù–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        content = app_file.read_text()
        
        checks = [
            ("–ò–º–ø–æ—Ä—Ç router", "from api.routes import router" in content),
            ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ router", "app.include_router(router" in content),
            ("–ü—Ä–µ—Ñ–∏–∫—Å /api/v1", 'prefix="/api/v1"' in content or "prefix='/api/v1'" in content),
        ]
        
        all_passed = True
        for check_name, status in checks:
            self.print_result(check_name, status)
            if not status:
                all_passed = False
        
        return all_passed

    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.print_header("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–†–û–ï–ö–¢–ê ANTHROPOMORPHIC AI")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        integration_ok = self.check_routes_integration()
        if not integration_ok:
            self.print_result("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", False, "–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å app.py")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        api_ok = self.test_api_endpoints_with_prefix()
        
        # –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total = self.test_results["score"]["total_tests"]
        passed = self.test_results["score"]["passed_tests"]
        success_rate = (passed / total) * 100 if total > 0 else 0
        
        self.test_results["score"]["success_rate"] = round(success_rate, 2)
        
        self.print_header("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
        print(f"‚úÖ –í–´–ü–û–õ–ù–ï–ù–û –¢–ï–°–¢–û–í: {passed}/{total}")
        print(f"üìà –£–°–ü–ï–®–ù–û–°–¢–¨: {success_rate:.2f}%")
        print(f"üéØ –ü–†–ï–§–ò–ö–° API: {self.api_prefix}")
        
        if success_rate >= 90:
            print("üéâ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í –ö –î–ï–ü–õ–û–Æ!")
            self.test_results["overall_status"] = "READY"
            return True
        else:
            print("üîß –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
            self.test_results["overall_status"] = "NEEDS_FIXES"
            return False

def main():
    print("üöÄ –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê –ü–†–û–ï–ö–¢–ê")
    print("üìå –° –£–ß–ï–¢–û–ú –ü–†–ï–§–ò–ö–°–ê API /api/v1")
    
    try:
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    except KeyboardInterrupt:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    
    tester = FinalProjectTest()
    success = tester.run_comprehensive_test()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report_file = tester.base_dir / "final_test_report.json"
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(tester.test_results, f, indent=2, ensure_ascii=False)
    print(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()