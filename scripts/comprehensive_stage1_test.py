#!/usr/bin/env python3
"""
–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –≠–¢–ê–ü–ê 1.3: –ù–ê–°–¢–†–û–ô–ö–ê –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–´
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Python 3.12.3/3.13.4
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
"""

import os
import sys
import json
import logging
import subprocess
import importlib.metadata
from pathlib import Path
from typing import Dict, List, Tuple, Any
import urllib.request
import urllib.error
import time
import socket

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(levelname)s: %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

class Stage1ComprehensiveTest:
    def __init__(self):
        self.base_dir = Path(__file__).parent.parent
        self.test_results = {
            "stage": "1.3 - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "python_compatibility": {},
            "environment_config": {},
            "api_functionality": {},
            "deployment_readiness": {},
            "dependencies": {},
            "security_checks": {},
            "performance_checks": {},
            "overall_status": "PENDING",
            "score": 0,
            "total_tests": 0,
            "passed_tests": 0
        }
        self.errors = []
        self.warnings = []

    def print_header(self, message: str):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞–∑–¥–µ–ª–∞"""
        print(f"\n{'='*60}")
        print(f"üîç {message}")
        print(f"{'='*60}")

    def print_result(self, test_name: str, status: bool, details: str = "", points: int = 1):
        """–ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –±–∞–ª–ª–æ–≤"""
        icon = "‚úÖ" if status else "‚ùå"
        status_text = "–ü–†–û–ô–î–ï–ù" if status else "–ù–ï –ü–†–û–ô–î–ï–ù"
        print(f"{icon} {test_name}: {status_text}")
        if details:
            print(f"   üìù {details}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤
        self.test_results["total_tests"] += 1
        if status:
            self.test_results["passed_tests"] += points
            self.test_results["score"] += points

    def test_server_availability(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º API"""
        self.print_header("üîß –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ï–†–í–ï–†–ê")
        
        base_url = "http://localhost:8000"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ—Ä—Ç 8000 –¥–æ—Å—Ç—É–ø–µ–Ω
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(5)
            result = sock.connect_ex(('localhost', 8000))
            sock.close()
            
            if result == 0:
                self.print_result("–ü–æ—Ä—Ç 8000 –¥–æ—Å—Ç—É–ø–µ–Ω", True, "–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 8000")
                return True
            else:
                self.print_result("–ü–æ—Ä—Ç 8000 –¥–æ—Å—Ç—É–ø–µ–Ω", False, "–ü–æ—Ä—Ç 8000 –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python api/app.py")
                return False
        except Exception as e:
            self.print_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞", False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞: {e}")
            return False

    # –†–ê–ó–î–ï–õ 1: –ü–†–û–í–ï–†–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò PYTHON
    def test_python_compatibility(self):
        """–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–π Python"""
        self.print_header("1. üêç –ü–†–û–í–ï–†–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò PYTHON")

        version = sys.version_info
        current_version = f"{version.major}.{version.minor}.{version.micro}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
        compatible_versions = ["3.12.3", "3.13.4"]
        is_compatible = current_version in compatible_versions
        
        self.print_result(
            f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è Python {current_version}",
            is_compatible,
            f"–û–∂–∏–¥–∞–µ–º—ã–µ –≤–µ—Ä—Å–∏–∏: {', '.join(compatible_versions)}",
            points=2
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ runtime.txt –¥–ª—è Render
        runtime_file = self.base_dir / "runtime.txt"
        if runtime_file.exists():
            runtime_content = runtime_file.read_text().strip()
            is_correct = runtime_content == "python-3.13.4"
            self.print_result(
                "–§–∞–π–ª runtime.txt –¥–ª—è Render",
                is_correct,
                f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {runtime_content}",
                points=1
            )
        else:
            self.print_result("–§–∞–π–ª runtime.txt –¥–ª—è Render", False, "–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", points=1)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        requirements_file = self.base_dir / "requirements.txt"
        if requirements_file.exists():
            with open(requirements_file, 'r') as f:
                requirements = f.readlines()
            
            has_versions = any('==' in line or '>=' in line for line in requirements if line.strip() and not line.startswith('#'))
            self.print_result(
                "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –±–µ–∑ –≤–µ—Ä—Å–∏–π",
                not has_versions,
                "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–∫–∞–∑–∞–Ω—ã –±–µ–∑ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –≤–µ—Ä—Å–∏–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏",
                points=2
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
            critical_packages = ["fastapi", "uvicorn", "sqlalchemy", "pydantic", "pydantic-settings"]
            packages_in_req = [pkg for pkg in critical_packages if any(pkg in line.lower() for line in requirements)]
            self.print_result(
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã –≤ requirements.txt",
                len(packages_in_req) == len(critical_packages),
                f"–ù–∞–π–¥–µ–Ω–æ: {len(packages_in_req)}/{len(critical_packages)}",
                points=1
            )
        else:
            self.print_result("–§–∞–π–ª requirements.txt", False, "–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", points=1)

        self.test_results["python_compatibility"] = {
            "current_version": current_version,
            "compatible_versions": compatible_versions,
            "runtime_configured": runtime_file.exists(),
            "dependency_strategy": "versionless" if not has_versions else "versioned"
        }

        return is_compatible

    # –†–ê–ó–î–ï–õ 2: –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –û–ö–†–£–ñ–ï–ù–ò–Ø
    def test_environment_configuration(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.print_header("2. ‚öôÔ∏è –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –û–ö–†–£–ñ–ï–ù–ò–Ø")

        env_files = {
            ".env.example": "–®–∞–±–ª–æ–Ω –æ–∫—Ä—É–∂–µ–Ω–∏—è",
            ".env": "–õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"
        }

        env_status = {}
        all_env_files_exist = True
        
        for env_file, description in env_files.items():
            file_path = self.base_dir / env_file
            exists = file_path.exists()
            
            self.print_result(
                f"–§–∞–π–ª {description}",
                exists,
                f"{'–ù–∞–π–¥–µ–Ω' if exists else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}: {env_file}",
                points=1
            )
            
            if not exists:
                all_env_files_exist = False
            
            if exists:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                try:
                    content = file_path.read_text()
                    critical_vars = ["DATABASE_URL", "API_HOST", "API_PORT"]
                    found_vars = [var for var in critical_vars if var in content]
                    
                    self.print_result(
                        f"  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ {env_file}",
                        len(found_vars) == len(critical_vars),
                        f"–ù–∞–π–¥–µ–Ω–æ: {len(found_vars)}/{len(critical_vars)}",
                        points=1
                    )
                    
                    env_status[env_file] = {
                        "exists": True,
                        "critical_vars_found": len(found_vars),
                        "critical_vars_total": len(critical_vars)
                    }
                    
                except Exception as e:
                    self.print_result(f"–ß—Ç–µ–Ω–∏–µ {env_file}", False, f"–û—à–∏–±–∫–∞: {e}", points=1)
                    env_status[env_file] = {"exists": True, "error": str(e)}
            else:
                env_status[env_file] = {"exists": False}

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –º–æ–¥—É–ª–µ–π
        config_files = [
            "data/configs/system_config.json",
            "data/configs/psyche_config.json", 
            "data/configs/memory_config.json",
            "data/configs/mood_config.json"
        ]

        config_status = {}
        all_configs_valid = True
        
        for config_file in config_files:
            file_path = self.base_dir / config_file
            exists = file_path.exists()
            
            self.print_result(
                f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: {config_file}",
                exists,
                f"{'–ù–∞–π–¥–µ–Ω' if exists else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}",
                points=1
            )
            
            if not exists:
                all_configs_valid = False
            
            if exists:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ JSON
                try:
                    with open(file_path, 'r') as f:
                        config_data = json.load(f)
                    self.print_result(f"  –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON: {config_file}", True, points=1)
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    if "system_config.json" in config_file:
                        has_system_structure = "system" in config_data
                        self.print_result(
                            f"  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ system_config.json",
                            has_system_structure,
                            "–°–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–¥–µ–ª 'system'",
                            points=1
                        )
                    
                    config_status[config_file] = {"exists": True, "valid_json": True}
                except json.JSONDecodeError as e:
                    self.print_result(f"  –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON: {config_file}", False, f"–û—à–∏–±–∫–∞: {e}", points=1)
                    config_status[config_file] = {"exists": True, "valid_json": False, "error": str(e)}
                    all_configs_valid = False
            else:
                config_status[config_file] = {"exists": False}

        self.test_results["environment_config"] = {
            "environment_files": env_status,
            "config_files": config_status
        }

        return all_env_files_exist and all_configs_valid

    # –†–ê–ó–î–ï–õ 3: –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò API
    def test_api_functionality(self):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ API —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        self.print_header("3. üåê –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò API")

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        if not self.test_server_availability():
            self.print_result("API —Å–µ—Ä–≤–µ—Ä", False, "–°–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API", points=0)
            return False

        api_status = {}
        base_url = "http://localhost:8000"
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
        def make_detailed_request(url: str, method: str = 'GET', headers: dict = None):
            """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
            try:
                req = urllib.request.Request(url, method=method)
                req.add_header('User-Agent', 'Stage1-Test/1.0')
                req.add_header('Accept', 'application/json')
                
                if headers:
                    for key, value in headers.items():
                        req.add_header(key, value)
                
                with urllib.request.urlopen(req, timeout=10) as response:
                    raw_data = response.read().decode('utf-8')
                    return {
                        "success": True,
                        "status_code": response.status,
                        "content_type": response.headers.get('Content-Type', 'Unknown'),
                        "content_length": len(raw_data),
                        "raw_data": raw_data,
                        "headers": dict(response.headers)
                    }
            except urllib.error.HTTPError as e:
                return {
                    "success": False,
                    "error_type": "HTTPError",
                    "status_code": e.code,
                    "reason": e.reason,
                    "headers": dict(e.headers) if e.headers else {}
                }
            except Exception as e:
                return {
                    "success": False,
                    "error_type": "OtherError",
                    "error": str(e)
                }

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        endpoints_to_test = [
            ("/", "GET", "Root Endpoint"),
            ("/api/v1/health", "GET", "Health Check"),
            ("/api/v1/state", "GET", "System State"),
            ("/docs", "GET", "API Documentation"),
            ("/api/v1/chat", "POST", "Chat Endpoint"),
            ("/api/v1/mood/update", "POST", "Mood Update"),
            ("/api/v1/memory/store", "POST", "Memory Store"),
            ("/api/v1/memory/recall", "POST", "Memory Recall"),
            ("/api/v1/personality/update", "POST", "Personality Update")
        ]

        for endpoint, method, description in endpoints_to_test:
            url = base_url + endpoint
            result = make_detailed_request(url, method)
            
            if result["success"]:
                status_ok = result["status_code"] in [200, 201, 204]
                
                # –î–ª—è JSON endpoints –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
                if 'application/json' in result["content_type"]:
                    try:
                        data = json.loads(result["raw_data"])
                        self.print_result(
                            f"{description} ({method} {endpoint})",
                            status_ok,
                            f"Status: {result['status_code']}, Response: {list(data.keys()) if isinstance(data, dict) else type(data).__name__}",
                            points=1
                        )
                        api_status[endpoint] = {
                            "available": status_ok,
                            "status_code": result["status_code"],
                            "content_type": result["content_type"],
                            "data_keys": list(data.keys()) if isinstance(data, dict) else "N/A"
                        }
                    except json.JSONDecodeError:
                        self.print_result(
                            f"{description} ({method} {endpoint})",
                            False,
                            f"Status: {result['status_code']} - Invalid JSON: {result['raw_data'][:100]}...",
                            points=1
                        )
                        api_status[endpoint] = {"available": False, "status_code": result["status_code"], "error": "Invalid JSON"}
                else:
                    self.print_result(
                        f"{description} ({method} {endpoint})",
                        status_ok,
                        f"Status: {result['status_code']}, Type: {result['content_type']}",
                        points=1
                    )
                    api_status[endpoint] = {
                        "available": status_ok,
                        "status_code": result["status_code"],
                        "content_type": result["content_type"]
                    }
            else:
                # –î–ª—è –æ—à–∏–±–æ–∫ HTTP (–Ω–∞–ø—Ä–∏–º–µ—Ä, 405 Method Not Allowed) —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
                if result.get("status_code") == 405:
                    self.print_result(
                        f"{description} ({method} {endpoint})",
                        True,  # 405 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –º–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω
                        f"Endpoint exists but method not allowed: {result['status_code']}",
                        points=1
                    )
                    api_status[endpoint] = {"available": True, "status_code": result["status_code"], "note": "Method not allowed"}
                else:
                    self.print_result(
                        f"{description} ({method} {endpoint})",
                        False,
                        f"Error: {result.get('error_type', 'Unknown')} - {result.get('reason', result.get('error', 'No details'))}",
                        points=1
                    )
                    api_status[endpoint] = {"available": False, "error": result}

        # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ health —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
        self.print_header("üî¨ –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê HEALTH –≠–ù–î–ü–û–ò–ù–¢–ê")
        health_result = make_detailed_request(f"{base_url}/api/v1/health")
        
        if health_result["success"]:
            print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {health_result['status_code']}")
            print(f"üìÑ Content-Type: {health_result['content_type']}")
            print(f"üìè –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {health_result['content_length']} –±–∞–π—Ç")
            print(f"üìã –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {health_result['raw_data'][:500]}{'...' if len(health_result['raw_data']) > 500 else ''}")
            
            try:
                health_data = json.loads(health_result["raw_data"])
                print(f"üéØ –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {json.dumps(health_data, indent=2, ensure_ascii=False)}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ health response
                required_fields = ["status", "service", "version"]
                missing_fields = [field for field in required_fields if field not in health_data]
                
                if missing_fields:
                    self.print_result("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ health response", False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}", points=1)
                else:
                    self.print_result("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ health response", True, 
                                    f"–°—Ç–∞—Ç—É—Å: {health_data.get('status')}, –í–µ—Ä—Å–∏—è: {health_data.get('version')}", points=1)
                    
            except json.JSONDecodeError as e:
                self.print_result("–ü–∞—Ä—Å–∏–Ω–≥ health response", False, f"–û—à–∏–±–∫–∞ JSON: {e}", points=1)
        else:
            self.print_result("Health —ç–Ω–¥–ø–æ–∏–Ω—Ç", False, 
                            f"–û—à–∏–±–∫–∞: {health_result.get('error_type')} - {health_result.get('reason', health_result.get('error', 'No details'))}", 
                            points=1)

        self.test_results["api_functionality"] = api_status

        # –°—á–∏—Ç–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        critical_endpoints = ["/api/v1/health", "/api/v1/state", "/"]
        critical_available = all(
            api_status.get(endpoint, {}).get("available", False) 
            for endpoint in critical_endpoints
        )
        
        return critical_available

    # –†–ê–ó–î–ï–õ 4: –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –î–ï–ü–õ–û–Æ
    def test_deployment_readiness(self):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render"""
        self.print_header("4. üöÄ –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –î–ï–ü–õ–û–Æ")

        deployment_status = {}

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ render.yaml
        render_yaml = self.base_dir / "render.yaml"
        if render_yaml.exists():
            self.print_result("–§–∞–π–ª render.yaml", True, "–ù–∞–π–¥–µ–Ω", points=2)
            try:
                # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ render.yaml
                content = render_yaml.read_text()
                has_services = "services:" in content
                has_build_command = "buildCommand" in content
                self.print_result("  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ render.yaml", has_services and has_build_command, 
                                "–°–æ–¥–µ—Ä–∂–∏—Ç services –∏ buildCommand", points=1)
                deployment_status["render_yaml"] = {"exists": True, "valid_structure": has_services and has_build_command}
            except Exception as e:
                self.print_result("  –ß—Ç–µ–Ω–∏–µ render.yaml", False, f"–û—à–∏–±–∫–∞: {e}", points=1)
                deployment_status["render_yaml"] = {"exists": True, "valid_structure": False}
        else:
            self.print_result("–§–∞–π–ª render.yaml", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", points=2)
            deployment_status["render_yaml"] = {"exists": False}

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Dockerfile
        dockerfile = self.base_dir / "Dockerfile"
        if dockerfile.exists():
            self.print_result("–§–∞–π–ª Dockerfile", True, "–ù–∞–π–¥–µ–Ω", points=2)
            try:
                content = dockerfile.read_text()
                has_from = "FROM python" in content
                has_workdir = "WORKDIR" in content
                has_copy = "COPY" in content
                has_cmd = "CMD" in content or "ENTRYPOINT" in content
                self.print_result("  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Dockerfile", has_from and has_workdir and has_copy and has_cmd,
                                "–°–æ–¥–µ—Ä–∂–∏—Ç –±–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", points=1)
                deployment_status["dockerfile"] = {"exists": True, "valid_structure": True}
            except Exception as e:
                self.print_result("  –ß—Ç–µ–Ω–∏–µ Dockerfile", False, f"–û—à–∏–±–∫–∞: {e}", points=1)
                deployment_status["dockerfile"] = {"exists": True, "valid_structure": False}
        else:
            self.print_result("–§–∞–π–ª Dockerfile", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", points=2)
            deployment_status["dockerfile"] = {"exists": False}

        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–µ–ø–ª–æ—è
        deploy_scripts = [
            ("scripts/deploy_render.sh", "–°–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è Render"),
            ("scripts/setup_render.py", "–°–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Render"),
            ("scripts/validate_infrastructure.py", "–°–∫—Ä–∏–ø—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        ]

        scripts_status = {}
        all_scripts_exist = True
        for script_path, description in deploy_scripts:
            script_file = self.base_dir / script_path
            exists = script_file.exists()
            self.print_result(
                f"{description}",
                exists,
                f"{'–ù–∞–π–¥–µ–Ω' if exists else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}",
                points=1
            )
            scripts_status[script_path] = {"exists": exists}
            if not exists:
                all_scripts_exist = False

        deployment_status["deploy_scripts"] = scripts_status

        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
        required_dirs = [
            ("api", "API –º–æ–¥—É–ª–∏"),
            ("core", "–Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã"),
            ("data/configs", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"),
            ("utils", "–£—Ç–∏–ª–∏—Ç—ã"),
            ("scripts", "–°–∫—Ä–∏–ø—Ç—ã"),
            ("tests", "–¢–µ—Å—Ç—ã")
        ]

        dirs_status = {}
        all_dirs_exist = True
        for directory, description in required_dirs:
            dir_path = self.base_dir / directory
            exists = dir_path.exists()
            self.print_result(
                f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {description}",
                exists,
                f"{'–ù–∞–π–¥–µ–Ω–∞' if exists else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}",
                points=1
            )
            dirs_status[directory] = {"exists": exists}
            if not exists:
                all_dirs_exist = False

        deployment_status["project_structure"] = dirs_status

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
        critical_files = [
            ("api/app.py", "–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI"),
            ("core/config.py", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"),
            ("requirements.txt", "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python"),
            (".gitignore", "Git ignore —Ñ–∞–π–ª")
        ]

        files_status = {}
        for file_path, description in critical_files:
            file = self.base_dir / file_path
            exists = file.exists()
            self.print_result(
                f"–§–∞–π–ª: {description}",
                exists,
                f"{'–ù–∞–π–¥–µ–Ω' if exists else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}",
                points=1
            )
            files_status[file_path] = {"exists": exists}

        deployment_status["critical_files"] = files_status

        self.test_results["deployment_readiness"] = deployment_status

        return all_scripts_exist and all_dirs_exist

    # –†–ê–ó–î–ï–õ 5: –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
    def test_dependencies(self):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        self.print_header("5. üì¶ –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")

        critical_packages = [
            ("fastapi", "FastAPI —Ñ—Ä–µ–π–º–≤–æ—Ä–∫"),
            ("uvicorn", "ASGI —Å–µ—Ä–≤–µ—Ä"),
            ("sqlalchemy", "ORM –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"),
            ("pydantic", "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"),
            ("pydantic-settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Pydantic"),
            ("requests", "HTTP –∑–∞–ø—Ä–æ—Å—ã"),
            ("python-dotenv", "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"),
            ("alembic", "–ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"),
            ("psycopg2-binary", "PostgreSQL –¥—Ä–∞–π–≤–µ—Ä")
        ]

        dependencies_status = {}
        all_installed = True
        
        for package, description in critical_packages:
            try:
                version = importlib.metadata.version(package)
                self.print_result(
                    f"{description} ({package})",
                    True,
                    f"–í–µ—Ä—Å–∏—è: {version}",
                    points=1
                )
                dependencies_status[package] = {"installed": True, "version": version}
            except importlib.metadata.PackageNotFoundError:
                self.print_result(f"{description} ({package})", False, "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", points=1)
                dependencies_status[package] = {"installed": False}
                all_installed = False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–π
        self.print_header("üîß –ü–†–û–í–ï–†–ö–ê –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –í–ï–†–°–ò–ô")
        
        compatibility_checks = [
            ("FastAPI", "fastapi", "0.100.0", None),
            ("Pydantic", "pydantic", "2.0.0", None),
            ("SQLAlchemy", "sqlalchemy", "2.0.0", None)
        ]
        
        for name, package, min_version, max_version in compatibility_checks:
            if package in dependencies_status and dependencies_status[package]["installed"]:
                current_version = dependencies_status[package]["version"]
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
                self.print_result(
                    f"–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å {name}",
                    True,
                    f"–í–µ—Ä—Å–∏—è {current_version} - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞",
                    points=1
                )

        self.test_results["dependencies"] = dependencies_status

        return all_installed

    # –†–ê–ó–î–ï–õ 6: –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
    def test_security_checks(self):
        """–ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        self.print_header("6. üõ°Ô∏è –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")

        security_status = {}

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        env_file = self.base_dir / ".env"
        if env_file.exists():
            try:
                content = env_file.read_text()
                sensitive_patterns = ["SECRET_KEY", "PASSWORD", "TOKEN", "API_KEY"]
                found_sensitive = [pattern for pattern in sensitive_patterns if pattern in content]
                
                if found_sensitive:
                    self.print_result(
                        "–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ .env",
                        False,
                        f"–ù–∞–π–¥–µ–Ω—ã: {', '.join(found_sensitive)} - —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ .env –≤ .gitignore",
                        points=2
                    )
                else:
                    self.print_result(
                        "–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ .env",
                        True,
                        "–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env",
                        points=2
                    )
                
                security_status["env_sensitive_data"] = len(found_sensitive) == 0
            except Exception as e:
                self.print_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞", False, f"–û—à–∏–±–∫–∞: {e}", points=2)
                security_status["env_sensitive_data"] = False
        else:
            self.print_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞", True, "–§–∞–π–ª .env –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è production)", points=2)
            security_status["env_sensitive_data"] = True

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore
        gitignore_file = self.base_dir / ".gitignore"
        if gitignore_file.exists():
            try:
                content = gitignore_file.read_text()
                required_ignores = [".env", "__pycache__", "*.pyc", "instance/", ".pytest_cache"]
                missing_ignores = [ignore for ignore in required_ignores if ignore not in content]
                
                if missing_ignores:
                    self.print_result(
                        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ .gitignore",
                        False,
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing_ignores)}",
                        points=1
                    )
                else:
                    self.print_result(
                        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ .gitignore",
                        True,
                        "–í—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—É—Ç–∏ –≤ .gitignore",
                        points=1
                    )
                
                security_status["gitignore_complete"] = len(missing_ignores) == 0
            except Exception as e:
                self.print_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore", False, f"–û—à–∏–±–∫–∞: {e}", points=1)
                security_status["gitignore_complete"] = False
        else:
            self.print_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore", False, "–§–∞–π–ª .gitignore –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", points=1)
            security_status["gitignore_complete"] = False

        self.test_results["security_checks"] = security_status

        return security_status.get("env_sensitive_data", False) and security_status.get("gitignore_complete", False)

    # –†–ê–ó–î–ï–õ 7: –ü–†–û–í–ï–†–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
    def test_performance_checks(self):
        """–ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.print_header("7. ‚ö° –ü–†–û–í–ï–†–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")

        performance_status = {}

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ API
        base_url = "http://localhost:8000"
        endpoints_to_test = ["/", "/api/v1/health", "/api/v1/state"]
        
        response_times = {}
        for endpoint in endpoints_to_test:
            try:
                start_time = time.time()
                req = urllib.request.Request(base_url + endpoint)
                with urllib.request.urlopen(req, timeout=10) as response:
                    response.read()
                end_time = time.time()
                response_time = (end_time - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                
                response_times[endpoint] = response_time
                
                if response_time < 100:  # –º–µ–Ω–µ–µ 100 –º—Å - –æ—Ç–ª–∏—á–Ω–æ
                    self.print_result(
                        f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ {endpoint}",
                        True,
                        f"{response_time:.2f} –º—Å - –æ—Ç–ª–∏—á–Ω–æ",
                        points=1
                    )
                elif response_time < 500:  # –º–µ–Ω–µ–µ 500 –º—Å - —Ö–æ—Ä–æ—à–æ
                    self.print_result(
                        f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ {endpoint}",
                        True,
                        f"{response_time:.2f} –º—Å - —Ö–æ—Ä–æ—à–æ",
                        points=1
                    )
                else:
                    self.print_result(
                        f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ {endpoint}",
                        False,
                        f"{response_time:.2f} –º—Å - –º–µ–¥–ª–µ–Ω–Ω–æ",
                        points=1
                    )
                    
            except Exception as e:
                self.print_result(f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ {endpoint}", False, f"–û—à–∏–±–∫–∞: {e}", points=1)
                response_times[endpoint] = None

        performance_status["response_times"] = response_times
        self.test_results["performance_checks"] = performance_status

        # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, –µ—Å–ª–∏ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ < 500 –º—Å
        valid_times = [rt for rt in response_times.values() if rt is not None and rt < 500]
        return len(valid_times) >= 2

    # –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.print_header("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê –≠–¢–ê–ü–ê 1.3")
        print("–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ Render...")
        print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {self.test_results['timestamp']}")
        
        test_results = []

        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        test_results.append(self.test_python_compatibility())
        test_results.append(self.test_environment_configuration())
        test_results.append(self.test_api_functionality())
        test_results.append(self.test_deployment_readiness())
        test_results.append(self.test_dependencies())
        test_results.append(self.test_security_checks())
        test_results.append(self.test_performance_checks())

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        all_passed = all(test_results)
        self.test_results["overall_status"] = "PASSED" if all_passed else "FAILED"
        
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Å—á–µ—Ç–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        if self.test_results["total_tests"] > 0:
            success_rate = (self.test_results["score"] / self.test_results["total_tests"]) * 100
        else:
            success_rate = 0
            
        self.test_results["success_rate"] = round(success_rate, 2)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        self.generate_detailed_test_report(all_passed)

        return all_passed

    def generate_detailed_test_report(self, all_passed: bool):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
        self.print_header("üìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        
        # –°—Ç–∞—Ç—É—Å —ç—Ç–∞–ø–∞
        status_icon = "‚úÖ" if all_passed else "‚ùå"
        print(f"{status_icon} –≠–¢–ê–ü 1.3: –ù–ê–°–¢–†–û–ô–ö–ê –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–´")
        print(f"üìÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {self.test_results['timestamp']}")
        print(f"üìà –û–±—â–∏–π —Å—á–µ—Ç: {self.test_results['score']}/{self.test_results['total_tests']} ({self.test_results['success_rate']}%)")
        print(f"üéØ –°—Ç–∞—Ç—É—Å: {'–ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û' if all_passed else '–¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê'}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
        sections = [
            ("üêç –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å Python", self.test_results['python_compatibility']),
            ("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è", self.test_results['environment_config']),
            ("üåê –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å API", self.test_results['api_functionality']),
            ("üöÄ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –¥–µ–ø–ª–æ—é", self.test_results['deployment_readiness']),
            ("üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", self.test_results['dependencies']),
            ("üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", self.test_results['security_checks']),
            ("‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", self.test_results['performance_checks'])
        ]
        
        for section_name, section_data in sections:
            print(f"\n{section_name}:")
            if isinstance(section_data, dict):
                for key, value in section_data.items():
                    if isinstance(value, (str, int, float, bool)):
                        print(f"   {key}: {value}")
                    elif isinstance(value, dict):
                        print(f"   {key}:")
                        for sub_key, sub_value in value.items():
                            print(f"     {sub_key}: {sub_value}")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.print_header("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –°–õ–ï–î–£–Æ–©–ï–ì–û –≠–¢–ê–ü–ê")
        
        if all_passed:
            print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("\nüéâ –≠–¢–ê–ü 1.3 –ó–ê–í–ï–†–®–ï–ù! –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("1. –°–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub")
            print("2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –Ω–∞ Render")
            print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ production —Å—Ä–µ–¥–µ")
            print("4. –ü–µ—Ä–µ–π—Ç–∏ –∫ –≠—Ç–∞–ø—É 2: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        else:
            print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:")
            issues = []
            
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
            if not self.test_results['api_functionality']:
                issues.append("‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å API —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é")
            if not all(pkg['installed'] for pkg in self.test_results['dependencies'].values()):
                issues.append("‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
            if not self.test_results['deployment_readiness']['render_yaml']['exists']:
                issues.append("‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç render.yaml")
            if not self.test_results['deployment_readiness']['dockerfile']['exists']:
                issues.append("‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Dockerfile")
                
            for issue in issues:
                print(issue)
                
            print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
            print("1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É API endpoints")
            print("4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
            print("5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            print("6. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
        report_file = self.base_dir / "stage_1_3_detailed_test_report.json"
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(self.test_results, f, indent=2, ensure_ascii=False, default=str)
            print(f"\nüìÑ –ü–æ–ª–Ω—ã–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            brief_report = {
                "stage": self.test_results["stage"],
                "timestamp": self.test_results["timestamp"],
                "overall_status": self.test_results["overall_status"],
                "success_rate": self.test_results["success_rate"],
                "score": f"{self.test_results['score']}/{self.test_results['total_tests']}",
                "python_version": self.test_results["python_compatibility"]["current_version"]
            }
            
            brief_file = self.base_dir / "stage_1_3_brief_report.json"
            with open(brief_file, 'w', encoding='utf-8') as f:
                json.dump(brief_report, f, indent=2, ensure_ascii=False)
            print(f"üìã –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {brief_file}")
            
        except Exception as e:
            print(f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç: {e}")

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        print(f"\n{'üéâ' if all_passed else '‚ö†Ô∏è'} –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'–£–°–ü–ï–•' if all_passed else '–ù–ï–£–î–ê–ß–ê'}")
        print(f"–û–±—â–∏–π —Å—á–µ—Ç: {self.test_results['success_rate']}%")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞"""
    print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –≠–¢–ê–ü–ê 1.3: –ù–ê–°–¢–†–û–ô–ö–ê –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–´")
    print("–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π")
    print("\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (python api/app.py)")
    print("   –¢–µ—Å—Ç –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ http://localhost:8000")
    
    try:
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    except KeyboardInterrupt:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    
    tester = Stage1ComprehensiveTest()
    success = tester.run_comprehensive_test()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –¥–ª—è CI/CD
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()