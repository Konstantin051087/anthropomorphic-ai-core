#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –≠–¢–ê–ü–ê 1.3
–° —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –ø—Ä–æ–±–ª–µ–º
"""

import os
import sys
import json
import logging
import importlib.metadata
from pathlib import Path
from typing import Dict, List
import urllib.request
import urllib.error

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(levelname)s: %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

class FixedStage1Test:
    def __init__(self):
        self.base_dir = Path(__file__).parent.parent
        self.test_results = {
            "stage": "1.3 - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)",
            "overall_status": "PENDING",
            "details": {}
        }

    def print_header(self, message: str):
        print(f"\n{'='*60}")
        print(f"üîç {message}")
        print(f"{'='*60}")

    def print_result(self, test_name: str, status: bool, details: str = ""):
        icon = "‚úÖ" if status else "‚ùå"
        print(f"{icon} {test_name}: {'–ü–†–û–ô–î–ï–ù' if status else '–ù–ï –ü–†–û–ô–î–ï–ù'}")
        if details:
            print(f"   üìù {details}")

    def test_health_endpoint_fixed(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç health —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        self.print_header("–¢–ï–°–¢ HEALTH –≠–ù–î–ü–û–ò–ù–¢–ê –° –î–ò–ê–ì–ù–û–°–¢–ò–ö–û–ô")
        
        base_url = "http://localhost:8000"
        health_url = f"{base_url}/api/v1/health"
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            req = urllib.request.Request(health_url, method='GET')
            req.add_header('User-Agent', 'Stage1-Test/1.0')
            req.add_header('Accept', 'application/json')
            
            with urllib.request.urlopen(req, timeout=10) as response:
                # –ß–∏—Ç–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                raw_data = response.read().decode('utf-8')
                status_code = response.status
                content_type = response.headers.get('Content-Type', 'Unknown')
                
                print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {status_code}")
                print(f"üìÑ Content-Type: {content_type}")
                print(f"üìè –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(raw_data)} –±–∞–π—Ç")
                print(f"üìã –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞: {raw_data[:500]}...")
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
                try:
                    if not raw_data.strip():
                        self.print_result("Health Endpoint", False, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                        return False
                    
                    data = json.loads(raw_data)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                    required_fields = ["status", "service", "version"]
                    missing_fields = [field for field in required_fields if field not in data]
                    
                    if missing_fields:
                        self.print_result("Health Endpoint", False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
                        return False
                    
                    self.print_result("Health Endpoint", True, f"–°—Ç–∞—Ç—É—Å: {data.get('status')}, –í–µ—Ä—Å–∏—è: {data.get('version')}")
                    return True
                    
                except json.JSONDecodeError as e:
                    self.print_result("Health Endpoint", False, f"–û—à–∏–±–∫–∞ JSON: {e}. –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: '{raw_data}'")
                    return False
                    
        except urllib.error.HTTPError as e:
            self.print_result("Health Endpoint", False, f"HTTP –æ—à–∏–±–∫–∞: {e.code} {e.reason}")
            try:
                error_body = e.read().decode('utf-8')
                print(f"üìã –¢–µ–ª–æ –æ—à–∏–±–∫–∏: {error_body[:500]}...")
            except:
                pass
            return False
            
        except urllib.error.URLError as e:
            self.print_result("Health Endpoint", False, f"URL –æ—à–∏–±–∫–∞: {e.reason}")
            return False
            
        except Exception as e:
            self.print_result("Health Endpoint", False, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False

    def test_api_endpoints_comprehensive(self):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        self.print_header("–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ API –≠–ù–î–ü–û–ò–ù–¢–û–í")
        
        base_url = "http://localhost:8000"
        endpoints = [
            ("/", "GET", "Root Endpoint"),
            ("/api/v1/health", "GET", "Health Check"), 
            ("/api/v1/state", "GET", "System State"),
            ("/docs", "GET", "API Documentation")
        ]
        
        results = {}
        
        for endpoint, method, description in endpoints:
            url = base_url + endpoint
            try:
                req = urllib.request.Request(url, method=method)
                req.add_header('Accept', 'application/json')
                
                with urllib.request.urlopen(req, timeout=10) as response:
                    status_code = response.status
                    content_type = response.headers.get('Content-Type', '')
                    
                    # –î–ª—è JSON endpoints –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
                    if 'application/json' in content_type:
                        try:
                            raw_data = response.read().decode('utf-8')
                            data = json.loads(raw_data)
                            results[endpoint] = {
                                "status": "SUCCESS", 
                                "http_status": status_code,
                                "content_type": content_type,
                                "data_keys": list(data.keys()) if isinstance(data, dict) else "N/A"
                            }
                            self.print_result(f"{description} ({endpoint})", True, f"Status: {status_code}, Keys: {list(data.keys()) if isinstance(data, dict) else 'N/A'}")
                        except json.JSONDecodeError:
                            results[endpoint] = {"status": "INVALID_JSON", "http_status": status_code}
                            self.print_result(f"{description} ({endpoint})", False, f"Status: {status_code} - Invalid JSON")
                    else:
                        results[endpoint] = {"status": "SUCCESS", "http_status": status_code, "content_type": content_type}
                        self.print_result(f"{description} ({endpoint})", True, f"Status: {status_code}, Type: {content_type}")
                        
            except Exception as e:
                results[endpoint] = {"status": "ERROR", "error": str(e)}
                self.print_result(f"{description} ({endpoint})", False, f"Error: {e}")
        
        # –°—á–∏—Ç–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
        critical_endpoints = ["/api/v1/health", "/api/v1/state"]
        critical_success = all(
            results.get(endpoint, {}).get("status") == "SUCCESS" 
            for endpoint in critical_endpoints
        )
        
        self.test_results["details"]["api_endpoints"] = results
        return critical_success

    def run_diagnostic_test(self):
        """–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.print_header("üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –≠–¢–ê–ü–ê 1.3")
        
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã —Å health —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–º...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º health —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
        health_ok = self.test_health_endpoint_fixed()
        
        # –ï—Å–ª–∏ health –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç API –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if not health_ok:
            print("\n" + "ü©∫" * 20)
            print("–ó–ê–ü–£–°–ö –†–ê–°–®–ò–†–ï–ù–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò API")
            print("ü©∫" * 20)
            api_ok = self.test_api_endpoints_comprehensive()
        else:
            api_ok = True
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç
        self.test_results["overall_status"] = "PASSED" if health_ok else "FAILED"
        
        self.print_header("üìä –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢")
        
        if health_ok:
            print("‚úÖ HEALTH –≠–ù–î–ü–û–ò–ù–¢ –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û")
            print("üéâ –≠–¢–ê–ü 1.3 –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
        else:
            print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê –° HEALTH –≠–ù–î–ü–û–ò–ù–¢–û–ú")
            print("\n–í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:")
            print("1. –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            print("2. –≠–Ω–¥–ø–æ–∏–Ω—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ-JSON –¥–∞–Ω–Ω—ã–µ") 
            print("3. –û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /api/v1/health")
            print("4. –ü—Ä–æ–±–ª–µ–º—ã —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π –≤ FastAPI")
            print("\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: python api/app.py")
            print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ health –≤ api/routes.py")
            print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –≤ api/app.py")
            print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–∫–∏")
        
        return health_ok

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü©∫ –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –î–õ–Ø –≠–¢–ê–ü–ê 1.3")
    print("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å health —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–º")
    
    tester = FixedStage1Test()
    success = tester.run_diagnostic_test()
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()