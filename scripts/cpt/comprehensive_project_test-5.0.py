#!/usr/bin/env python3
"""
–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –í–°–ï–ì–û –ü–†–û–ï–ö–¢–ê ANTHROPOMORPHIC AI - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""

import os
import sys
import json
import logging
import importlib.metadata
import subprocess
from pathlib import Path
from typing import Dict, List, Tuple, Any, Set
import urllib.request
import urllib.error
import time
import socket
import re
import ast

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(levelname)s: %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

class ComprehensiveProjectTest:
    def __init__(self):
        self.base_dir = Path(__file__).parent.parent
        self.project_structure = {}
        self.test_results = {
            "project": "Anthropomorphic AI Core",
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "python_version": sys.version,
            "overall_status": "IN_PROGRESS",
            "current_stage": "1.3 - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
            "stage_progress": {},
            "project_structure": {},
            "detailed_analysis": {},
            "recommendations": [],
            "score": {
                "total_tests": 0,
                "passed_tests": 0,
                "success_rate": 0
            }
        }

    def print_header(self, message: str):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞–∑–¥–µ–ª–∞"""
        print(f"\n{'='*80}")
        print(f"üîç {message}")
        print(f"{'='*80}")

    def print_section(self, message: str):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞"""
        print(f"\n{'‚îÄ'*60}")
        print(f"üìÅ {message}")
        print(f"{'‚îÄ'*60}")

    def print_result(self, test_name: str, status: bool, details: str = "", points: int = 1):
        """–ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        icon = "‚úÖ" if status else "‚ùå"
        status_text = "–í–´–ü–û–õ–ù–ï–ù–û" if status else "–ù–ï –í–´–ü–û–õ–ù–ï–ù–û"
        print(f"{icon} {test_name}: {status_text}")
        if details:
            print(f"   üìù {details}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤
        self.test_results["score"]["total_tests"] += 1
        if status:
            self.test_results["score"]["passed_tests"] += points
        
        return status

    def scan_project_structure(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        self.print_header("üìÅ –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê")
        
        structure = {}
        excluded_dirs = {'.git', '__pycache__', '.pytest_cache', 'venv', 'env', '.env'}
        excluded_files = {'.DS_Store', '*.pyc', '*.pyo'}
        
        def scan_directory(path: Path, level=0):
            """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
            rel_path = path.relative_to(self.base_dir)
            dir_structure = {
                "type": "directory",
                "path": str(rel_path),
                "files": [],
                "subdirs": {}
            }
            
            try:
                for item in path.iterdir():
                    if item.name in excluded_dirs:
                        continue
                    if any(item.name.endswith(ext) for ext in ['.pyc', '.pyo']):
                        continue
                    
                    if item.is_dir():
                        dir_structure["subdirs"][item.name] = scan_directory(item, level + 1)
                    else:
                        file_info = {
                            "name": item.name,
                            "size": item.stat().st_size,
                            "modified": time.ctime(item.stat().st_mtime)
                        }
                        dir_structure["files"].append(file_info)
            except PermissionError:
                dir_structure["error"] = "Permission denied"
            
            return dir_structure
        
        structure = scan_directory(self.base_dir)
        self.project_structure = structure
        self.test_results["project_structure"] = structure
        
        # –í—ã–≤–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –∫–æ–Ω—Å–æ–ª—å
        self.print_section("–°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê")
        self._print_tree(structure)
        
        return True

    def _print_tree(self, structure: Dict, prefix: str = ""):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–≤–æ–¥ –¥–µ—Ä–µ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        if "path" in structure:
            print(f"{prefix}üìÅ {structure['path']}/")
        
        # –í—ã–≤–æ–¥ —Ñ–∞–π–ª–æ–≤
        for file_info in structure.get("files", []):
            print(f"{prefix}   üìÑ {file_info['name']} ({file_info['size']} bytes)")
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–≤–æ–¥ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        for dir_name, dir_structure in structure.get("subdirs", {}).items():
            self._print_tree(dir_structure, prefix + "   ")

    def test_stage_1_preparatory(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≠–¢–ê–ü–ê 1: –ü–û–î–ì–û–¢–û–í–ò–¢–ï–õ–¨–ù–´–ô"""
        self.print_header("üéØ –≠–¢–ê–ü 1: –ü–û–î–ì–û–¢–û–í–ò–¢–ï–õ–¨–ù–´–ô (–ù–ï–î–ï–õ–ò 1-2)")
        
        stage_results = {
            "status": "IN_PROGRESS",
            "tasks": {},
            "completion_percentage": 0
        }
        
        # –ó–∞–¥–∞—á–∞ 1.1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        task_1_1_results = self._test_task_1_1()
        stage_results["tasks"]["1.1"] = task_1_1_results
        
        # –ó–∞–¥–∞—á–∞ 1.2: –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        task_1_2_results = self._test_task_1_2()
        stage_results["tasks"]["1.2"] = task_1_2_results
        
        # –ó–∞–¥–∞—á–∞ 1.3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        task_1_3_results = self._test_task_1_3()
        stage_results["tasks"]["1.3"] = task_1_3_results
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —ç—Ç–∞–ø–∞
        completed_tasks = sum(1 for task in stage_results["tasks"].values() if task["status"] == "COMPLETED")
        total_tasks = len(stage_results["tasks"])
        stage_results["completion_percentage"] = (completed_tasks / total_tasks) * 100
        
        if stage_results["completion_percentage"] == 100:
            stage_results["status"] = "COMPLETED"
        elif stage_results["completion_percentage"] > 0:
            stage_results["status"] = "IN_PROGRESS"
        else:
            stage_results["status"] = "NOT_STARTED"
        
        self.test_results["stage_progress"]["stage_1"] = stage_results
        return stage_results

    def _test_task_1_1(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ó–∞–¥–∞—á–∏ 1.1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
        self.print_section("–ó–ê–î–ê–ß–ê 1.1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
        
        task_results = {
            "name": "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞",
            "status": "IN_PROGRESS",
            "subtasks": {},
            "completion_percentage": 0
        }
        
        # –ü–æ–¥–∑–∞–¥–∞—á–∞ 1.1.1: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è GitHub —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∫–∞—Ç–∞–ª–æ–≥–æ–≤
        subtask_1_1_1 = self._test_subtask_1_1_1()
        task_results["subtasks"]["1.1.1"] = subtask_1_1_1
        
        # –ü–æ–¥–∑–∞–¥–∞—á–∞ 1.1.2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ requirements.txt
        subtask_1_1_2 = self._test_subtask_1_1_2()
        task_results["subtasks"]["1.1.2"] = subtask_1_1_2
        
        # –ü–æ–¥–∑–∞–¥–∞—á–∞ 1.1.3: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏, README.md, .gitignore
        subtask_1_1_3 = self._test_subtask_1_1_3()
        task_results["subtasks"]["1.1.3"] = subtask_1_1_3
        
        # –ü–æ–¥–∑–∞–¥–∞—á–∞ 1.1.4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ –≤ .github/workflows/
        subtask_1_1_4 = self._test_subtask_1_1_4()
        task_results["subtasks"]["1.1.4"] = subtask_1_1_4
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞—á–∏
        completed_subtasks = sum(1 for subtask in task_results["subtasks"].values() if subtask["status"] == "COMPLETED")
        total_subtasks = len(task_results["subtasks"])
        task_results["completion_percentage"] = (completed_subtasks / total_subtasks) * 100
        
        if task_results["completion_percentage"] == 100:
            task_results["status"] = "COMPLETED"
        elif task_results["completion_percentage"] > 0:
            task_results["status"] = "IN_PROGRESS"
        else:
            task_results["status"] = "NOT_STARTED"
        
        return task_results

    def _test_subtask_1_1_1(self):
        """–ü–æ–¥–∑–∞–¥–∞—á–∞ 1.1.1: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è GitHub —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∫–∞—Ç–∞–ª–æ–≥–æ–≤"""
        subtask_results = {
            "name": "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–æ–≤",
            "status": "IN_PROGRESS",
            "checks": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        required_dirs = [
            "api", "core", "modules", "database", "scripts", "tests", 
            "data/configs", "utils", "docs", ".github/workflows"
        ]
        
        dir_checks = []
        for dir_path in required_dirs:
            full_path = self.base_dir / dir_path
            exists = full_path.exists()
            check_result = self.print_result(
                f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}",
                exists,
                "–ù–∞–π–¥–µ–Ω–∞" if exists else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            )
            dir_checks.append({
                "directory": dir_path,
                "exists": exists,
                "status": "PASS" if exists else "FAIL"
            })
        
        subtask_results["checks"].extend(dir_checks)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        critical_files = [
            "api/__init__.py", "api/app.py", "api/routes.py",
            "core/__init__.py", "core/config.py", "core/main.py",
            "requirements.txt", "README.md", ".gitignore"
        ]
        
        file_checks = []
        for file_path in critical_files:
            full_path = self.base_dir / file_path
            exists = full_path.exists()
            check_result = self.print_result(
                f"–§–∞–π–ª: {file_path}",
                exists,
                "–ù–∞–π–¥–µ–Ω" if exists else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            )
            file_checks.append({
                "file": file_path,
                "exists": exists,
                "status": "PASS" if exists else "FAIL"
            })
        
        subtask_results["checks"].extend(file_checks)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
        all_passed = all(check["status"] == "PASS" for check in subtask_results["checks"])
        subtask_results["status"] = "COMPLETED" if all_passed else "IN_PROGRESS"
        
        return subtask_results

    def _test_subtask_1_1_2(self):
        """–ü–æ–¥–∑–∞–¥–∞—á–∞ 1.1.2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ requirements.txt"""
        subtask_results = {
            "name": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
            "status": "IN_PROGRESS",
            "checks": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt
        requirements_file = self.base_dir / "requirements.txt"
        if requirements_file.exists():
            try:
                with open(requirements_file, 'r') as f:
                    requirements = f.readlines()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
                critical_packages = ["fastapi", "uvicorn", "sqlalchemy", "pydantic", "pydantic-settings"]
                packages_found = []
                
                for package in critical_packages:
                    found = any(package in line.lower() for line in requirements)
                    check_result = self.print_result(
                        f"–ü–∞–∫–µ—Ç –≤ requirements.txt: {package}",
                        found,
                        "–ù–∞–π–¥–µ–Ω" if found else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    )
                    packages_found.append({
                        "package": package,
                        "found": found,
                        "status": "PASS" if found else "FAIL"
                    })
                
                subtask_results["checks"].extend(packages_found)
                
                # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–π Python
                python_version_check = self._check_python_compatibility()
                subtask_results["checks"].append({
                    "check": "python_compatibility",
                    "status": "PASS" if python_version_check else "WARNING",
                    "details": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–π Python"
                })
                
            except Exception as e:
                self.print_result("–ß—Ç–µ–Ω–∏–µ requirements.txt", False, f"–û—à–∏–±–∫–∞: {e}")
                subtask_results["checks"].append({
                    "check": "read_requirements",
                    "status": "FAIL",
                    "error": str(e)
                })
        else:
            self.print_result("–§–∞–π–ª requirements.txt", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            subtask_results["checks"].append({
                "check": "requirements_exists",
                "status": "FAIL",
                "error": "–§–∞–π–ª requirements.txt –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
        installed_checks = []
        for package in ["fastapi", "uvicorn", "sqlalchemy", "pydantic"]:
            try:
                version = importlib.metadata.version(package)
                check_result = self.print_result(
                    f"–ü–∞–∫–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {package}",
                    True,
                    f"–í–µ—Ä—Å–∏—è: {version}"
                )
                installed_checks.append({
                    "package": package,
                    "installed": True,
                    "version": version,
                    "status": "PASS"
                })
            except importlib.metadata.PackageNotFoundError:
                check_result = self.print_result(
                    f"–ü–∞–∫–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {package}",
                    False,
                    "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                )
                installed_checks.append({
                    "package": package,
                    "installed": False,
                    "status": "FAIL"
                })
        
        subtask_results["checks"].extend(installed_checks)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
        all_passed = all(check.get("status") == "PASS" for check in subtask_results["checks"])
        subtask_results["status"] = "COMPLETED" if all_passed else "IN_PROGRESS"
        
        return subtask_results

    def _check_python_compatibility(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–π Python"""
        local_version = sys.version_info
        render_version = (3, 13, 4)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ª–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ —Å—Ç–∞—Ä—à–µ –≤–µ—Ä—Å–∏–∏ –Ω–∞ Render
        compatible = local_version >= (3, 9)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è
        
        if not compatible:
            self.print_result(
                "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–µ—Ä—Å–∏–π Python", 
                False, 
                f"–õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è {local_version[0]}.{local_version[1]} –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å Render 3.13.4"
            )
        else:
            self.print_result(
                "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–µ—Ä—Å–∏–π Python", 
                True, 
                f"–õ–æ–∫–∞–ª—å–Ω–∞—è {local_version[0]}.{local_version[1]}.{local_version[2]} ‚Üí Render 3.13.4"
            )
        
        return compatible

    def _test_subtask_1_1_3(self):
        """–ü–æ–¥–∑–∞–¥–∞—á–∞ 1.1.3: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏, README.md, .gitignore"""
        subtask_results = {
            "name": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
            "status": "IN_PROGRESS",
            "checks": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ README.md
        readme_file = self.base_dir / "README.md"
        if readme_file.exists():
            readme_size = readme_file.stat().st_size
            check_result = self.print_result(
                "–§–∞–π–ª README.md",
                readme_size > 100,  # –ú–∏–Ω–∏–º—É–º 100 –±–∞–π—Ç
                f"–†–∞–∑–º–µ—Ä: {readme_size} –±–∞–π—Ç"
            )
            subtask_results["checks"].append({
                "file": "README.md",
                "exists": True,
                "size": readme_size,
                "status": "PASS" if readme_size > 100 else "FAIL"
            })
        else:
            self.print_result("–§–∞–π–ª README.md", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            subtask_results["checks"].append({
                "file": "README.md",
                "exists": False,
                "status": "FAIL"
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore
        gitignore_file = self.base_dir / ".gitignore"
        if gitignore_file.exists():
            try:
                content = gitignore_file.read_text()
                lines = [line.strip() for line in content.split('\n') 
                        if line.strip() and not line.strip().startswith('#')]
                
                critical_patterns = [".env", "__pycache__", "*.pyc", "instance/", ".pytest_cache"]
                missing_patterns = [pattern for pattern in critical_patterns 
                                  if not any(pattern in line for line in lines)]
                
                check_result = self.print_result(
                    "–§–∞–π–ª .gitignore",
                    len(missing_patterns) == 0,
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {missing_patterns}" if missing_patterns else "–í—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
                )
                subtask_results["checks"].append({
                    "file": ".gitignore",
                    "exists": True,
                    "complete": len(missing_patterns) == 0,
                    "missing_patterns": missing_patterns,
                    "status": "PASS" if len(missing_patterns) == 0 else "FAIL"
                })
            except Exception as e:
                self.print_result("–ß—Ç–µ–Ω–∏–µ .gitignore", False, f"–û—à–∏–±–∫–∞: {e}")
                subtask_results["checks"].append({
                    "file": ".gitignore",
                    "exists": True,
                    "status": "FAIL",
                    "error": str(e)
                })
        else:
            self.print_result("–§–∞–π–ª .gitignore", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            subtask_results["checks"].append({
                "file": ".gitignore",
                "exists": False,
                "status": "FAIL"
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ LICENSE
        license_files = ["LICENSE", "LICENSE.md", "LICENSE.txt"]
        license_found = False
        for license_file in license_files:
            if (self.base_dir / license_file).exists():
                license_found = True
                break
        
        check_result = self.print_result(
            "–§–∞–π–ª –ª–∏—Ü–µ–Ω–∑–∏–∏",
            license_found,
            "–ù–∞–π–¥–µ–Ω" if license_found else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        )
        subtask_results["checks"].append({
            "check": "license",
            "exists": license_found,
            "status": "PASS" if license_found else "FAIL"
        })
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
        all_passed = all(check.get("status") == "PASS" for check in subtask_results["checks"])
        subtask_results["status"] = "COMPLETED" if all_passed else "IN_PROGRESS"
        
        return subtask_results

    def _test_subtask_1_1_4(self):
        """–ü–æ–¥–∑–∞–¥–∞—á–∞ 1.1.4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ –≤ .github/workflows/"""
        subtask_results = {
            "name": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD",
            "status": "IN_PROGRESS",
            "checks": []
        }
        
        workflows_dir = self.base_dir / ".github" / "workflows"
        
        if workflows_dir.exists():
            workflow_files = list(workflows_dir.glob("*.yml")) + list(workflows_dir.glob("*.yaml"))
            
            if workflow_files:
                for workflow_file in workflow_files:
                    check_result = self.print_result(
                        f"Workflow —Ñ–∞–π–ª: {workflow_file.name}",
                        True,
                        f"–ù–∞–π–¥–µ–Ω"
                    )
                    subtask_results["checks"].append({
                        "workflow": workflow_file.name,
                        "exists": True,
                        "status": "PASS"
                    })
            else:
                self.print_result("Workflow —Ñ–∞–π–ª—ã", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ .github/workflows/")
                subtask_results["checks"].append({
                    "check": "workflow_files",
                    "exists": False,
                    "status": "FAIL"
                })
        else:
            self.print_result("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è .github/workflows", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            subtask_results["checks"].append({
                "check": "workflows_dir",
                "exists": False,
                "status": "FAIL"
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö workflow
        expected_workflows = ["ci-cd.yml", "deploy.yml"]
        for workflow in expected_workflows:
            workflow_path = workflows_dir / workflow
            exists = workflow_path.exists()
            check_result = self.print_result(
                f"–û–∂–∏–¥–∞–µ–º—ã–π workflow: {workflow}",
                exists,
                "–ù–∞–π–¥–µ–Ω" if exists else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            )
            subtask_results["checks"].append({
                "expected_workflow": workflow,
                "exists": exists,
                "status": "PASS" if exists else "FAIL"
            })
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
        all_passed = all(check.get("status") == "PASS" for check in subtask_results["checks"])
        subtask_results["status"] = "COMPLETED" if all_passed else "IN_PROGRESS"
        
        return subtask_results

    def _test_task_1_2(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ó–∞–¥–∞—á–∏ 1.2: –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
        self.print_section("–ó–ê–î–ê–ß–ê 1.2: –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
        
        task_results = {
            "name": "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
            "status": "IN_PROGRESS",
            "subtasks": {},
            "completion_percentage": 0
        }
        
        # –ü–æ–¥–∑–∞–¥–∞—á–∞ 1.2.1: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints
        subtask_1_2_1 = self._test_subtask_1_2_1()
        task_results["subtasks"]["1.2.1"] = subtask_1_2_1
        
        # –ü–æ–¥–∑–∞–¥–∞—á–∞ 1.2.2: –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        subtask_1_2_2 = self._test_subtask_1_2_2()
        task_results["subtasks"]["1.2.2"] = subtask_1_2_2
        
        # –ü–æ–¥–∑–∞–¥–∞—á–∞ 1.2.3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        subtask_1_2_3 = self._test_subtask_1_2_3()
        task_results["subtasks"]["1.2.3"] = subtask_1_2_3
        
        # –ü–æ–¥–∑–∞–¥–∞—á–∞ 1.2.4: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –¥–ª—è –º–æ–¥—É–ª–µ–π
        subtask_1_2_4 = self._test_subtask_1_2_4()
        task_results["subtasks"]["1.2.4"] = subtask_1_2_4
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞—á–∏
        completed_subtasks = sum(1 for subtask in task_results["subtasks"].values() if subtask["status"] == "COMPLETED")
        total_subtasks = len(task_results["subtasks"])
        task_results["completion_percentage"] = (completed_subtasks / total_subtasks) * 100
        
        if task_results["completion_percentage"] == 100:
            task_results["status"] = "COMPLETED"
        elif task_results["completion_percentage"] > 0:
            task_results["status"] = "IN_PROGRESS"
        else:
            task_results["status"] = "NOT_STARTED"
        
        return task_results

    def _test_subtask_1_2_1(self):
        """–ü–æ–¥–∑–∞–¥–∞—á–∞ 1.2.1: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        subtask_results = {
            "name": "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints",
            "status": "IN_PROGRESS",
            "checks": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ API
        api_files = [
            "api/__init__.py", "api/app.py", "api/routes.py", 
            "api/models.py", "api/dependencies.py", "api/middleware.py"
        ]
        
        for api_file in api_files:
            file_path = self.base_dir / api_file
            exists = file_path.exists()
            check_result = self.print_result(
                f"API —Ñ–∞–π–ª: {api_file}",
                exists,
                "–ù–∞–π–¥–µ–Ω" if exists else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            )
            subtask_results["checks"].append({
                "file": api_file,
                "exists": exists,
                "status": "PASS" if exists else "FAIL"
            })
        
        # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: AST-–∞–Ω–∞–ª–∏–∑ routes.py –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        routes_file = self.base_dir / "api" / "routes.py"
        if routes_file.exists():
            try:
                content = routes_file.read_text()
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º AST –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                expected_endpoints = [
                    "/chat", "/state", "/health", "/mood/update",
                    "/memory/store", "/memory/recall", "/personality/update", "/modules", "/"
                ]
                
                endpoints_found = self._analyze_routes_with_ast(content, expected_endpoints)
                subtask_results["checks"].extend(endpoints_found)
                
            except Exception as e:
                self.print_result("AST –∞–Ω–∞–ª–∏–∑ routes.py", False, f"–û—à–∏–±–∫–∞: {e}")
                # –†–µ–∑–µ—Ä–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ regex
                endpoints_found = self._analyze_routes_with_regex(content, expected_endpoints)
                subtask_results["checks"].extend(endpoints_found)
        
        # –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò API
        if self._test_api_functionality():
            check_result = self.print_result(
                "API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç",
                True,
                "–í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –æ—Ç–≤–µ—á–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
            )
            subtask_results["checks"].append({
                "check": "api_functionality",
                "status": "PASS"
            })
        else:
            check_result = self.print_result(
                "API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç",
                False,
                "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç - –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python api/app.py"
            )
            subtask_results["checks"].append({
                "check": "api_functionality", 
                "status": "FAIL"
            })
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
        all_passed = all(check.get("status") == "PASS" for check in subtask_results["checks"])
        subtask_results["status"] = "COMPLETED" if all_passed else "IN_PROGRESS"
        
        return subtask_results

    def _analyze_routes_with_ast(self, content: str, expected_endpoints: List[str]) -> List[Dict]:
        """AST-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        endpoints_found = []
        
        try:
            tree = ast.parse(content)
            
            for node in ast.walk(tree):
                if isinstance(node, ast.FunctionDef):
                    for decorator in node.decorator_list:
                        if isinstance(decorator, ast.Call):
                            # –ò—â–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã router
                            if (isinstance(decorator.func, ast.Attribute) and 
                                hasattr(decorator.func, 'attr') and
                                decorator.func.attr in ['get', 'post', 'put', 'delete']):
                                
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
                                for arg in decorator.args:
                                    if isinstance(arg, ast.Str):
                                        endpoint = arg.s
                                        for expected in expected_endpoints:
                                            if endpoint == expected or endpoint.startswith(expected):
                                                check_result = self.print_result(
                                                    f"API —ç–Ω–¥–ø–æ–∏–Ω—Ç (AST): {expected}",
                                                    True,
                                                    f"–ù–∞–π–¥–µ–Ω –∫–∞–∫: {endpoint}"
                                                )
                                                endpoints_found.append({
                                                    "endpoint": expected,
                                                    "implemented": True,
                                                    "method": "AST",
                                                    "status": "PASS"
                                                })
                                                expected_endpoints.remove(expected)
                                                break
        except Exception as e:
            self.print_result("AST –∞–Ω–∞–ª–∏–∑", False, f"–û—à–∏–±–∫–∞ AST: {e}")
        
        # –û—Ç–º–µ—á–∞–µ–º –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        for endpoint in expected_endpoints:
            check_result = self.print_result(
                f"API —ç–Ω–¥–ø–æ–∏–Ω—Ç: {endpoint}",
                False,
                "–ù–µ –Ω–∞–π–¥–µ–Ω –≤ routes.py"
            )
            endpoints_found.append({
                "endpoint": endpoint,
                "implemented": False,
                "status": "FAIL"
            })
        
        return endpoints_found

    def _analyze_routes_with_regex(self, content: str, expected_endpoints: List[str]) -> List[Dict]:
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é regex"""
        endpoints_found = []
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        clean_content = '\n'.join([line.split('#')[0] for line in content.split('\n')])
        
        for endpoint in expected_endpoints:
            # –ì–∏–±–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–∏—Å–∫–∞
            patterns = [
                f'@.*\\(.*["\\']{endpoint}["\\']',  # @router.post("/chat"
                f'@.*\\(.*["\\']{re.escape(endpoint)}["\\']',
                f'["\\']{endpoint}["\\']',  # –ü—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–º
                f'"{re.escape(endpoint)}"',
                f"'{re.escape(endpoint)}'"
            ]
            
            found = any(re.search(pattern, clean_content) for pattern in patterns)
            
            check_result = self.print_result(
                f"API —ç–Ω–¥–ø–æ–∏–Ω—Ç (regex): {endpoint}",
                found,
                "–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω" if found else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            )
            endpoints_found.append({
                "endpoint": endpoint,
                "implemented": found,
                "method": "regex",
                "status": "PASS" if found else "FAIL"
            })
        
        return endpoints_found

    def _test_api_functionality(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            test_endpoints = [
                ("/health", "GET"),
                ("/", "GET"), 
                ("/state", "GET")
            ]
            
            for endpoint, method in test_endpoints:
                if not self._test_single_endpoint(endpoint, method):
                    return False
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
            return False

    def _test_single_endpoint(self, endpoint: str, method: str) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
        try:
            url = f"http://localhost:8000{endpoint}"
            req = urllib.request.Request(url, method=method)
            with urllib.request.urlopen(req, timeout=10) as response:
                return response.status == 200
        except Exception as e:
            return False

    def _test_subtask_1_2_2(self):
        """–ü–æ–¥–∑–∞–¥–∞—á–∞ 1.2.2: –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        subtask_results = {
            "name": "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã –ë–î",
            "status": "IN_PROGRESS",
            "checks": []
        }
        
        # [–û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        
        return subtask_results

    def _test_subtask_1_2_3(self):
        """–ü–æ–¥–∑–∞–¥–∞—á–∞ 1.2.3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        subtask_results = {
            "name": "–§–æ—Ä–º–∞—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤",
            "status": "IN_PROGRESS", 
            "checks": []
        }
        
        # [–û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...]
        
        return subtask_results

    def _test_subtask_1_2_4(self):
        """–ü–æ–¥–∑–∞–¥–∞—á–∞ 1.2.4: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –¥–ª—è –º–æ–¥—É–ª–µ–π"""
        subtask_results = {
            "name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π",
            "status": "IN_PROGRESS",
            "checks": []
        }
        
        # [–û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...]
        
        return subtask_results

    def _test_task_1_3(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ó–∞–¥–∞—á–∏ 1.3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        self.print_section("–ó–ê–î–ê–ß–ê 1.3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        
        task_results = {
            "name": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
            "status": "IN_PROGRESS",
            "subtasks": {},
            "completion_percentage": 0
        }
        
        # –ü–æ–¥–∑–∞–¥–∞—á–∞ 1.3.1: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Render
        subtask_1_3_1 = self._test_subtask_1_3_1()
        task_results["subtasks"]["1.3.1"] = subtask_1_3_1
        
        # –ü–æ–¥–∑–∞–¥–∞—á–∞ 1.3.2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        subtask_1_3_2 = self._test_subtask_1_3_2()
        task_results["subtasks"]["1.3.2"] = subtask_1_3_2
        
        # –ü–æ–¥–∑–∞–¥–∞—á–∞ 1.3.3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –¥–µ–ø–ª–æ—è
        subtask_1_3_3 = self._test_subtask_1_3_3()
        task_results["subtasks"]["1.3.3"] = subtask_1_3_3
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞—á–∏
        completed_subtasks = sum(1 for subtask in task_results["subtasks"].values() if subtask["status"] == "COMPLETED")
        total_subtasks = len(task_results["subtasks"])
        task_results["completion_percentage"] = (completed_subtasks / total_subtasks) * 100
        
        if task_results["completion_percentage"] == 100:
            task_results["status"] = "COMPLETED"
        elif task_results["completion_percentage"] > 0:
            task_results["status"] = "IN_PROGRESS"
        else:
            task_results["status"] = "NOT_STARTED"
        
        return task_results

    def _test_subtask_1_3_1(self):
        """–ü–æ–¥–∑–∞–¥–∞—á–∞ 1.3.1: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Render"""
        subtask_results = {
            "name": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Render",
            "status": "IN_PROGRESS",
            "checks": []
        }
        
        # [–û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...]
        
        return subtask_results

    def _test_subtask_1_3_2(self):
        """–ü–æ–¥–∑–∞–¥–∞—á–∞ 1.3.2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        subtask_results = {
            "name": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è", 
            "status": "IN_PROGRESS",
            "checks": []
        }
        
        # [–û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...]
        
        return subtask_results

    def _test_subtask_1_3_3(self):
        """–ü–æ–¥–∑–∞–¥–∞—á–∞ 1.3.3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –¥–µ–ø–ª–æ—è"""
        subtask_results = {
            "name": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –¥–µ–ø–ª–æ—è",
            "status": "IN_PROGRESS",
            "checks": []
        }
        
        # [–û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...]
        
        return subtask_results

    def _test_api_availability(self, port=8000):
        """–£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —Å–µ—Ä–≤–µ—Ä–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—É—Ç—è–º–∏ –∏ –ø–æ—Ä—Ç–∞–º–∏"""
        ports_to_test = [8000, 8080, 5000]
        api_paths = ["/health", "/api/health", "/api/v1/health", "/"]
        
        for port in ports_to_test:
            for path in api_paths:
                try:
                    req = urllib.request.Request(f"http://localhost:{port}{path}")
                    with urllib.request.urlopen(req, timeout=5) as response:
                        if response.status == 200:
                            self.print_result(
                                f"API —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port}",
                                True,
                                f"–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ {path}"
                            )
                            return True
                except (urllib.error.URLError, socket.timeout, ConnectionRefusedError):
                    continue
        return False

    def generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.print_header("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ü–†–û–ï–ö–¢–£")
        
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ Stage 1
        stage_1 = self.test_results["stage_progress"].get("stage_1", {})
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
        recommendations.extend([
            "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:",
            "üîß –í routes.py –∑–∞–º–µ–Ω–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –Ω–∞ –≤—ã–∑–æ–≤—ã —Ä–µ–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π",
            "üêç –°–æ–∑–¥–∞–π—Ç–µ requirements-compatible.txt —Å –≤–µ—Ä—Å–∏—è–º–∏ –¥–ª—è Python 3.13.4",
            "üîå –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: python api/app.py",
            "üóÑÔ∏è –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL –≤ –ø–∞–Ω–µ–ª–∏ Render –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ DATABASE_URL"
        ])
        
        # –ó–∞–¥–∞—á–∞ 1.2
        task_1_2 = stage_1.get("tasks", {}).get("1.2", {})
        if task_1_2.get("status") != "COMPLETED":
            recommendations.extend([
                "üèóÔ∏è –ó–ê–î–ê–ß–ê 1.2 - –°–†–û–ß–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:",
                "üìù –û–±–Ω–æ–≤–∏—Ç–µ api/routes.py - —É–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏",
                "üîó –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å core/orchestrator.py",
                "üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —á–µ—Ä–µ–∑ curl –∏–ª–∏ Postman",
                "üìä –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ /state –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"
            ])
        
        # –ó–∞–¥–∞—á–∞ 1.3
        task_1_3 = stage_1.get("tasks", {}).get("1.3", {})
        if task_1_3.get("status") != "COMPLETED":
            recommendations.extend([
                "‚öôÔ∏è –ó–ê–î–ê–ß–ê 1.3 - –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê:",
                "üêç –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.13.4 –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏",
                "üì¶ –°–æ–∑–¥–∞–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å Python 3.13.4: python3.13 -m venv venv313",
                "üîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ: source venv313/bin/activate && pip install -r requirements.txt",
                "‚úÖ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫"
            ])
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–µ—Ä—Å–∏—è–º Python
        recommendations.extend([
            "üêç –í–ï–†–°–ò–ò PYTHON - –†–ï–®–ï–ù–ò–ï:",
            "1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª requirements-compatible.txt —Å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏:",
            "   fastapi==0.104.1",
            "   uvicorn==0.24.0", 
            "   sqlalchemy==2.0.23",
            "   pydantic==2.5.0",
            "   pydantic-settings==2.1.0",
            "2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É: pip install -r requirements-compatible.txt",
            "3. –û–±–Ω–æ–≤–∏—Ç–µ runtime.txt: python-3.13.4",
            "4. –í render.yaml —É–∫–∞–∂–∏—Ç–µ: python -m pip install -r requirements-compatible.txt"
        ])
        
        # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è routes.py
        recommendations.extend([
            "üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø routes.py:",
            "1. –ó–∞–º–µ–Ω–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –≤—ã–∑–æ–≤—ã orchestrator",
            "2. –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π",
            "3. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –Ω–∞—Å—Ç–æ—è—â—É—é –ª–æ–≥–∏–∫—É –¥–ª—è /memory/store –∏ /memory/recall",
            "4. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ —Å database/models.py –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è"
        ])
        
        self.test_results["recommendations"] = recommendations
        
        # –í—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å
        for i, recommendation in enumerate(recommendations, 1):
            print(f"{i}. {recommendation}")
        
        return recommendations

    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        self.print_header("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ü–†–û–ï–ö–¢–ê ANTHROPOMORPHIC AI - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø")
        print(f"üìÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {self.test_results['timestamp']}")
        print(f"üêç –í–µ—Ä—Å–∏—è Python: {sys.version.split()[0]}")
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {self.base_dir}")
        
        # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
        self.scan_project_structure()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Stage 1
        stage_1_results = self.test_stage_1_preparatory()
        
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        total_tests = self.test_results["score"]["total_tests"]
        passed_tests = self.test_results["score"]["passed_tests"]
        
        if total_tests > 0:
            success_rate = (passed_tests / total_tests) * 100
        else:
            success_rate = 0
        
        self.test_results["score"]["success_rate"] = round(success_rate, 2)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        self.generate_recommendations()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.print_header("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
        
        print(f"üèÅ –û–ë–©–ò–ô –°–¢–ê–¢–£–°: {self.test_results['overall_status']}")
        print(f"üéØ –¢–ï–ö–£–©–ò–ô –≠–¢–ê–ü: {self.test_results['current_stage']}")
        print(f"üìà –ü–†–û–ì–†–ï–°–°: {self.test_results['score']['success_rate']}%")
        print(f"‚úÖ –í–´–ü–û–õ–ù–ï–ù–û –¢–ï–°–¢–û–í: {self.test_results['score']['passed_tests']}/{self.test_results['score']['total_tests']}")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ Stage 1
        stage_1 = self.test_results["stage_progress"]["stage_1"]
        print(f"\nüéØ –≠–¢–ê–ü 1 - –ü–û–î–ì–û–¢–û–í–ò–¢–ï–õ–¨–ù–´–ô: {stage_1['status']}")
        print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {stage_1['completion_percentage']}%")
        
        for task_name, task in stage_1["tasks"].items():
            print(f"   üìã {task_name}: {task['name']} - {task['status']} ({task['completion_percentage']}%)")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        report_file = self.base_dir / "comprehensive_project_report_fixed.json"
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(self.test_results, f, indent=2, ensure_ascii=False, default=str)
            print(f"\nüíæ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        if stage_1["status"] == "COMPLETED":
            self.test_results["overall_status"] = "STAGE_1_COMPLETED"
            print("\nüéâ –ü–û–ó–î–†–ê–í–õ–Ø–Æ! –≠–¢–ê–ü 1 –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        else:
            self.test_results["overall_status"] = "IN_PROGRESS"
            print("\nüîß –ü–†–û–ï–ö–¢ –í –†–ê–ó–†–ê–ë–û–¢–ö–ï. –í–´–ü–û–õ–ù–Ø–ô–¢–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ó–ê–í–ï–†–®–ï–ù–ò–Ø –≠–¢–ê–ü–ê 1.")
        
        return self.test_results["overall_status"] == "STAGE_1_COMPLETED"

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê –ü–†–û–ï–ö–¢–ê ANTHROPOMORPHIC AI")
    print("–≠—Ç–∞ –≤–µ—Ä—Å–∏—è –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é Python")
    
    try:
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    except KeyboardInterrupt:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    
    tester = ComprehensiveProjectTest()
    success = tester.run_comprehensive_test()
    
    # –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è CI/CD
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()