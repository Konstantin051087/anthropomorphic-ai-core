# scripts/comprehensive_project_test-8.0.py
#!/usr/bin/env python3
"""
–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –í–°–ï–ì–û –ü–†–û–ï–ö–¢–ê ANTHROPOMORPHIC AI - –í–ï–†–°–ò–Ø 8.0
–†–ê–î–ò–ö–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –≠–ù–î–ü–û–ò–ù–¢–û–í
"""

import os
import sys
import json
import logging
import importlib.metadata
import subprocess
from pathlib import Path
from typing import Dict, List, Tuple, Any, Set
import urllib.request
import urllib.error
import time
import socket
import re
import ast

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(levelname)s: %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

class ComprehensiveProjectTest:
    def __init__(self):
        self.base_dir = Path(__file__).parent.parent
        self.project_structure = {}
        self.test_results = {
            "project": "Anthropomorphic AI Core",
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "python_version": sys.version,
            "overall_status": "IN_PROGRESS",
            "current_stage": "1.3 - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
            "stage_progress": {},
            "project_structure": {},
            "detailed_analysis": {},
            "recommendations": [],
            "score": {
                "total_tests": 0,
                "passed_tests": 0,
                "success_rate": 0
            }
        }

    def print_header(self, message: str):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞–∑–¥–µ–ª–∞"""
        print(f"\n{'='*80}")
        print(f"üîç {message}")
        print(f"{'='*80}")

    def print_section(self, message: str):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞"""
        print(f"\n{'‚îÄ'*60}")
        print(f"üìÅ {message}")
        print(f"{'‚îÄ'*60}")

    def print_result(self, test_name: str, status: bool, details: str = "", points: int = 1):
        """–ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        icon = "‚úÖ" if status else "‚ùå"
        status_text = "–í–´–ü–û–õ–ù–ï–ù–û" if status else "–ù–ï –í–´–ü–û–õ–ù–ï–ù–û"
        print(f"{icon} {test_name}: {status_text}")
        if details:
            print(f"   üìù {details}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤
        self.test_results["score"]["total_tests"] += 1
        if status:
            self.test_results["score"]["passed_tests"] += points
        
        return status

    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ –¥–æ _test_subtask_1_2_1)

    def _test_subtask_1_2_1(self):
        """–ü–æ–¥–∑–∞–¥–∞—á–∞ 1.2.1: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints - –†–ê–î–ò–ö–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï"""
        subtask_results = {
            "name": "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints",
            "status": "IN_PROGRESS",
            "checks": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ API
        api_files = [
            "api/__init__.py", "api/app.py", "api/routes.py", 
            "api/models.py", "api/dependencies.py", "api/middleware.py"
        ]
        
        for api_file in api_files:
            file_path = self.base_dir / api_file
            exists = file_path.exists()
            check_result = self.print_result(
                f"API —Ñ–∞–π–ª: {api_file}",
                exists,
                "–ù–∞–π–¥–µ–Ω" if exists else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            )
            subtask_results["checks"].append({
                "file": api_file,
                "exists": exists,
                "status": "PASS" if exists else "FAIL"
            })
        
        # –†–ê–î–ò–ö–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞–¥–µ–∂–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        routes_file = self.base_dir / "api" / "routes.py"
        if routes_file.exists():
            try:
                content = routes_file.read_text()
                
                # –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
                endpoints_found = self._reliable_endpoint_detection(content)
                
                # –û–∂–∏–¥–∞–µ–º—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
                expected_endpoints = [
                    "/chat", "/state", "/health", "/mood/update",
                    "/memory/store", "/memory/recall", "/personality/update", 
                    "/modules", "/", "/system/info"
                ]
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
                for expected in expected_endpoints:
                    found = False
                    details = ""
                    
                    for found_ep in endpoints_found:
                        if (found_ep["endpoint"] == expected or 
                            found_ep["endpoint"].startswith(expected) or
                            expected in found_ep["endpoint"]):
                            found = True
                            details = f"–ù–∞–π–¥–µ–Ω –∫–∞–∫: {found_ep['endpoint']} ({found_ep['method']})"
                            break
                    
                    check_result = self.print_result(
                        f"API —ç–Ω–¥–ø–æ–∏–Ω—Ç: {expected}",
                        found,
                        details if found else "–ù–µ –Ω–∞–π–¥–µ–Ω –≤ routes.py"
                    )
                    subtask_results["checks"].append({
                        "endpoint": expected,
                        "implemented": found,
                        "status": "PASS" if found else "FAIL"
                    })
                
            except Exception as e:
                self.print_result("–ê–Ω–∞–ª–∏–∑ routes.py", False, f"–û—à–∏–±–∫–∞: {e}")
                subtask_results["checks"].append({
                    "check": "analyze_routes",
                    "status": "FAIL",
                    "error": str(e)
                })
        
        # –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò API
        if self._test_api_functionality():
            check_result = self.print_result(
                "API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç",
                True,
                "–í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –æ—Ç–≤–µ—á–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
            )
            subtask_results["checks"].append({
                "check": "api_functionality",
                "status": "PASS"
            })
        else:
            check_result = self.print_result(
                "API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç",
                False,
                "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç - –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python api/app.py"
            )
            subtask_results["checks"].append({
                "check": "api_functionality", 
                "status": "FAIL"
            })
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏
        all_passed = all(check.get("status") == "PASS" for check in subtask_results["checks"])
        subtask_results["status"] = "COMPLETED" if all_passed else "IN_PROGRESS"
        
        return subtask_results

    def _reliable_endpoint_detection(self, content: str) -> List[Dict]:
        """–ù–∞–¥–µ–∂–Ω–æ–µ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        endpoints = []
        
        # –£—Ä–æ–≤–µ–Ω—å 1: –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π)
        endpoints.extend(self._simple_text_search(content))
        
        # –£—Ä–æ–≤–µ–Ω—å 2: Regex –ø–æ–∏—Å–∫
        endpoints.extend(self._regex_search(content))
        
        # –£—Ä–æ–≤–µ–Ω—å 3: AST –∞–Ω–∞–ª–∏–∑
        endpoints.extend(self._ast_search(content))
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_endpoints = []
        seen = set()
        for ep in endpoints:
            key = (ep["method"], ep["endpoint"])
            if key not in seen:
                seen.add(key)
                unique_endpoints.append(ep)
        
        return unique_endpoints

    def _simple_text_search(self, content: str) -> List[Dict]:
        """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        endpoints = []
        
        # –ò—â–µ–º –æ—á–µ–≤–∏–¥–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        lines = content.split('\n')
        for i, line in enumerate(lines):
            line_clean = line.strip()
            
            # –ü–æ–∏—Å–∫ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ router
            if '@router.' in line_clean and ('("/' in line_clean or "('/" in line_clean):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–æ–¥ –∏ –ø—É—Ç—å
                if 'get(' in line_clean:
                    method = 'GET'
                elif 'post(' in line_clean:
                    method = 'POST' 
                elif 'put(' in line_clean:
                    method = 'PUT'
                elif 'delete(' in line_clean:
                    method = 'DELETE'
                else:
                    method = 'UNKNOWN'
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å
                path_match = re.search(r'\(["\']([^"\']+)["\']', line_clean)
                if path_match:
                    path = path_match.group(1)
                    endpoints.append({
                        "method": method,
                        "endpoint": path,
                        "source": "text_search",
                        "line": i + 1
                    })
        
        return endpoints

    def _regex_search(self, content: str) -> List[Dict]:
        """Regex –ø–æ–∏—Å–∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        endpoints = []
        
        patterns = [
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: @router.get("/path")
            r'@router\.(get|post|put|delete)\(\s*["\']([^"\']+)["\']',
            # –° –ø—Ä–æ–±–µ–ª–∞–º–∏: @router.get( "/path" )
            r'@router\.(get|post|put|delete)\(\s*["\']([^"\']+)["\']\s*\)',
            # –° –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: @router.get("/path", response_model=X)
            r'@router\.(get|post|put|delete)\([^)]*["\']([^"\']+)["\'][^)]*\)',
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, content, re.MULTILINE | re.IGNORECASE)
            for method, endpoint in matches:
                endpoints.append({
                    "method": method.upper(),
                    "endpoint": endpoint,
                    "source": "regex",
                    "pattern": pattern
                })
        
        return endpoints

    def _ast_search(self, content: str) -> List[Dict]:
        """AST –∞–Ω–∞–ª–∏–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        endpoints = []
        
        try:
            tree = ast.parse(content)
            
            for node in ast.walk(tree):
                if isinstance(node, ast.FunctionDef):
                    for decorator in node.decorator_list:
                        if isinstance(decorator, ast.Call):
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤—ã–∑–æ–≤ router –º–µ—Ç–æ–¥–∞
                            if (isinstance(decorator.func, ast.Attribute) and
                                hasattr(decorator.func, 'attr') and
                                decorator.func.attr in ['get', 'post', 'put', 'delete']):
                                
                                method = decorator.func.attr.upper()
                                
                                # –ò—â–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã (–ø—É—Ç–∏)
                                for arg in decorator.args:
                                    endpoint_path = None
                                    
                                    # Python < 3.8
                                    if isinstance(arg, ast.Str):
                                        endpoint_path = arg.s
                                    # Python >= 3.8  
                                    elif (hasattr(ast, 'Constant') and 
                                          isinstance(arg, ast.Constant) and 
                                          isinstance(arg.value, str)):
                                        endpoint_path = arg.value
                                    
                                    if endpoint_path:
                                        endpoints.append({
                                            "method": method,
                                            "endpoint": endpoint_path,
                                            "source": "ast",
                                            "function": node.name
                                        })
        except Exception as e:
            logger.debug(f"AST –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è: {e}")
        
        return endpoints

    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –í–ï–†–°–ò–ò 8.0 –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê")
    print("–†–ê–î–ò–ö–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –≠–ù–î–ü–û–ò–ù–¢–û–í")
    
    try:
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    except KeyboardInterrupt:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    
    tester = ComprehensiveProjectTest()
    success = tester.run_comprehensive_test()
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()