# scripts/diagnose_endpoints_fixed.py
#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –≠–ù–î–ü–û–ò–ù–¢–û–í
"""

import re
import ast
import json
from pathlib import Path

def analyze_routes_file():
    """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ routes.py —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
    routes_file = Path("api/routes.py")
    
    if not routes_file.exists():
        print("‚ùå –§–∞–π–ª routes.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    content = routes_file.read_text()
    
    print("üîç –ê–ù–ê–õ–ò–ó routes.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø")
    print("=" * 80)
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –†–ï–ì–£–õ–Ø–†–ù–´–ï –í–´–†–ê–ñ–ï–ù–ò–Ø
    router_patterns = [
        # –§–æ—Ä–º–∞—Ç: @router.get("/path")
        r'@router\.(get|post|put|delete)\(\s*"([^"]+)"',
        # –§–æ—Ä–º–∞—Ç: @router.get('/path')
        r"@router\.(get|post|put|delete)\(\s*'([^']+)'",
    ]
    
    found_endpoints = []
    
    for pattern in router_patterns:
        matches = re.finditer(pattern, content, re.MULTILINE)
        for match in matches:
            method = match.group(1).upper()
            endpoint = match.group(2)
            found_endpoints.append({
                "method": method,
                "endpoint": endpoint,
                "line": content[:match.start()].count('\n') + 1
            })
    
    # –í—ã–≤–æ–¥ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    print("üìã –ù–ê–ô–î–ï–ù–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´:")
    for ep in found_endpoints:
        print(f"  {ep['method']} {ep['endpoint']} (—Å—Ç—Ä–æ–∫–∞ {ep['line']})")
    
    # –û–∂–∏–¥–∞–µ–º—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    expected_endpoints = [
        "/chat", "/state", "/health", "/mood/update",
        "/memory/store", "/memory/recall", "/personality/update",
        "/modules", "/", "/system/info"
    ]
    
    print("\nüéØ –°–†–ê–í–ù–ï–ù–ò–ï –° –û–ñ–ò–î–ê–ï–ú–´–ú–ò:")
    matches_found = 0
    for expected in expected_endpoints:
        found = any(expected == ep["endpoint"] for ep in found_endpoints)
        status = "‚úÖ" if found else "‚ùå"
        if found: matches_found += 1
        print(f"  {status} {expected}")
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: {matches_found}/{len(expected_endpoints)} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è router
    if "router = APIRouter()" in content:
        print("‚úÖ Router –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    else:
        print("‚ùå Router –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    return found_endpoints

def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã API"""
    print("\nüåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API:")
    
    import urllib.request
    import urllib.error
    import json
    
    endpoints_to_test = [
        ("/", "GET", None),
        ("/health", "GET", None),
        ("/state", "GET", None),
        ("/modules", "GET", None),
        ("/system/info", "GET", None),
        ("/chat", "POST", {"message": "test"}),
    ]
    
    for endpoint, method, data in endpoints_to_test:
        try:
            url = f"http://localhost:8000{endpoint}"
            req = urllib.request.Request(url, method=method)
            req.add_header('Content-Type', 'application/json')
            req.add_header('User-Agent', 'Diagnostic-Script')
            
            if data and method == "POST":
                import json
                data_str = json.dumps(data).encode('utf-8')
                req.data = data_str
            
            try:
                with urllib.request.urlopen(req, timeout=10) as response:
                    response_data = response.read().decode('utf-8')
                    print(f"  ‚úÖ {method} {endpoint} - {response.status}")
                    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
                    if response_data:
                        try:
                            parsed = json.loads(response_data)
                            if 'message' in parsed:
                                print(f"       üì® –û—Ç–≤–µ—Ç: {parsed['message'][:50]}...")
                        except:
                            if len(response_data) < 100:
                                print(f"       üì® –û—Ç–≤–µ—Ç: {response_data}")
            except urllib.error.HTTPError as e:
                print(f"  ‚ö†Ô∏è  {method} {endpoint} - {e.code} {e.reason}")
            except Exception as e:
                print(f"  ‚ùå {method} {endpoint} - –û—à–∏–±–∫–∞: {e}")
                
        except Exception as e:
            print(f"  üîå {method} {endpoint} - –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω: {e}")

def check_routes_in_app():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ routes –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –≤ app.py"""
    print("\nüîó –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø ROUTES –í APP.PY:")
    
    app_file = Path("api/app.py")
    if app_file.exists():
        content = app_file.read_text()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç routes
        if "from api.routes import router" in content or "from .routes import router" in content:
            print("‚úÖ Router –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ app.py")
        else:
            print("‚ùå Router –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ app.py")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ router
        if "app.include_router(router)" in content:
            print("‚úÖ Router –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é")
        else:
            print("‚ùå Router –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã
        if "prefix=" in content:
            prefix_match = re.search(r'prefix=(["\'])([^"\']+)\1', content)
            if prefix_match:
                print(f"üìå –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–µ—Ñ–∏–∫—Å: {prefix_match.group(2)}")
    else:
        print("‚ùå –§–∞–π–ª app.py –Ω–µ –Ω–∞–π–¥–µ–Ω")

if __name__ == "__main__":
    analyze_routes_file()
    check_routes_in_app()
    test_api_endpoints()