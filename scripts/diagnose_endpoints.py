# scripts/diagnose_endpoints.py
#!/usr/bin/env python3
"""
–î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –°–ö–†–ò–ü–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –≠–ù–î–ü–û–ò–ù–¢–û–í
"""

import re
import ast
import json
from pathlib import Path

def analyze_routes_file():
    """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ routes.py –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    routes_file = Path("api/routes.py")
    
    if not routes_file.exists():
        print("‚ùå –§–∞–π–ª routes.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    content = routes_file.read_text()
    
    print("üîç –ê–ù–ê–õ–ò–ó routes.py")
    print("=" * 80)
    
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ router
    router_patterns = [
        r'@router\.(get|post|put|delete)\([^)]*["\']([^"\']+)["\'][^)]*\)',
        r'@.*\.(get|post|put|delete)\([^)]*["\']([^"\']+)["\'][^)]*\)'
    ]
    
    found_endpoints = []
    
    for pattern in router_patterns:
        matches = re.findall(pattern, content, re.MULTILINE | re.DOTALL)
        for method, endpoint in matches:
            found_endpoints.append({
                "method": method.upper(),
                "endpoint": endpoint,
                "pattern": pattern
            })
    
    # –í—ã–≤–æ–¥ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    print("üìã –ù–ê–ô–î–ï–ù–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´:")
    for ep in found_endpoints:
        print(f"  {ep['method']} {ep['endpoint']}")
    
    # –û–∂–∏–¥–∞–µ–º—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    expected_endpoints = [
        "/chat", "/state", "/health", "/mood/update",
        "/memory/store", "/memory/recall", "/personality/update",
        "/modules", "/", "/system/info"
    ]
    
    print("\nüéØ –°–†–ê–í–ù–ï–ù–ò–ï –° –û–ñ–ò–î–ê–ï–ú–´–ú–ò:")
    for expected in expected_endpoints:
        found = any(expected in ep["endpoint"] for ep in found_endpoints)
        status = "‚úÖ" if found else "‚ùå"
        print(f"  {status} {expected}")
    
    # AST –∞–Ω–∞–ª–∏–∑ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    print("\nüî¨ AST –ê–ù–ê–õ–ò–ó:")
    try:
        tree = ast.parse(content)
        ast_endpoints = []
        
        for node in ast.walk(tree):
            if isinstance(node, ast.FunctionDef):
                for decorator in node.decorator_list:
                    if isinstance(decorator, ast.Call):
                        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥ –∏ –ø—É—Ç—å
                        if isinstance(decorator.func, ast.Attribute):
                            method = decorator.func.attr
                            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
                            for arg in decorator.args:
                                if isinstance(arg, ast.Str):
                                    ast_endpoints.append({
                                        "method": method.upper(),
                                        "endpoint": arg.s,
                                        "function": node.name
                                    })
                                elif hasattr(ast, 'Constant') and isinstance(arg, ast.Constant) and isinstance(arg.value, str):
                                    ast_endpoints.append({
                                        "method": method.upper(),
                                        "endpoint": arg.value,
                                        "function": node.name
                                    })
        
        for ep in ast_endpoints:
            print(f"  {ep['method']} {ep['endpoint']} -> {ep['function']}")
            
    except Exception as e:
        print(f"  –û—à–∏–±–∫–∞ AST –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è router
    if "router = APIRouter()" in content:
        print("‚úÖ Router –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    else:
        print("‚ùå Router –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    return found_endpoints

def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã API"""
    print("\nüåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API:")
    
    import urllib.request
    import urllib.error
    
    endpoints_to_test = [
        ("/", "GET"),
        ("/health", "GET"),
        ("/state", "GET"),
        ("/chat", "POST")
    ]
    
    for endpoint, method in endpoints_to_test:
        try:
            url = f"http://localhost:8000{endpoint}"
            req = urllib.request.Request(url, method=method)
            
            # –î–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if method == "POST":
                req.add_header('Content-Type', 'application/json')
            
            try:
                with urllib.request.urlopen(req, timeout=5) as response:
                    print(f"  ‚úÖ {method} {endpoint} - {response.status}")
            except urllib.error.HTTPError as e:
                print(f"  ‚ö†Ô∏è  {method} {endpoint} - {e.code} {e.reason}")
            except Exception as e:
                print(f"  ‚ùå {method} {endpoint} - –û—à–∏–±–∫–∞: {e}")
                
        except Exception as e:
            print(f"  üîå {method} {endpoint} - –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")

if __name__ == "__main__":
    analyze_routes_file()
    test_api_endpoints()