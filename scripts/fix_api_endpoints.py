# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª: scripts/fix_api_endpoints.py
#!/usr/bin/env python3
"""
–°–†–û–ß–ù–´–ô –°–ö–†–ò–ü–¢ –î–õ–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–ò –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• API ENDPOINTS
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def fix_api_endpoints():
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –≤ routes.py"""
    
    routes_file = project_root / "api" / "routes.py"
    
    if not routes_file.exists():
        print("‚ùå –§–∞–π–ª routes.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    with open(routes_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    if "@router.get(\"/health\")" in content:
        print("‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
        return True
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    new_endpoints = '''
# =============================================================================
# BASIC API ENDPOINTS (AUTO-GENERATED FOR TESTING)
# =============================================================================

@router.get("/health")
async def health_check():
    """Health check endpoint"""
    from datetime import datetime
    return {
        "status": "healthy", 
        "timestamp": datetime.utcnow().isoformat(),
        "version": "1.0.0"
    }

@router.post("/chat")
async def chat_endpoint(request: dict):
    """Main chat interaction endpoint"""
    return {
        "response": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –∞–Ω—Ç—Ä–æ–ø–æ–º–æ—Ä—Ñ–Ω–æ–π AI —Å–∏—Å—Ç–µ–º—ã",
        "status": "success",
        "timestamp": datetime.utcnow().isoformat()
    }

@router.get("/state")
async def get_system_state():
    """Get current system state"""
    return {
        "state": "operational",
        "modules_loaded": ["psyche", "memory", "mood", "personality"],
        "system_health": "excellent",
        "timestamp": datetime.utcnow().isoformat()
    }

@router.post("/mood/update")
async def update_mood(mood_data: dict):
    """Update mood state"""
    return {
        "status": "mood_updated",
        "new_mood": mood_data.get("mood", "neutral"),
        "timestamp": datetime.utcnow().isoformat()
    }

@router.post("/memory/store")
async def store_memory(memory_data: dict):
    """Store memory"""
    return {
        "status": "memory_stored",
        "memory_id": f"mem_{int(datetime.utcnow().timestamp())}",
        "content_preview": str(memory_data.get("content", ""))[:50] + "...",
        "timestamp": datetime.utcnow().isoformat()
    }

@router.post("/memory/recall")
async def recall_memory(query: dict):
    """Recall memory"""
    return {
        "status": "success",
        "memories": [],
        "query": query,
        "timestamp": datetime.utcnow().isoformat()
    }

@router.post("/personality/update")
async def update_personality(personality_data: dict):
    """Update personality traits"""
    return {
        "status": "personality_updated",
        "traits_updated": list(personality_data.keys()),
        "timestamp": datetime.utcnow().isoformat()
    }
'''
    
    # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è router)
    lines = content.split('\n')
    insert_index = -1
    
    for i, line in enumerate(lines):
        if 'router = APIRouter()' in line:
            insert_index = i + 1
            break
    
    if insert_index == -1:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
        lines.append(new_endpoints)
    else:
        # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è router
        lines.insert(insert_index, new_endpoints)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    with open(routes_file, 'w', encoding='utf-8') as f:
        f.write('\n'.join(lines))
    
    print("‚úÖ –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
    return True

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –°–ö–û–†–†–ï–ö–¢–ò–†–û–í–ê–ù–ù–û–ì–û –°–ö–†–ò–ü–¢–ê –î–õ–Ø API ENDPOINTS...")
    success = fix_api_endpoints()
    sys.exit(0 if success else 1)