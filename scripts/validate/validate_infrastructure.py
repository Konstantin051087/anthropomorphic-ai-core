#!/usr/bin/env python3
"""
–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è Python 3.12.3/3.13.4
"""

import sys
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

class InfrastructureValidator:
    def __init__(self):
        self.base_dir = Path(__file__).parent.parent
        self.errors = []
        self.warnings = []
    
    def validate_python_version(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
        version = sys.version_info
        expected_versions = [(3, 12, 3), (3, 13, 4)]
        current = (version.major, version.minor, version.micro)
        
        if current in expected_versions:
            logger.info(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - —Å–æ–≤–º–µ—Å—Ç–∏–º")
        else:
            self.warnings.append(
                f"Python {version.major}.{version.minor}.{version.micro} - "
                f"–æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö –≤–µ—Ä—Å–∏–π"
            )
    
    def validate_environment_files(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        env_files = [".env.example", ".env"]
        
        for env_file in env_files:
            path = self.base_dir / env_file
            if path.exists():
                logger.info(f"‚úÖ –§–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω: {env_file}")
            else:
                if env_file == ".env":
                    self.warnings.append(f"–§–∞–π–ª {env_file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)")
                else:
                    self.errors.append(f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {env_file}")
    
    def validate_config_files(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        config_files = [
            "data/configs/system_config.json",
            "data/configs/psyche_config.json",
            "data/configs/memory_config.json", 
            "data/configs/mood_config.json"
        ]
        
        for config_file in config_files:
            path = self.base_dir / config_file
            if path.exists():
                logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {config_file}")
            else:
                self.errors.append(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {config_file}")
    
    def validate_deploy_templates(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–µ–ø–ª–æ—è"""
        deploy_files = ["render.yaml", "Dockerfile", "scripts/deploy_render.sh"]
        
        for deploy_file in deploy_files:
            path = self.base_dir / deploy_file
            if path.exists():
                logger.info(f"‚úÖ –®–∞–±–ª–æ–Ω –¥–µ–ø–ª–æ—è –Ω–∞–π–¥–µ–Ω: {deploy_file}")
            else:
                self.errors.append(f"–®–∞–±–ª–æ–Ω –¥–µ–ø–ª–æ—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {deploy_file}")
    
    def validate_api_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API"""
        api_files = [
            "api/__init__.py",
            "api/app.py", 
            "api/routes.py",
            "api/models.py",
            "api/dependencies.py",
            "api/middleware.py"
        ]
        
        for api_file in api_files:
            path = self.base_dir / api_file
            if path.exists():
                logger.info(f"‚úÖ API —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {api_file}")
            else:
                self.errors.append(f"API —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {api_file}")
    
    def validate_utils_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —É—Ç–∏–ª–∏—Ç"""
        utils_files = [
            "utils/__init__.py",
            "utils/logger.py",
            "utils/helpers.py"
        ]
        
        for utils_file in utils_files:
            path = self.base_dir / utils_file
            if path.exists():
                logger.info(f"‚úÖ –£—Ç–∏–ª–∏—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞: {utils_file}")
            else:
                self.errors.append(f"–£—Ç–∏–ª–∏—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {utils_file}")
    
    def run_validation(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        logger.info("üîç –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
        
        checks = [
            self.validate_python_version,
            self.validate_environment_files, 
            self.validate_config_files,
            self.validate_deploy_templates,
            self.validate_api_structure,
            self.validate_utils_structure
        ]
        
        for check in checks:
            check()
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info("\n" + "="*50)
        logger.info("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò")
        logger.info("="*50)
        
        if self.errors:
            logger.error("‚ùå –û–®–ò–ë–ö–ò:")
            for error in self.errors:
                logger.error(f"  - {error}")
        else:
            logger.info("‚úÖ –û—à–∏–±–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        
        if self.warnings:
            logger.warning("‚ö† –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for warning in self.warnings:
                logger.warning(f"  - {warning}")
        else:
            logger.info("‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        if not self.errors:
            logger.info("\nüéâ –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê –ì–û–¢–û–í–ê –ö –î–ï–ü–õ–û–Æ!")
            return True
        else:
            logger.error("\nüí• –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º")
            return False

if __name__ == "__main__":
    validator = InfrastructureValidator()
    success = validator.run_validation()
    sys.exit(0 if success else 1)