#!/usr/bin/env python3
"""
–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ë–ê–ó–´ –î–ê–ù–ù–´–• ANTHROPOMORPHIC AI - –í–ï–†–°–ò–Ø 1.0
"""

import os
import sys
import json
import logging
import time
import traceback
from pathlib import Path
from typing import Dict, List, Any, Tuple
from datetime import datetime
from sqlalchemy import text, inspect
from sqlalchemy.exc import SQLAlchemyError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(levelname)s: %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

class DatabaseComprehensiveTest:
    def __init__(self):
        self.base_dir = Path(__file__).parent.parent
        self.test_results = {
            "project": "Anthropomorphic AI Database",
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "database_test": {
                "overall_status": "IN_PROGRESS",
                "connection": {},
                "models": {},
                "crud_operations": {},
                "performance": {},
                "recommendations": []
            },
            "score": {
                "total_tests": 0,
                "passed_tests": 0,
                "success_rate": 0
            }
        }

    def print_header(self, message: str):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞–∑–¥–µ–ª–∞"""
        print(f"\n{'='*80}")
        print(f"üîç {message}")
        print(f"{'='*80}")

    def print_section(self, message: str):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞"""
        print(f"\n{'‚îÄ'*60}")
        print(f"üìÅ {message}")
        print(f"{'‚îÄ'*60}")

    def print_result(self, test_name: str, status: bool, details: str = "", points: int = 1):
        """–ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        icon = "‚úÖ" if status else "‚ùå"
        status_text = "–í–´–ü–û–õ–ù–ï–ù–û" if status else "–ù–ï –í–´–ü–û–õ–ù–ï–ù–û"
        print(f"{icon} {test_name}: {status_text}")
        if details:
            print(f"   üìù {details}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤
        self.test_results["score"]["total_tests"] += 1
        if status:
            self.test_results["score"]["passed_tests"] += points
        
        return status

    def test_database_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.print_header("üîå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –¥–≤–∏–∂–æ–∫
            sys.path.insert(0, str(self.base_dir))
            from core.config import settings
            from database.session import engine, get_db
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            self.print_result(
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω—ã",
                True,
                f"URL: {settings.DATABASE_URL[:30]}...",
                points=1
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º text()
            with engine.connect() as conn:
                result = conn.execute(text("SELECT 1"))
                check_result = self.print_result(
                    "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL",
                    True,
                    "–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                    points=2
                )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ PostgreSQL
                version_result = conn.execute(text("SELECT version()"))
                version = version_result.fetchone()[0]
                self.print_result(
                    "–í–µ—Ä—Å–∏—è PostgreSQL",
                    True,
                    f"–í–µ—Ä—Å–∏—è: {version}",
                    points=1
                )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–±—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–π
            try:
                db = next(get_db())
                db.execute(text("SELECT 1"))
                self.print_result(
                    "–§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç",
                    True,
                    "–°–µ—Å—Å–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                    points=2
                )
            except Exception as e:
                self.print_result(
                    "–§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π",
                    False,
                    f"–û—à–∏–±–∫–∞: {e}",
                    points=0
                )
            
            return True
            
        except Exception as e:
            self.print_result(
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                False,
                f"–û—à–∏–±–∫–∞: {e}",
                points=0
            )
            return False

    def test_database_models(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.print_header("üèóÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ï–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        
        try:
            from database.session import engine, Base
            from database import models
            
            inspector = inspect(engine)
            existing_tables = inspector.get_table_names()
            
            # –û–∂–∏–¥–∞–µ–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            expected_tables = [
                'system_state', 'memories', 'tags', 'interactions',
                'mood_history', 'personality_traits', 'character_habits',
                'learning_experiences', 'system_logs', 'memory_tags'
            ]
            
            tables_created = []
            for table in expected_tables:
                exists = table in existing_tables
                self.print_result(
                    f"–¢–∞–±–ª–∏—Ü–∞: {table}",
                    exists,
                    "–°–æ–∑–¥–∞–Ω–∞" if exists else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                    points=1
                )
                if exists:
                    tables_created.append(table)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª—é—á–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
            self._test_table_structure()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
            self._test_table_relationships()
            
            return len(tables_created) == len(expected_tables)
            
        except Exception as e:
            self.print_result(
                "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π",
                False,
                f"–û—à–∏–±–∫–∞: {e}",
                points=0
            )
            return False

    def _test_table_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü"""
        self.print_section("üìä –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶")
        
        try:
            from database.session import engine
            inspector = inspect(engine)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ system_state
            system_state_columns = inspector.get_columns('system_state')
            required_columns = ['id', 'current_mood', 'mood_intensity', 'created_at']
            for col in required_columns:
                exists = any(col == column['name'] for column in system_state_columns)
                self.print_result(
                    f"–°–∏—Å—Ç–µ–º–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: —Å—Ç–æ–ª–±–µ—Ü {col}",
                    exists,
                    points=1
                )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ memories
            memories_columns = inspector.get_columns('memories')
            required_memory_columns = ['id', 'content', 'memory_type', 'importance']
            for col in required_memory_columns:
                exists = any(col == column['name'] for column in memories_columns)
                self.print_result(
                    f"–¢–∞–±–ª–∏—Ü–∞ –ø–∞–º—è—Ç–∏: —Å—Ç–æ–ª–±–µ—Ü {col}",
                    exists,
                    points=1
                )
                
        except Exception as e:
            self.print_result(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü",
                False,
                f"–û—à–∏–±–∫–∞: {e}",
                points=0
            )

    def _test_table_relationships(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏"""
        self.print_section("üîó –ü–†–û–í–ï–†–ö–ê –û–¢–ù–û–®–ï–ù–ò–ô –ú–ï–ñ–î–£ –¢–ê–ë–õ–ò–¶–ê–ú–ò")
        
        try:
            from database.session import engine
            inspector = inspect(engine)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ foreign keys
            foreign_keys = inspector.get_foreign_keys('memory_tags')
            has_relationships = len(foreign_keys) >= 2
            
            self.print_result(
                "–û—Ç–Ω–æ—à–µ–Ω–∏—è memory_tags",
                has_relationships,
                f"–ù–∞–π–¥–µ–Ω–æ foreign keys: {len(foreign_keys)}",
                points=2
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
            indexes = inspector.get_indexes('memories')
            has_indexes = len(indexes) > 0
            self.print_result(
                "–ò–Ω–¥–µ–∫—Å—ã –≤ memories",
                has_indexes,
                f"–ù–∞–π–¥–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {len(indexes)}",
                points=1
            )
            
        except Exception as e:
            self.print_result(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
                False,
                f"–û—à–∏–±–∫–∞: {e}",
                points=0
            )

    def test_crud_operations(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π"""
        self.print_header("üîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CRUD –û–ü–ï–†–ê–¶–ò–ô")
        
        try:
            from database.session import get_db
            from database import models
            from sqlalchemy.orm import Session
            
            db = next(get_db())
            
            # CREATE - –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            test_memory = models.Memory(
                content="–¢–µ—Å—Ç–æ–≤–∞—è –ø–∞–º—è—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π",
                memory_type="test",
                importance=0.7,
                emotion_context="neutral"
            )
            db.add(test_memory)
            db.commit()
            db.refresh(test_memory)
            
            self.print_result(
                "CREATE –æ–ø–µ—Ä–∞—Ü–∏—è",
                test_memory.id is not None,
                f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å —Å ID: {test_memory.id}",
                points=2
            )
            
            # READ - –ß—Ç–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            read_memory = db.query(models.Memory).filter(models.Memory.id == test_memory.id).first()
            self.print_result(
                "READ –æ–ø–µ—Ä–∞—Ü–∏—è",
                read_memory is not None and read_memory.content == test_memory.content,
                "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–∞",
                points=2
            )
            
            # UPDATE - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            if read_memory:
                original_content = read_memory.content
                read_memory.content = "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"
                db.commit()
                db.refresh(read_memory)
                
                self.print_result(
                    "UPDATE –æ–ø–µ—Ä–∞—Ü–∏—è",
                    read_memory.content != original_content,
                    "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
                    points=2
                )
            
            # DELETE - –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            if read_memory:
                db.delete(read_memory)
                db.commit()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
                deleted_memory = db.query(models.Memory).filter(models.Memory.id == test_memory.id).first()
                self.print_result(
                    "DELETE –æ–ø–µ—Ä–∞—Ü–∏—è",
                    deleted_memory is None,
                    "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞",
                    points=2
                )
            
            return True
            
        except Exception as e:
            self.print_result(
                "CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏",
                False,
                f"–û—à–∏–±–∫–∞: {e}",
                points=0
            )
            return False

    def test_performance(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.print_header("‚ö° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        
        try:
            from database.session import engine, get_db
            import time
            
            # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            start_time = time.time()
            with engine.connect() as conn:
                for _ in range(10):
                    conn.execute(text("SELECT 1"))
            simple_query_time = time.time() - start_time
            
            self.print_result(
                "–°–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                simple_query_time < 1.0,
                f"–í—Ä–µ–º—è: {simple_query_time:.3f} —Å–µ–∫",
                points=2
            )
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
            db = next(get_db())
            start_time = time.time()
            
            from database import models
            memories = []
            for i in range(5):
                memory = models.Memory(
                    content=f"–¢–µ—Å—Ç–æ–≤–∞—è –ø–∞–º—è—Ç—å {i}",
                    memory_type="performance_test",
                    importance=0.5
                )
                memories.append(memory)
            
            db.bulk_save_objects(memories)
            db.commit()
            
            batch_insert_time = time.time() - start_time
            
            self.print_result(
                "–ü–∞–∫–µ—Ç–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π",
                batch_insert_time < 2.0,
                f"–í—Ä–µ–º—è: {batch_insert_time:.3f} —Å–µ–∫ –¥–ª—è 5 –∑–∞–ø–∏—Å–µ–π",
                points=2
            )
            
            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            db.query(models.Memory).filter(models.Memory.memory_type == "performance_test").delete()
            db.commit()
            
            return True
            
        except Exception as e:
            self.print_result(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                False,
                f"–û—à–∏–±–∫–∞: {e}",
                points=0
            )
            return False

    def test_integration(self):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏"""
        self.print_header("üîó –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
        
        try:
            # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ orchestrator
            from core.orchestrator import Orchestrator
            self.print_result(
                "–ò–º–ø–æ—Ä—Ç Orchestrator",
                True,
                "Orchestrator —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω",
                points=2
            )
            
            # –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã orchestrator —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            orchestrator = Orchestrator()
            self.print_result(
                "–°–æ–∑–¥–∞–Ω–∏–µ Orchestrator",
                True,
                "–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ",
                points=2
            )
            
            # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            init_success = orchestrator.initialize()
            self.print_result(
                "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Orchestrator",
                init_success,
                "–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω" if init_success else "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
                points=3
            )
            
            return init_success
            
        except Exception as e:
            self.print_result(
                "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                False,
                f"–û—à–∏–±–∫–∞: {e}",
                points=0
            )
            return False

    def generate_database_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.print_header("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ë–ê–ó–ï –î–ê–ù–ù–´–•")
        
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
        total_tests = self.test_results["score"]["total_tests"]
        passed_tests = self.test_results["score"]["passed_tests"]
        success_rate = (passed_tests / total_tests) * 100 if total_tests > 0 else 0
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if success_rate >= 90:
            recommendations.extend([
                "‚úÖ –ë–ê–ó–ê –î–ê–ù–ù–´–• –ì–û–¢–û–í–ê –ö –ü–†–û–î–ö–®–ï–ù–£",
                "üéâ –í—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ",
                "üöÄ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
            ])
        elif success_rate >= 70:
            recommendations.extend([
                "‚ö†Ô∏è –ë–ê–ó–ê –î–ê–ù–ù–´–• –¢–†–ï–ë–£–ï–¢ –ù–ï–ë–û–õ–¨–®–ò–• –î–û–†–ê–ë–û–¢–û–ö",
                "üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º"
            ])
        else:
            recommendations.extend([
                "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•",
                "üî¥ –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫"
            ])
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Å—Ç–æ–≤
        if not self.test_results["database_test"].get("connection_ok", False):
            recommendations.extend([
                "üîå –ü–†–û–ë–õ–ï–ú–´ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:",
                "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DATABASE_URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö",
                "   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞",
                "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ñ–∞–π—Ä–≤–æ–ª—ã"
            ])
        
        if not self.test_results["database_test"].get("models_ok", False):
            recommendations.extend([
                "üèóÔ∏è –ü–†–û–ë–õ–ï–ú–´ –° –ú–û–î–ï–õ–Ø–ú–ò:",
                "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                "   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã",
                "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–æ–¥–µ–ª–µ–π –∏ —Å—Ö–µ–º—ã –ë–î"
            ])
        
        if not self.test_results["database_test"].get("crud_ok", False):
            recommendations.extend([
                "üîÑ –ü–†–û–ë–õ–ï–ú–´ –° CRUD –û–ü–ï–†–ê–¶–ò–Ø–ú–ò:",
                "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å–µ—Å—Å–∏–π",
                "   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
                "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ CRUD –æ–ø–µ—Ä–∞—Ü–∏—è—Ö"
            ])
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        recommendations.extend([
            "‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø:",
            "   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
            "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π",
            "   ‚Ä¢ –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Å—Ç–æ —á–∏—Ç–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
        ])
        
        self.test_results["database_test"]["recommendations"] = recommendations
        
        # –í—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        for i, recommendation in enumerate(recommendations, 1):
            print(f"{i}. {recommendation}")
        
        return recommendations

    def run_comprehensive_database_test(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.print_header("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ë–ê–ó–´ –î–ê–ù–ù–´–• ANTHROPOMORPHIC AI")
        print(f"üìÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {self.test_results['timestamp']}")
        print(f"üêç –í–µ—Ä—Å–∏—è Python: {sys.version.split()[0]}")
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {self.base_dir}")
        
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        connection_ok = self.test_database_connection()
        models_ok = self.test_database_models()
        crud_ok = self.test_crud_operations()
        performance_ok = self.test_performance()
        integration_ok = self.test_integration()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.test_results["database_test"].update({
            "connection_ok": connection_ok,
            "models_ok": models_ok,
            "crud_ok": crud_ok,
            "performance_ok": performance_ok,
            "integration_ok": integration_ok
        })
        
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        total_tests = self.test_results["score"]["total_tests"]
        passed_tests = self.test_results["score"]["passed_tests"]
        success_rate = (passed_tests / total_tests) * 100 if total_tests > 0 else 0
        
        self.test_results["score"]["success_rate"] = round(success_rate, 2)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        self.generate_database_recommendations()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.print_header("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        
        print(f"üèÅ –û–ë–©–ò–ô –°–¢–ê–¢–£–°: {'‚úÖ –ì–û–¢–û–í' if success_rate >= 80 else '‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–û–ö'}")
        print(f"üìà –£–°–ü–ï–®–ù–û–°–¢–¨ –¢–ï–°–¢–û–í: {success_rate}%")
        print(f"‚úÖ –í–´–ü–û–õ–ù–ï–ù–û –¢–ï–°–¢–û–í: {passed_tests}/{total_tests}")
        
        print(f"\nüìã –î–ï–¢–ê–õ–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"   üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ' if connection_ok else '‚ùå'}")
        print(f"   üèóÔ∏è –ú–æ–¥–µ–ª–∏: {'‚úÖ' if models_ok else '‚ùå'}")
        print(f"   üîÑ CRUD: {'‚úÖ' if crud_ok else '‚ùå'}")
        print(f"   ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {'‚úÖ' if performance_ok else '‚ùå'}")
        print(f"   üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'‚úÖ' if integration_ok else '‚ùå'}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = self.base_dir / "database_test_report.json"
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(self.test_results, f, indent=2, ensure_ascii=False, default=str)
            print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        if success_rate >= 80:
            self.test_results["database_test"]["overall_status"] = "READY"
            print("\nüéâ –ë–ê–ó–ê –î–ê–ù–ù–´–• –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        else:
            self.test_results["database_test"]["overall_status"] = "NEEDS_IMPROVEMENT"
            print("\nüîß –í–´–ü–û–õ–ù–ò–¢–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•.")
        
        return success_rate >= 80

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    
    try:
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    except KeyboardInterrupt:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    
    try:
        tester = DatabaseComprehensiveTest()
        success = tester.run_comprehensive_database_test()
        
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()